(* This generated code requires the following version of MenhirLib: *)

let () = MenhirLib.StaticVersion.require_20210419

module MenhirBasics = struct
  exception Error = Parsing.Parse_error

  type token =
    | WITH
    | WHILE
    | WHEN
    | VIRTUAL
    | VAL
    | UNDERSCORE
    | UIDENT of string
    | TYPE
    | TRY
    | TRUE
    | TO
    | TILDE
    | THEN
    | STRUCT
    | STRING of (string * Location.t * string option)
    | STAR
    | SIG
    | SEMISEMI
    | SEMI
    | RPAREN
    | REC
    | RBRACKET
    | RBRACE
    | QUOTED_STRING_ITEM of
        (string * Location.t * string * Location.t * string option)
    | QUOTED_STRING_EXPR of
        (string * Location.t * string * Location.t * string option)
    | QUOTE
    | QUESTION
    | PRIVATE
    | PREFIXOP of string
    | PLUSEQ
    | PLUSDOT
    | PLUS
    | PERCENT
    | OR
    | OPTLABEL of string
    | OPEN
    | OF
    | OBJECT
    | NONREC
    | NEW
    | MUTABLE
    | MODULE
    | MINUSGREATER
    | MINUSDOT
    | MINUS
    | METHOD
    | MATCH
    | LPAREN
    | LIDENT of string
    | LETOP of string
    | LET
    | LESSMINUS
    | LESS
    | LBRACKETPERCENTPERCENT
    | LBRACKETPERCENT
    | LBRACKETLESS
    | LBRACKETGREATER
    | LBRACKETBAR
    | LBRACKETATATAT
    | LBRACKETATAT
    | LBRACKETAT
    | LBRACKET
    | LBRACELESS
    | LBRACE
    | LAZY
    | LABEL of string
    | INT of (string * char option)
    | INITIALIZER
    | INHERIT
    | INFIXOP4 of string
    | INFIXOP3 of string
    | INFIXOP2 of string
    | INFIXOP1 of string
    | INFIXOP0 of string
    | INCLUDE
    | IN
    | IF
    | HASHOP of string
    | HASH
    | GREATERRBRACKET
    | GREATERRBRACE
    | GREATER
    | FUNCTOR
    | FUNCTION
    | FUN
    | FOR
    | FLOAT of (string * char option)
    | FALSE
    | EXTERNAL
    | EXCEPTION
    | EQUAL
    | EOL
    | EOF
    | END
    | ELSE
    | DOWNTO
    | DOTOP of string
    | DOTDOT
    | DOT
    | DONE
    | DOCSTRING of Docstrings.docstring
    | DO
    | CONSTRAINT
    | COMMENT of (string * Location.t)
    | COMMA
    | COLONGREATER
    | COLONEQUAL
    | COLONCOLON
    | COLON
    | CLASS
    | CHAR of char
    | BEGIN
    | BARRBRACKET
    | BARBAR
    | BAR
    | BANG
    | BACKQUOTE
    | ASSERT
    | AS
    | ANDOP of string
    | AND
    | AMPERSAND
    | AMPERAMPER
end

include MenhirBasics

let _eRR = MenhirBasics.Error

open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir

let mkloc = Location.mkloc

let mknoloc = Location.mknoloc

let make_loc (startpos, endpos) =
  {
    Location.loc_start = startpos;
    Location.loc_end = endpos;
    Location.loc_ghost = false;
  }

let ghost_loc (startpos, endpos) =
  {
    Location.loc_start = startpos;
    Location.loc_end = endpos;
    Location.loc_ghost = true;
  }

let mktyp ~loc ?attrs d = Typ.mk ~loc:(make_loc loc) ?attrs d

let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d

let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d

let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d

let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d

let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d

let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d

let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d

let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d

let pstr_typext (te, ext) = (Pstr_typext te, ext)

let pstr_primitive (vd, ext) = (Pstr_primitive vd, ext)

let pstr_type ((nr, ext), tys) = (Pstr_type (nr, tys), ext)

let pstr_exception (te, ext) = (Pstr_exception te, ext)

let pstr_include (body, ext) = (Pstr_include body, ext)

let pstr_recmodule (ext, bindings) = (Pstr_recmodule bindings, ext)

let psig_typext (te, ext) = (Psig_typext te, ext)

let psig_value (vd, ext) = (Psig_value vd, ext)

let psig_type ((nr, ext), tys) = (Psig_type (nr, tys), ext)

let psig_typesubst ((nr, ext), tys) =
  assert (nr = Recursive);
  (* see [no_nonrec_flag] *)
  (Psig_typesubst tys, ext)

let psig_exception (te, ext) = (Psig_exception te, ext)

let psig_include (body, ext) = (Psig_include body, ext)

let mkctf ~loc ?attrs ?docs d = Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d

let mkcf ~loc ?attrs ?docs d = Cf.mk ~loc:(make_loc loc) ?attrs ?docs d

let mkrhs rhs loc = mkloc rhs (make_loc loc)

let ghrhs rhs loc = mkloc rhs (ghost_loc loc)

let push_loc x acc = if x.Location.loc_ghost then acc else x :: acc

let reloc_pat ~loc x =
  {
    x with
    ppat_loc = make_loc loc;
    ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack;
  }

let reloc_exp ~loc x =
  {
    x with
    pexp_loc = make_loc loc;
    pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack;
  }

let reloc_typ ~loc x =
  {
    x with
    ptyp_loc = make_loc loc;
    ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack;
  }

let mkexpvar ~loc (name : string) =
  mkexp ~loc (Pexp_ident (mkrhs (Lident name) loc))

let mkoperator = mkexpvar

let mkpatvar ~loc name = mkpat ~loc (Ppat_var (mkrhs name loc))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d

let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d

let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d

let ghloc ~loc d = { txt = d; loc = ghost_loc loc }

let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d

let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d

let mkinfix arg1 op arg2 = Pexp_apply (op, [ (Nolabel, arg1); (Nolabel, arg2) ])

let neg_string f =
  if String.length f > 0 && f.[0] = '-' then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus ~oploc name arg =
  match (name, arg.pexp_desc) with
  | "-", Pexp_constant (Pconst_integer (n, m)) ->
      Pexp_constant (Pconst_integer (neg_string n, m))
  | ("-" | "-."), Pexp_constant (Pconst_float (f, m)) ->
      Pexp_constant (Pconst_float (neg_string f, m))
  | _ -> Pexp_apply (mkoperator ~loc:oploc ("~" ^ name), [ (Nolabel, arg) ])

let mkuplus ~oploc name arg =
  let desc = arg.pexp_desc in
  match (name, desc) with
  | "+", Pexp_constant (Pconst_integer _)
  | ("+" | "+."), Pexp_constant (Pconst_float _) ->
      desc
  | _ -> Pexp_apply (mkoperator ~loc:oploc ("~" ^ name), [ (Nolabel, arg) ])

(* TODO define an abstraction boundary between locations-as-pairs
   and locations-as-Location.t; it should be clear when we move from
   one world to the other *)

let mkexp_cons_desc consloc args =
  Pexp_construct (mkrhs (Lident "::") consloc, Some args)

let mkexp_cons ~loc consloc args = mkexp ~loc (mkexp_cons_desc consloc args)

let mkpat_cons_desc consloc args =
  Ppat_construct (mkrhs (Lident "::") consloc, Some ([], args))

let mkpat_cons ~loc consloc args = mkpat ~loc (mkpat_cons_desc consloc args)

let ghexp_cons_desc consloc args =
  Pexp_construct (ghrhs (Lident "::") consloc, Some args)

let ghpat_cons_desc consloc args =
  Ppat_construct (ghrhs (Lident "::") consloc, Some ([], args))

let rec mktailexp nilloc =
  let open Location in
  function
  | [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      (Pexp_construct (nil, None), nilloc)
  | e1 :: el ->
      let exp_el, el_loc = mktailexp nilloc el in
      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
      let arg = ghexp ~loc (Pexp_tuple [ e1; ghexp ~loc:el_loc exp_el ]) in
      (ghexp_cons_desc loc arg, loc)

let rec mktailpat nilloc =
  let open Location in
  function
  | [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      (Ppat_construct (nil, None), nilloc)
  | p1 :: pl ->
      let pat_pl, el_loc = mktailpat nilloc pl in
      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
      let arg = ghpat ~loc (Ppat_tuple [ p1; ghpat ~loc:el_loc pat_pl ]) in
      (ghpat_cons_desc loc arg, loc)

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }

let mkexp_constraint ~loc e (t1, t2) =
  match (t1, t2) with
  | Some t, None -> mkexp ~loc (Pexp_constraint (e, t))
  | _, Some t -> mkexp ~loc (Pexp_coerce (e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_

let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> mkpat ~loc (Ppat_constraint (p, typ))

let syntax_error () = raise Syntaxerr.Escape_error

let unclosed opening_name opening_loc closing_name closing_loc =
  raise
    (Syntaxerr.Error
       (Syntaxerr.Unclosed
          ( make_loc opening_loc,
            opening_name,
            make_loc closing_loc,
            closing_name )))

let expecting loc nonterm =
  raise Syntaxerr.(Error (Expecting (make_loc loc, nonterm)))

(* Using the function [not_expecting] in a semantic action means that this
   syntactic form is recognized by the parser but is in fact incorrect. This
   idiom is used in a few places to produce ad hoc syntax error messages. *)

(* This idiom should be used as little as possible, because it confuses the
   analyses performed by Menhir. Because Menhir views the semantic action as
   opaque, it believes that this syntactic form is correct. This can lead
   [make generate-parse-errors] to produce sentences that cause an early
   (unexpected) syntax error and do not achieve the desired effect. This could
   also lead a completion system to propose completions which in fact are
   incorrect. In order to avoid these problems, the productions that use
   [not_expecting] should be marked with AVOID. *)

let not_expecting loc nonterm =
  raise Syntaxerr.(Error (Not_expecting (make_loc loc, nonterm)))

(* Helper functions for desugaring array indexing operators *)
type paren_kind = Paren | Brace | Bracket

(* We classify the dimension of indices: Bigarray distinguishes
   indices of dimension 1,2,3, or more. Similarly, user-defined
   indexing operator behave differently for indices of dimension 1
   or more.
*)
type index_dim = One | Two | Three | Many

type ('dot, 'index) array_family = {
  name :
    Lexing.position * Lexing.position ->
    'dot ->
    assign:bool ->
    paren_kind ->
    index_dim ->
    Longident.t Location.loc;
  (*
    This functions computes the name of the explicit indexing operator
    associated with a sugared array indexing expression.

    For instance, for builtin arrays, if Clflags.unsafe is set,
    * [ a.[index] ]     =>  [String.unsafe_get]
    * [ a.{x,y} <- 1 ]  =>  [ Bigarray.Array2.unsafe_set]

    User-defined indexing operator follows a more local convention:
    * [ a .%(index)]     => [ (.%()) ]
    * [ a.![1;2] <- 0 ]  => [(.![;..]<-)]
    * [ a.My.Map.?(0) => [My.Map.(.?())]
  *)
  index :
    Lexing.position * Lexing.position ->
    paren_kind ->
    'index ->
    index_dim * (arg_label * expression) list;
      (*
     [index (start,stop) paren index] computes the dimension of the
     index argument and how it should be desugared when transformed
     to a list of arguments for the indexing operator.
     In particular, in both the Bigarray case and the user-defined case,
     beyond a certain dimension, multiple indices are packed into a single
     array argument:
     * [ a.(x) ]       => [ [One, [Nolabel, <<x>>] ]
     * [ a.{1,2} ]     => [ [Two, [Nolabel, <<1>>; Nolabel, <<2>>] ]
     * [ a.{1,2,3,4} ] => [ [Many, [Nolabel, <<[|1;2;3;4|]>>] ] ]
   *)
}

let bigarray_untuplify = function
  | { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [ exp ]

let builtin_arraylike_name loc _ ~assign paren_kind n =
  let opname = if assign then "set" else "get" in
  let opname = if !Clflags.unsafe then "unsafe_" ^ opname else opname in
  let prefix =
    match paren_kind with
    | Paren -> Lident "Array"
    | Bracket -> Lident "String"
    | Brace ->
        let submodule_name =
          match n with
          | One -> "Array1"
          | Two -> "Array2"
          | Three -> "Array3"
          | Many -> "Genarray"
        in
        Ldot (Lident "Bigarray", submodule_name)
  in
  ghloc ~loc (Ldot (prefix, opname))

let builtin_arraylike_index loc paren_kind index =
  match paren_kind with
  | Paren | Bracket -> (One, [ (Nolabel, index) ])
  | Brace -> (
      (* Multi-indices for bigarray are comma-separated ([a.{1,2,3,4}]) *)
      match bigarray_untuplify index with
      | [ x ] -> (One, [ (Nolabel, x) ])
      | [ x; y ] -> (Two, [ (Nolabel, x); (Nolabel, y) ])
      | [ x; y; z ] -> (Three, [ (Nolabel, x); (Nolabel, y); (Nolabel, z) ])
      | coords -> (Many, [ (Nolabel, ghexp ~loc (Pexp_array coords)) ]))

let builtin_indexing_operators : (unit, expression) array_family =
  { index = builtin_arraylike_index; name = builtin_arraylike_name }

let paren_to_strings = function
  | Paren -> ("(", ")")
  | Bracket -> ("[", "]")
  | Brace -> ("{", "}")

let user_indexing_operator_name loc (prefix, ext) ~assign paren_kind n =
  let name =
    let assign = if assign then "<-" else "" in
    let mid = match n with Many | Three | Two -> ";.." | One -> "" in
    let left, right = paren_to_strings paren_kind in
    String.concat "" [ "."; ext; left; mid; right; assign ]
  in
  let lid =
    match prefix with None -> Lident name | Some p -> Ldot (p, name)
  in
  ghloc ~loc lid

let user_index loc _ index =
  (* Multi-indices for user-defined operators are semicolon-separated
     ([a.%[1;2;3;4]]) *)
  match index with
  | [ a ] -> (One, [ (Nolabel, a) ])
  | l -> (Many, [ (Nolabel, mkexp ~loc (Pexp_array l)) ])

let user_indexing_operators :
    (Longident.t option * string, expression list) array_family =
  { index = user_index; name = user_indexing_operator_name }

let mk_indexop_expr array_indexing_operator ~loc
    (array, dot, paren, index, set_expr) =
  let assign = match set_expr with None -> false | Some _ -> true in
  let n, index = array_indexing_operator.index loc paren index in
  let fn = array_indexing_operator.name loc dot ~assign paren n in
  let set_arg =
    match set_expr with None -> [] | Some expr -> [ (Nolabel, expr) ]
  in
  let args = ((Nolabel, array) :: index) @ set_arg in
  mkexp ~loc (Pexp_apply (ghexp ~loc (Pexp_ident fn), args))

let indexop_unclosed_error loc_s s loc_e =
  let left, right = paren_to_strings s in
  unclosed left loc_s right loc_e

let lapply ~loc p1 p2 =
  if !Clflags.applicative_functors then Lapply (p1, p2)
  else raise (Syntaxerr.Error (Syntaxerr.Applicative_path (make_loc loc)))

(* [loc_map] could be [Location.map]. *)
let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
  { x with txt = f x.txt }

let make_ghost x = { x with loc = { x.loc with loc_ghost = true } }

let loc_last (id : Longident.t Location.loc) : string Location.loc =
  loc_map Longident.last id

let loc_lident (id : string Location.loc) : Longident.t Location.loc =
  loc_map (fun x -> Lident x) id

let exp_of_longident lid =
  let lid = loc_map (fun id -> Lident (Longident.last id)) lid in
  Exp.mk ~loc:lid.loc (Pexp_ident lid)

let exp_of_label lbl = Exp.mk ~loc:lbl.loc (Pexp_ident (loc_lident lbl))

let pat_of_label lbl = Pat.mk ~loc:lbl.loc (Ppat_var (loc_last lbl))

let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right
    (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = (mkexp ~loc, ghtyp ~loc) in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp (Pexp_constraint (body, core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp (Ptyp_poly (newtypes, Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = { body with pexp_attributes = attrs @ body.pexp_attributes } in
  match ext with
  | None -> body
  | Some id -> ghexp (Pexp_extension (id, PStr [ mkstrexp body [] ]))

let mkexp_attrs ~loc d attrs = wrap_exp_attrs ~loc (mkexp ~loc d) attrs

let wrap_typ_attrs ~loc typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = { typ with ptyp_attributes = attrs @ typ.ptyp_attributes } in
  match ext with
  | None -> typ
  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))

let wrap_pat_attrs ~loc pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = { pat with ppat_attributes = attrs @ pat.ppat_attributes } in
  match ext with
  | None -> pat
  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs ~loc d attrs = wrap_pat_attrs ~loc (mkpat ~loc d) attrs

let wrap_class_attrs ~loc:_ body attrs =
  { body with pcl_attributes = attrs @ body.pcl_attributes }

let wrap_mod_attrs ~loc:_ attrs body =
  { body with pmod_attributes = attrs @ body.pmod_attributes }

let wrap_mty_attrs ~loc:_ attrs body =
  { body with pmty_attributes = attrs @ body.pmty_attributes }

let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [ body ]), []))

let wrap_mkstr_ext ~loc (item, ext) = wrap_str_ext ~loc (mkstr ~loc item) ext

let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [ body ]), []))

let wrap_mksig_ext ~loc (item, ext) = wrap_sig_ext ~loc (mksig ~loc item) ext

let mk_quotedext ~loc (id, idloc, str, strloc, delim) =
  let exp_id = mkloc id idloc in
  let e = ghexp ~loc (Pexp_constant (Pconst_string (str, strloc, delim))) in
  (exp_id, PStr [ mkstrexp e [] ])

let text_str pos = Str.text (rhs_text pos)

let text_sig pos = Sig.text (rhs_text pos)

let text_cstr pos = Cf.text (rhs_text pos)

let text_csig pos = Ctf.text (rhs_text pos)

let text_def pos =
  List.map (fun def -> Ptop_def [ def ]) (Str.text (rhs_text pos))

let extra_text startpos endpos text items =
  match items with
  | [] ->
      let post = rhs_post_text endpos in
      let post_extras = rhs_post_extra_text endpos in
      text post @ text post_extras
  | _ :: _ ->
      let pre_extras = rhs_pre_extra_text startpos in
      let post_extras = rhs_post_extra_text endpos in
      text pre_extras @ items @ text post_extras

let extra_str p1 p2 items = extra_text p1 p2 Str.text items

let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items

let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items

let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text items

let extra_def p1 p2 items =
  extra_text p1 p2
    (fun txt -> List.map (fun def -> Ptop_def [ def ]) (Str.text txt))
    items

let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }

type let_binding = {
  lb_pattern : pattern;
  lb_expression : expression;
  lb_is_pun : bool;
  lb_attributes : attributes;
  lb_docs : docs Lazy.t;
  lb_text : text Lazy.t;
  lb_loc : Location.t;
}

type let_bindings = {
  lbs_bindings : let_binding list;
  lbs_rec : rec_flag;
  lbs_extension : string Asttypes.loc option;
}

let mklb first ~loc (p, e, is_pun) attrs =
  {
    lb_pattern = p;
    lb_expression = e;
    lb_is_pun = is_pun;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc;
    lb_text = (if first then empty_text_lazy else symbol_text_lazy (fst loc));
    lb_loc = make_loc loc;
  }

let addlb lbs lb =
  if lb.lb_is_pun && lbs.lbs_extension = None then syntax_error ();
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let mklbs ext rf lb =
  let lbs = { lbs_bindings = []; lbs_rec = rf; lbs_extension = ext } in
  addlb lbs lb

let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
        Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
          ~docs:(Lazy.force lb.lb_docs) ~text:(Lazy.force lb.lb_text)
          lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value (lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [ str ]), []))

let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
        Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes lb.lb_pattern
          lb.lb_expression)
      lbs.lbs_bindings
  in
  mkexp_attrs ~loc
    (Pexp_let (lbs.lbs_rec, List.rev bindings, body))
    (lbs.lbs_extension, [])

let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
        Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes lb.lb_pattern
          lb.lb_expression)
      lbs.lbs_bindings
  in
  (* Our use of let_bindings(no_ext) guarantees the following: *)
  assert (lbs.lbs_extension = None);
  mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))

(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        assert (ptyp.ptype_kind = Ptype_abstract);
        assert (ptyp.ptype_attributes = []);
        let ty =
          match ptyp.ptype_manifest with Some ty -> ty | None -> assert false
        in
        (lid, ty)
    | _ -> err pmty.pmty_loc "only 'with type t =' constraints are supported"
  in
  match pmty with
  | { pmty_desc = Pmty_ident lid } -> (lid, [], pmty.pmty_attributes)
  | { pmty_desc = Pmty_with ({ pmty_desc = Pmty_ident lid }, cstrs) } ->
      (lid, List.map map_cstr cstrs, pmty.pmty_attributes)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"

let mk_directive_arg ~loc k = { pdira_desc = k; pdira_loc = make_loc loc }

let mk_directive ~loc name arg =
  Ptop_dir { pdir_name = name; pdir_arg = arg; pdir_loc = make_loc loc }

module Tables = struct
  include MenhirBasics

  let token2terminal : token -> int =
   fun _tok ->
    match _tok with
    | AMPERAMPER -> 123
    | AMPERSAND -> 122
    | AND -> 121
    | ANDOP _ -> 120
    | AS -> 119
    | ASSERT -> 118
    | BACKQUOTE -> 117
    | BANG -> 116
    | BAR -> 115
    | BARBAR -> 114
    | BARRBRACKET -> 113
    | BEGIN -> 112
    | CHAR _ -> 111
    | CLASS -> 110
    | COLON -> 109
    | COLONCOLON -> 108
    | COLONEQUAL -> 107
    | COLONGREATER -> 106
    | COMMA -> 105
    | COMMENT _ -> 104
    | CONSTRAINT -> 103
    | DO -> 102
    | DOCSTRING _ -> 101
    | DONE -> 100
    | DOT -> 99
    | DOTDOT -> 98
    | DOTOP _ -> 97
    | DOWNTO -> 96
    | ELSE -> 95
    | END -> 94
    | EOF -> 93
    | EOL -> 92
    | EQUAL -> 91
    | EXCEPTION -> 90
    | EXTERNAL -> 89
    | FALSE -> 88
    | FLOAT _ -> 87
    | FOR -> 86
    | FUN -> 85
    | FUNCTION -> 84
    | FUNCTOR -> 83
    | GREATER -> 82
    | GREATERRBRACE -> 81
    | GREATERRBRACKET -> 80
    | HASH -> 79
    | HASHOP _ -> 78
    | IF -> 77
    | IN -> 76
    | INCLUDE -> 75
    | INFIXOP0 _ -> 74
    | INFIXOP1 _ -> 73
    | INFIXOP2 _ -> 72
    | INFIXOP3 _ -> 71
    | INFIXOP4 _ -> 70
    | INHERIT -> 69
    | INITIALIZER -> 68
    | INT _ -> 67
    | LABEL _ -> 66
    | LAZY -> 65
    | LBRACE -> 64
    | LBRACELESS -> 63
    | LBRACKET -> 62
    | LBRACKETAT -> 61
    | LBRACKETATAT -> 60
    | LBRACKETATATAT -> 59
    | LBRACKETBAR -> 58
    | LBRACKETGREATER -> 57
    | LBRACKETLESS -> 56
    | LBRACKETPERCENT -> 55
    | LBRACKETPERCENTPERCENT -> 54
    | LESS -> 53
    | LESSMINUS -> 52
    | LET -> 51
    | LETOP _ -> 50
    | LIDENT _ -> 49
    | LPAREN -> 48
    | MATCH -> 47
    | METHOD -> 46
    | MINUS -> 45
    | MINUSDOT -> 44
    | MINUSGREATER -> 43
    | MODULE -> 42
    | MUTABLE -> 41
    | NEW -> 40
    | NONREC -> 39
    | OBJECT -> 38
    | OF -> 37
    | OPEN -> 36
    | OPTLABEL _ -> 35
    | OR -> 34
    | PERCENT -> 33
    | PLUS -> 32
    | PLUSDOT -> 31
    | PLUSEQ -> 30
    | PREFIXOP _ -> 29
    | PRIVATE -> 28
    | QUESTION -> 27
    | QUOTE -> 26
    | QUOTED_STRING_EXPR _ -> 25
    | QUOTED_STRING_ITEM _ -> 24
    | RBRACE -> 23
    | RBRACKET -> 22
    | REC -> 21
    | RPAREN -> 20
    | SEMI -> 19
    | SEMISEMI -> 18
    | SIG -> 17
    | STAR -> 16
    | STRING _ -> 15
    | STRUCT -> 14
    | THEN -> 13
    | TILDE -> 12
    | TO -> 11
    | TRUE -> 10
    | TRY -> 9
    | TYPE -> 8
    | UIDENT _ -> 7
    | UNDERSCORE -> 6
    | VAL -> 5
    | VIRTUAL -> 4
    | WHEN -> 3
    | WHILE -> 2
    | WITH -> 1

  and error_terminal = 0

  and token2value : token -> Obj.t =
   fun _tok ->
    match _tok with
    | AMPERAMPER -> Obj.repr ()
    | AMPERSAND -> Obj.repr ()
    | AND -> Obj.repr ()
    | ANDOP _v -> Obj.repr _v
    | AS -> Obj.repr ()
    | ASSERT -> Obj.repr ()
    | BACKQUOTE -> Obj.repr ()
    | BANG -> Obj.repr ()
    | BAR -> Obj.repr ()
    | BARBAR -> Obj.repr ()
    | BARRBRACKET -> Obj.repr ()
    | BEGIN -> Obj.repr ()
    | CHAR _v -> Obj.repr _v
    | CLASS -> Obj.repr ()
    | COLON -> Obj.repr ()
    | COLONCOLON -> Obj.repr ()
    | COLONEQUAL -> Obj.repr ()
    | COLONGREATER -> Obj.repr ()
    | COMMA -> Obj.repr ()
    | COMMENT _v -> Obj.repr _v
    | CONSTRAINT -> Obj.repr ()
    | DO -> Obj.repr ()
    | DOCSTRING _v -> Obj.repr _v
    | DONE -> Obj.repr ()
    | DOT -> Obj.repr ()
    | DOTDOT -> Obj.repr ()
    | DOTOP _v -> Obj.repr _v
    | DOWNTO -> Obj.repr ()
    | ELSE -> Obj.repr ()
    | END -> Obj.repr ()
    | EOF -> Obj.repr ()
    | EOL -> Obj.repr ()
    | EQUAL -> Obj.repr ()
    | EXCEPTION -> Obj.repr ()
    | EXTERNAL -> Obj.repr ()
    | FALSE -> Obj.repr ()
    | FLOAT _v -> Obj.repr _v
    | FOR -> Obj.repr ()
    | FUN -> Obj.repr ()
    | FUNCTION -> Obj.repr ()
    | FUNCTOR -> Obj.repr ()
    | GREATER -> Obj.repr ()
    | GREATERRBRACE -> Obj.repr ()
    | GREATERRBRACKET -> Obj.repr ()
    | HASH -> Obj.repr ()
    | HASHOP _v -> Obj.repr _v
    | IF -> Obj.repr ()
    | IN -> Obj.repr ()
    | INCLUDE -> Obj.repr ()
    | INFIXOP0 _v -> Obj.repr _v
    | INFIXOP1 _v -> Obj.repr _v
    | INFIXOP2 _v -> Obj.repr _v
    | INFIXOP3 _v -> Obj.repr _v
    | INFIXOP4 _v -> Obj.repr _v
    | INHERIT -> Obj.repr ()
    | INITIALIZER -> Obj.repr ()
    | INT _v -> Obj.repr _v
    | LABEL _v -> Obj.repr _v
    | LAZY -> Obj.repr ()
    | LBRACE -> Obj.repr ()
    | LBRACELESS -> Obj.repr ()
    | LBRACKET -> Obj.repr ()
    | LBRACKETAT -> Obj.repr ()
    | LBRACKETATAT -> Obj.repr ()
    | LBRACKETATATAT -> Obj.repr ()
    | LBRACKETBAR -> Obj.repr ()
    | LBRACKETGREATER -> Obj.repr ()
    | LBRACKETLESS -> Obj.repr ()
    | LBRACKETPERCENT -> Obj.repr ()
    | LBRACKETPERCENTPERCENT -> Obj.repr ()
    | LESS -> Obj.repr ()
    | LESSMINUS -> Obj.repr ()
    | LET -> Obj.repr ()
    | LETOP _v -> Obj.repr _v
    | LIDENT _v -> Obj.repr _v
    | LPAREN -> Obj.repr ()
    | MATCH -> Obj.repr ()
    | METHOD -> Obj.repr ()
    | MINUS -> Obj.repr ()
    | MINUSDOT -> Obj.repr ()
    | MINUSGREATER -> Obj.repr ()
    | MODULE -> Obj.repr ()
    | MUTABLE -> Obj.repr ()
    | NEW -> Obj.repr ()
    | NONREC -> Obj.repr ()
    | OBJECT -> Obj.repr ()
    | OF -> Obj.repr ()
    | OPEN -> Obj.repr ()
    | OPTLABEL _v -> Obj.repr _v
    | OR -> Obj.repr ()
    | PERCENT -> Obj.repr ()
    | PLUS -> Obj.repr ()
    | PLUSDOT -> Obj.repr ()
    | PLUSEQ -> Obj.repr ()
    | PREFIXOP _v -> Obj.repr _v
    | PRIVATE -> Obj.repr ()
    | QUESTION -> Obj.repr ()
    | QUOTE -> Obj.repr ()
    | QUOTED_STRING_EXPR _v -> Obj.repr _v
    | QUOTED_STRING_ITEM _v -> Obj.repr _v
    | RBRACE -> Obj.repr ()
    | RBRACKET -> Obj.repr ()
    | REC -> Obj.repr ()
    | RPAREN -> Obj.repr ()
    | SEMI -> Obj.repr ()
    | SEMISEMI -> Obj.repr ()
    | SIG -> Obj.repr ()
    | STAR -> Obj.repr ()
    | STRING _v -> Obj.repr _v
    | STRUCT -> Obj.repr ()
    | THEN -> Obj.repr ()
    | TILDE -> Obj.repr ()
    | TO -> Obj.repr ()
    | TRUE -> Obj.repr ()
    | TRY -> Obj.repr ()
    | TYPE -> Obj.repr ()
    | UIDENT _v -> Obj.repr _v
    | UNDERSCORE -> Obj.repr ()
    | VAL -> Obj.repr ()
    | VIRTUAL -> Obj.repr ()
    | WHEN -> Obj.repr ()
    | WHILE -> Obj.repr ()
    | WITH -> Obj.repr ()

  and default_reduction =
    ( 16,
j\000\000\000\000\000h\000\000\000\000\001D\000\000\000\000\000\000\000\000\000\000\000\182\001R\000\000\000\000\000\000\000\000\000\000\000\000\002#\000\000\000\000\000\000\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\000\000\000\002\188\000\000\002l\002m\000\000\002j\002k\000\000\000\000\000\000\000\000\000\000\001i\001h\000\000\002\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\223\000\015\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001P\000\000\000\000\001S\001Q\001Y\000A\002\141\000\000\001\022\003\025\003\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000g\000\000\000\231\000\000\002o\002n\000\000\000\000\000\000\001\186\000\000\000\000\000%\000\000\000\000\000\000\000\000\000\000\001X\000\000\001W\000\000\001G\001V\000\000\001E\000b\000\030\000\000\000\000\001\129\000\025\000\000\000\000\000\000\000\000\0030\000(\000\000\000\000\000\031\000\026\000\000\000\000\000\000\000\199\000\000\000\000\000\000\000\201\002B\0024\000\000\000\"\000\000\0025\000\000\000\000\001\183\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\003\026\000\000\003\027\000\000\000y\000\000\000\000\000!\000\000\000\000\000\000\000#\000\000\000$\000\000\000&\000\000\000\000\000'\002*\002)\000\000\000\000\000\000\000\000\000\000\000\000\000c\000\000\002\193\000f\000i\000d\002\182\003H\002\183\001\245\002\185\000\000\000\000\002\190\002i\002\192\000\000\000\000\000\000\002\199\002\196\000\000\000\000\000\000\001\241\001\227\000\000\000\000\000\000\000\000\001\231\000\000\001\226\000\000\001\244\002\205\000\000\000\000\000\000\000\000\001\131\000\000\000\000\001\243\002\191\000q\000\000\000\000\000p\000\000\002\200\002\184\000\000\001\237\000\000\000\000\002\203\000\000\002\202\002\201\000\000\001\233\000\000\000\000\001\229\001\228\001\242\001\234\000\000\000o\000\000\002\198\002\197\000\000\002\195\000\000\002q\002p\000\000\000\000\002L\002\194\000\000\000\000\000\000\000\000\001\188\0011\0012\002s\000\000\002t\002r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\242\000\243\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001s\000\000\000\000\000\000\000\000\000\000\000\000\003_\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0033\000\000\000\000\000\000\000\000\000\000\001r\000\000\000\000\000\000\001O\001y\001N\001v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0022\000\000\000\000\0023\002&\002%\000\000\001q\001p\000\000\000\203\000\000\000\000\001b\000\000\000\000\001f\000\000\001\208\001\207\000\000\000\000\001\206\001\205\001e\001c\000\000\001gxz\000\000\000\000\002\130\002y\000\000\000\000\000\000\000\000\002\133\002|\000\000\000\000\002F\000\000\000\000\002\137\002\128\000\000\000\000\002\135\002~{\000\000\000\000\002\127\000\000\000\000\002}\000\000\000z\000{\000\000\000\000\000\000\000\000\000\138\000\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\195\000\000\000\196\000\197\000\131\000\000\000\130\000\000\000\000\0014\000\000\0015\0013\002.\000\000\000\000\002/\002-\000\000\000\000\000\000\000\000\000\000\001\007\000\000\000\000\001\b\000\000\000\000\000\168\000\000\001\n\
       \001\t}\000\000\001\\\000\000\000\000\000\000\000k\000\000\000\000\000l\000\000\000\000\000\000\000\000\001{\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\225\000\000\000\000\000u\000\000\000\228\000\226\000\000\000\000\000\000\000\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000~\000m\000\000\000\000\002\020\000\000\000\000\000\254\001\200\000\000\000\238\000\239\001\005\000\000\002\171\000\000\002\170\002\169\002\151\000\000\000\000\000\000\000\000\002\142\000\000\002\144\000\000\002\143\000\000\002v\002u\000\000\002w\000\000\000\000\000\000\000\000\001\215\001\209\000\000\001\214\000\000\001\212\000\000\001\213\000\000\001\210\000\000\000\000\001\211\000\000\001\149\000\000\000\000\000\000\001\148\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001wx\000\000\000\000\000\000\000\000\001k\000\000\001j\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\020\002b\000\000\000\000\000\000\002`\000\000\000\000\000\000\002_\000\000\001^\000\000\000\000\000\000\000\000\002fa\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000^\000\000\000`\000_\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\014\002g\002X\000\000\002^\002Y\002e\002d\002c\002a\001\031\000\000\002V\000\000\000\000\000\000\000\000\000\000\002#\000\000\000\000\001\024\002Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\144\001\140\000\000\000\000\000\000\000\210\000\000\000\000\002\025\002#\000\000\000\000\001\026\002\023\002\024\000\000\000\000\000\000\000\000\000\000\001\147\001\143\001\139\000\000\000\000\000\211\000\000\000\000\001\146\001\142\001\138\001\136\002[\002W\002h\001\030\002\002\002U\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003L\000\000\000\000\003N\000\000\0006\000\000\000\000\003T\000\000\003S\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003K\000\000\000\000\003M\000\000\000\000\000\000\002\rt\000\000\003\r\003\n\
       \003\022\002\001\000\000\000\000\003\007\000\000\000\189\003\006\000\000\000\000\000\222\000\000\000\000\001\"\001!\000\000\001`\001_\000\000\000\000\002\204\002\187\000\000\000B\000\000\000\000\000C\000\000\000\000\002\146\002\145\000\000\000\000\000\134\000\000\000\000\002\n\
       \000\215\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\187\000\000\003\015\002\030\002\031\002\026\002\028\002\027\002\029\000\000\000\000\000\000\000\188\000\000\000\000\002#\000\000\000\214\000\000\000\000\000\000\000\000\003\014\000\000\000\185\000\000\000\000\000\000\000\000\001<\0016\000\000\000\000\0017\000\029\000\000\000\028\000\000\000\000\000\200\000\000\000\000\000\000\000 \
       \000\027\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\001\145\001\141\000\000\001\137\003/\000\000\002#\000\000\000\213\000\000\000\000\000\000\000\000\002]\002\"\002 \
       \002!\000\000\000\000\000\000\002#\000\000\000\212\000\000\000\000\000\000\000\000\002\\\000\000\001m\001l\000\000\000\022\000\000\003O\000\000\000+\000\000\000\000\000\000\000\000\000\137\000\000\000\218\000\001\000\000\000\000\000\221\000\002\000\000\000\000\000\000\001I\001J\000\003\000\000\000\000\000\000\000\000\001L\001M\001K\000\019\001H\000\020\000\000\001\216\000\000\000\004\000\000\001\217\000\000\000\005\000\000\001\218\000\000\000\000\001\219\000\006\000\000\000\007\000\000\001\220\000\000\000\b\000\000\001\221\000\000\000\t\000\000\001\222\000\000\000\000\001\223\000\n\
       \000\000\000\000\001\224\000\011\000\000\000\000\000\000\000\000\000\000\003\"\003\029\003\030\003!\003\031\000\000\003&\000\012\000\000\003%\000\000\001)\000\000\000\000\003#\000\000\003$\000\000\000\000\000\000\000\000\001-\001.\000\000\000\000\001,\001+\000\r\000\000\000\000\000\000\003B\000\000\003A"
    )

  and error =
    ( 124,
      "'\225 \
       \197\138\173\2433\208\020\015\228\000\003\142\0026\016\004\\(\223\018}\000@\248\000\000\024\224}\246D\bf\245\155\175\2437\252\149\031\226\017\007\158\007\223d@\130\2545\000\004\193\193\2388\176(4\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241'\208\004\015\128\000\001\142\007\223d@\130\2545\000\004\193\193\2388\176(4'\225\"\213\138\173\2433\208\020\015\224\000\007\142\000\000\000\000\004\000\012\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\192\004\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\128\000\128\007\224,$\000\003\226 \
bb\000(\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\128\179\160\b2R\028\012\025 \
       v\017\"\017@\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\002\012\\ \
       \000\016\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@@@ \
       \193\004\000\000\016\000\000\000\000\000\016\004\004\000\002\012\016@\000\001\000\000\000\000\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012H\002\168\000\131\t!\192\001\016\007a\003 \
       \004\132\128 \128\b \
       \002\020\000\016\000b\000\002\000\bH\002\b\000\130\000!\000\001\000\006 \
       \000 \
       \000\003\000\000$\193\004\192\004\000\128\000\000\000\000\b\0000\000\002H\016L\000@\b\000\000\000\000\000\128\003\000\000$\129\004\192\000\000\128\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000 \
       \000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000$\128\004\192\000\000\128\000\000\000\000\b\000 \
       \000\002\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\002H\000@\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\002\b\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000$\128\004\000\000\000\128\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\bH\002( \
       \130\000!\128\001\000\007`\017 \004\003 \
       \000x\016\000\197\194\128\001\000\128 \
       \000\016\bH\002(\000\194\t!\192\001\016\006a\016a\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\000\007\001\000\012\\(\000\016\b\002\000\001\000\003\000\bp\016 \
       \197\194\000\001\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\128\187\128\b2R\028\012\017 \
       v\001f\017`0\000\006\000\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\006\000\000\012\\ \
       \000\018\000\002\000\000\000\001\000\016\000\000\000@\000\000\001 \
       \000\000\004\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000}\246D\b/\227P\000L\028\030\227\139\002\131B~\018-X\170\2233=\001@\254\000\000x\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000$\193\004\192\004\000\128\000\000\000\000\b\0000\000\002H\016L\000@\b\000\000\000\000\000\128\003\000\000$\129\004\192\000\000\128\000\000\000\000\b\0000\000\002H\000L\000\000\b\000\000\000\000\000\128\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\bH\002( \
       \130\001!\128\001\016\007`\016 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\128\001\016\006`\016 \
       \004}\246D\b/\227P\000L\028\030\227\139\002\131B~\018-X\170\2233=\001@\254\000\000x\224#a\000E\194\141\241'\208\004\015\128\000\001\142\0026\016\004X(\223\018}\000@\248\000\000\024\224#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001!\000D\002\128\193#\144\000\001\128\000\001\140\b@\000\b\004\000(!@\192\000\000 \
       \016\000\000\132\000\000\128\000\002\130\020\012\000\000\002\001\000\000\b@\000\b\000\000(!\000\192\000\000 \

       \004\000\000\b\016\000\000\001\000\000\000\000\000\167\225 \
       \197\138\173\2437\208\020\015\226\000\003\142\n\
       ~\018\012X\170\2233=\001@\254 \
       \0008\224\167\225\"\197\138\173\2433\208\020\015\230\000\003\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\002\000@@\000\129\004\000\000\016\000\000\000\b\000\016 \
       \004\004\000\b\016@\000\001\000\000\000\000\000\001\002\000@\000\000\129\004\000\000\016\000\000\000\000\000\016 \
       \004\000\000\b\016\000\000\001\000\000\000\000\000\005\002\000@\000\000\129\000\000\000\016\000\000\000\000\0026\016\004X(\223\018}\000@\248\000\000\024\224#aw\253\155\239\247\255\252\157?\230!\003\158@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\194\141\241'\208\004\015\128\000\001\142\0026\016\004X(\223\018}\000@\248\000\000\024\224#a\000E\130\141\241#\208\004\015\128\000\001\142\n\
       6\024\132~*\223R=>b\249\004\001\154\235\129!\bD\002\128\193#\144\000\001\128\000\001\140\0026\016\004X(\223\018=\000@\248\000\000\028\224\197\189\187\215\250\190\223?\191\251a\247\219\127\252\2426\016\004X(\223\018=\000@\248\000\000\024\224\003!\000@\128\004\193\"\208\001\001\128\000\001\004\0002\016\004\b\000L\018-\000\016\026\000\000\020@\003!\002@\128\004\193\"\208\001\001\160\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\001\016\000\000\000\000\000\000\000\001\000\000@\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000@\003\000\002p\016\000\197\194\000\001\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\004\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\001@\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\001\000\000\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b
       \000\016\000\000\000\000@\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012H\003\184\000\131!!\192\193\018\007`\022!\022\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\012H\011\184\000\131!!\192\193\018\007`\022!\022\003\000\000`\000\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012X\011\184\000\131%!\192\193\018\007`\022!\022\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\006\000\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012X\011\184\000\131%!\192\193\018\007`\022!\022\003\000\000`\000\000\197\194\000\001\000\000\000\000\000\012X\011\184\000\131%!\192\193\018\007`\022!\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000@\000\000@\000\002\000\000\000\001\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000 \
       \000\000\000\000@\000\002\000\000\000\001\002\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\004\000\000 \
       \000\000\000\017 \
       \000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000@\000\002\000\000\000\001\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000@\000\002\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012H\003\184\000\131!!\192\193\018\007`\022!\020\000\000\002\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000@\000\000\002\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000 \
       \000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\001\016\000\000\000\000@\000\000\001\000\000\000\000\128\000\017\000\000\000\000\000\000\000\000\016\000\000\000\0002\016\004\b\000L\018-\000\016\026\000\000\016@\003!\000@\192\004\193&\144\001\001\128\000\001\004\0002\016\004\b\000L\018i
       mU\000\000\016\000\b\000@\000\001\000\000\016\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t2\145\181\t\001L\018o\000\016\027A\006\213P\001\000\000\000\000\000\128\"\128\000\000\000\000\000\000\b2\016\132\b\000L\018-\000\016\026\000\000\144@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000@\192\004\193&\208\001\001\160\000\001\004\0002\016\004\b\000L\018m\000\016\026\000\000\016@\003!\000@\128\004\193\"\208\001\001\160\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\001\176\000\001\000\000@\000\000\001@\004\197\016\003!\000@\128\004\193\"\208\001\001\160\000\001\004\t\000\001\176\000\001\000\000@\000\000\001@\004\197\016\131!\000@\128\004\193\"\208\001\001\160\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\027\000\000\016\000\004\000\000\000\020\000LQ\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\147!\027@\128\020\193&\208\001\001\180\000MU\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t2\017\180\b\001L\018m\000\016\027@\004\213P\131\161\136G\224,\229\"\211\227!\176@\025,\176\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000@\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\0002\016\004\b\000L\018)\000\016\024\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\000\000\001\000\000\016\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\004\000\000\000\000\000L\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b2\016\004\b\000L\018-\000\016\026\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\001\176\000\001\000\000@\000\000\001@\004\197\016\131\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b2\016\004\b\000L\018-\000\016\026\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\001\176\000\001\000\000@\000\000\001@\004\197\016\128\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\000\000@\000\000\000\000\004\129\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\002@\128\004\193\"\208\001\001\160\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\001 \
       \000\000\000\000@\000\000\000\000\004\133\016\131!\002@\128\004\193\"\208\001\001\160\000\001D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\001\016\000\000\000\000@\000\000\000\000\004\129\016\128\000\017\000\000\000\000\000\000\000\000\000\000\000\000\b0\000\016\000\000\004\000\000\000\000\000\000\000\000\000\128\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003)\000P\144\004\193&\176\t\001\144\000M\021\128\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\001\000\000@\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\128\000\000\000\000@\000\000\001\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\0002\016D\012\130L\018m\000\016\026\000\000\016@\001\002\000@@\000\129\004\000\000\016\000\000\000\b\000\016 \
       \004\004\000\b\016@\000\001\000\000\000\000\000\001\002\000@\000\000\129\004\000\000\016\000\000\000\000\000\016 \
       \004\000\000\b\016\000\000\001\000\000\000\000\000\000\000\000\000\000\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\003\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\016\004\004\000\002\012\016\000\000\001\000\000\000\000\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\000\000\000\000\000\000\b\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b\000\000\000\000\000\000\000\000\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128*\128\b0\018\028\000\017\000v\000\"\000@\b\000\000\000\002\000\000\000\000\000\000\000\000\000\000\003\000\000$\128\004\192\000\000\128\000\000\000\000\b\000\016\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\0000\000\007\129\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\196\128*\128\b0\018\028\000\017\000v\000\"\001@0\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\196\128*\128\b0\018\028\000\017\000v\001\"\001LH\002\168\000\131\001!\192\001\016\007`\018 \
       \004\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\001\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\012H\002\168\000\131\001!\192\001\016\007`\018 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\001\000\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012H\002\168\000\131\001!\192\001\016\007`\002 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\001\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\012H\002\168\000\131\t!\192\001\016\007a\003 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012H\002\168\000\131\001!\192\001\016\007`\002 \
       \004\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012H\002\168\000\131\001!\192\001\016\007`\002 \
       \004\000\000\000\000\000\000\000\000\000\000\000\016\016\016\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128*\128\b0\146\028\000\017\000v\016\"\000@\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012H\002\168\000\131\t!\192\001\016\007a\002 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012H\002\168\000\131\001!\192\001\016\007`\002 \
       \004\000\128\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\192\000\b\000\000\016\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\128\000\001\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b\000\000\000\000\000\000\000\000\000\001\002\000@\000\000\129\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128*\128\b0\146\028\000\025\000v\000&\000@P \
       \132\000\000\b\016\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\b\000@\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012\000\000\128\000\001\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\128*\128\b0\146\028\000\025\000v\016&\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\004\000\b\000\000\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224#a\002E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\004\000\000\000\004\000\000\000\000\000\128\000\016\000\000\000\000\000\000\000@\016\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\001!\000D\002\128\193#\144\000\001\128\000\001\140\012\000\001\016\000\000\000\000\000\0000\001\005\002@\000#a\000E\194\141\241'\208\004\015\130\000\001\142\0026\016\004X(\223\018}\000@\248 \
       \000\024\224#a\000E\130\141\241#\208\004\015\130\000\001\142\000\018\016\004D(\012\018y\000\000\024\000\000\024\192\001!\000D\002\128\193'\144\000\001\128\000\001\140\000\018\016\004@(\012\0189\000\000\024\000\000\024\192\001!\000D\002\128\193#\144\000\001\128\000\001\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012[\219\189\127\171\237s\251\255\182\031}\183\255\223\001\000\000\000\000\000\192#\128\000\000\000\000\000\000\n\
       6\024\132~*\223R=>b\249\004\001\154\235\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\
       6\016\132X(\223\018=\000@\248\000\000\024\224\163a\bE\130\141\241#\208\004\015\128\000\001\142\b\016 \
       \004\004\000\b\016@\000\001\000\000\000\000\000\001\002\000@\000\000\129\004\000\000\016\000\000\000\000\000\016 \
       \004\000\000\b\016\000\000\001\000\000\000\000\000\000\000\000\000\000\000\128\004\000\000\000\000\000\004\000\b\016\004\004\000\002\012\016\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\128\000\001\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\
       6\016\132X(\223\018=\000@\248\000\000\024\224\163a\bE\130\141\241#\208\004\015\128\000\001\142\b2\016\132\b\000L\018-\000\016\024\000\000\016@\000\000\000\000\000\000\000\004\000\000\000\016\000L\017\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\016\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224#a\000E\194\141\241'\208\004\015\128\000\001\142\0026\016\004X(\223\018}\000@\248\000\000\024\224#a\000E\130\141\241#\208\004\015\128\000\001\142\0002\016\004\012\000L\018m\000\016\026\000\000\017@\003!\000@\128\004\193&\208\001\001\160\000\001\020\0002\016\004\b\000L\018-\000\016\026\000\000\017@\003!\000@\128\004\193\"\208\001\001\160\000\001\004\001\000\000\000\000\001\000\000@\000\000\000\000\004\129\016#a\000E\130\141\241#\208\004\015\128\000\001\142\0002\144\005\r\000L\018k\000\016\024\000\000\016@\003)\000P\144\004\193&\176\001\001\128\000\001\004\0002\144\005\t\000L\018+\000\016\024\000\000\016@\002\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000@\128\004\193\"\208\001\001\160\000\001\004\000\000\000\128\000\000\000\000@\000\000\001\000\004\193\016\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\128\000\000\000\000@\000\000\001\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b:\024\132~\002\206R->2\027\004\001\146\203\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\003)\000P\144\020\193\"\176\001\001\128\000\005\004\0026\016\004X(\223\018=\000@\248\000\000\024\224\003!\000@\192\004\193&\208\001\001\160\000\001\004\0002\016\004\b\000L\018m\000\016\026\000\000\016@\003!\000@\128\004\193\"\208\001\001\160\000\001\004\000\000\000\000\000\000\000\000@\000\000\001\000\004\129\016#a\000E\130\141\241#\208\004\015\128\000\001\142\000\018\016\004D(\012\018y\000\000\024\000\000\024\192\001!\000D\002\128\193'\144\000\001\128\000\001\140\000\018\016\004@(\012\0189\000\000\024\000\000\024\192\196\148\187\131\232>\022\028\015\251`w\219~p\240\018\016\004@(\012\0189\000\000\024\000\000\024\192\197\189\187\215\250\190\215?\191\251a\247\219\127\253\240\000\000\000\000\000\b\000(\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\0026\016\004X(\223\018=\000@\248\000\000\024\224\197\189\187\215\250\190\215?\191\251a\247\219\127\252\240\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\131\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\025\000\000\000\000\004\000\000\000\016\000\000\000\b0\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\001\144\000\000\000\000@\000\000\001\000\002\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\b\000\001\144\000\000\000\000@\000\000\001\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\016\004@(\012\0189\000\000\024\000\000\024\192\197\189\187\215\250\190\215?\191\251a\247\219\127\253\240\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\012\000(\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\148\187\131\232>\022\028\015\249`w\139~p\2426\016\004X(\223\018=\000@\248\000\000\024\224\197\189\187\215\250\190\215?\191\251a\247\219\127\252\252IK\184>\131\225a\192\255\182\007}\183\231\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000B6\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012[\219\189\127\171\237s\251\255\182\031}\183\255\207\196\148\187\131\232>\022\028\015\251`w\219~p\2426\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\127[\188~\171\255s\253\255\214\255x\183\255\239}\246D\b/\227P\000L\028\030\227\139\002\131B6\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015\003!\000@\128\004\193&\208\001\001\128\000\001\004\0002\016\004\b\000L\018-\000\016\024\000\000\016@\135\169\"\208\152$\211>\176\025\001\246\000o\021H:\024\132~\002\206R->2\027\004\001\146\203\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\003)\000P\144\004\193\"\176\001\001\144\000%\004\0002\016\004\b\000L\018)\000\016\024\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003)\000P\144\004\193\"\176\001\001\144\000%\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b8\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\016\000\000\000\016\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\016\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\001\000\004\193\016\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\016\000H\017\0026\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b2\016\004\b\000L\018-\000\016\026\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\001\000\004\129\016\131!\000@\128\004\193\"\208\001\001\160\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\016\000H\017\b2\016\004\bbH\002(\000\130\001!\128\001\144\006`\000 \
       \004\132\128\"\128\b\"\018\024\012\025\000f\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\148\187\131\232>\022\028\015\249`w\139~pb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\t\176>\000\192@@>\002\001\000\005\134\003\163a\011E\130\141\241#\208\004\015\128\000\001\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\016\004@(\012\0189\000\000\024\000\000\024\192\197\189\187\215\250\190\215?\191\251a\247\219\127\253\240\000\000\000\000\000\b\000(\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012[\219\189\127\171\237\243\251\255\182\031}\183\255\207#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012[\219\189\127\171\237\243\251\255\182\031}\183\255\207#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012[\219\189\127\171\237\243\251\255\182\031}\183\255\207#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015\001\000\000\000\000\000\192\002\128\000\000\000\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\012[\219\189\127\171\237\243\251\255\182\031}\183\255\207#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\197\189\187\215\250\190\223?\191\251a\247\219\127\252\2426\016\004X(\223\018=\000@\248\000\000\024\224\196\148\187\131\232>\022\028\015\249`w\139~p\2426\016\004X(\223\018=\000@\248\000\000\024\224\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\012[\219\189\127\171\237\243\251\255\182\031}\183\255\207#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015\000\000\000\000\000\000\000\000\000\000\000\000P\000\000\000\000\000\000\000\000\b\000(\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187\215\250\190\223?\191\251a\247\219\127\252\2426\016\004X(\223\018=\000@\248\000\000\024\224\196\148\187\131\232>\022\028\015\249`w\139~p\2426\016\004X(\223\018=\000@\248\000\000\024\224\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\012[\219\189\127\171\237\243\251\255\182\031}\183\255\207#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\197\189\187\215\250\190\223?\191\251a\247\219\127\252\2426\016\004X(\223\018=\000@\248\000\000\024\224\196\148\187\131\232>\022\028\015\249`w\139~p\252[\219\189\127\171\237\243\251\255\182\031}\183\255\207#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015\197\189\187\215\250\190\215?\191\251a\247\219\127\253\252[\219\189\127\171\237s\251\255\150\031x\183\255\207\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\161\136G\224,\229\"\211\227!\176@\025,\176\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\0002\144\005\t\001L\018+\000\016\024\000\000P@\003\000\000`\000\000\197\194\000\001\000\000\000\000\000\000\016\000\000\000\001\004\000\000\000\016\000\000\000\000\000#aa\192\255\150\007x\183\231\015\003!\000@\128\004\193\"\208\001\001\160\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015#a\000E\130\141\241#\208\004\015\128\000\001\142\012IK\184>\131\225a\192\255\150\007x\183\231\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\001\000\004\129\016#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\1306\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\016\004\b\000L\018-\000\016\024\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129!\bD\002\128\193#\144\000\001\128\000\001\140\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0026\016$X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\bb\000\001\016\000\000\000\000\000\000\000\000\000\000\000\000\129\000\001\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\003\000\000P\000\000\000\016\000\000\000\000\012\0028\000\000\000\000\000\000\000\192\000\017\000\000\000\000\000\000\003\000\016P$\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\148\187\131\232>\022\028\015\251`w\219~p\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\145\003\224\012\004\004\003\224`\016\000X \
       8\000\001\000\000\000\000\000\000\000\004\000\000\000\000\000\128\000\000\000\000\000@\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\002\000@\000\000\129\004\000\000\016\000\000\000\000\000\016 \
       \004\000\000\b\016\000\000\001\000\000\000\000\000\000\000\000\000\000\000\128\004\000\b\000\000\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\000\004\000\000\000@\000\000\000\000\000\000\000\003\000\000\000\000\000\000\004\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\004\000\000\016 \
       \004\000\000\b\016\000\000\001\000\000\000\000\000\132\128\"\128\b \
       \146\028\000\025\000f\000\002\000@\016\004\004\000\002\012\016\000\000\001\000\000\000\000\000@\000\000\000\000\016\000\004\000\000\000\016\000\000\000\000\016 \
       \004\000\000\b\016\000\000\001\000\000\000\000\000\132\128\"\128\b \
       \146\028\000\025\000f\000\002\000@\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \
       \000\000@\000\128\006\000\000\000\128\000\000\000\000\018\000\000\000\000\b\000`\000\000\b\000\000\000\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\b\000\000\000\004\000\0000\000\006\000\000\012\\(\000\016\000\000\000\000\000\000\000\000\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\001\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\001\016\000\000\000\000@\000\002\000\000\000\000\016\000\000\017\000\000\000\000\004\000\000\000\000\000\000\000\000\000\001\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000@@\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000\000\000\000\004\000\000 \
       \000\000\000\001\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\006\000\000\012\\ \
       \000\016\000\000\000\000\000\133\128\162\128\b0R\028\000\025\000f\001\002\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\128\162\128\b \
       R\028\000\025\000f\001\002\016@0\000\006\000\000\012\\(\000\016\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\016\000\000\0000\000\006\000\000\012\\(\000\016\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\0000\000\006\000\000\012\\ \
       \000\016\000\000\000\000\000\133\128\"\128\b \
       R\028\000\025\000f\001\002\016HX\n\
       (\000\131\005!\192\001\144\006`\016!\004\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\0000\000\006\000\000\012\\ \
       \000\016\000\000\000\000\000\133\128\"\128\b \
       R\028\000\025\000f\001\002\016HX\n\
       (\000\131\005!\192\001\144\006`\016!\004\000\000\000\000\000\000\000\004\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\016D\b\000L\018m\000\016\024\000\000\016@\003!\004@\128\004\193\"\208\001\001\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003!\000@\128\004\193\"\208\001\001\128\000\001\004\bH\002(\000\130\001!\128\001\144\006`\000 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196\148\187\131\232>\022\028\015\249`w\139~p\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\002\000@@\000\129\004\000\000\016\000\000\000\000\000\016 \
       \004\000\000\b\016@\000\001\000\000\000\000\000\001\002\000@\000\000\129\000\000\000\016\000\000\000\000\000\000\000\128\000\000\b\000@\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\016\004\004\000\002\012\016\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\128\000\001\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\128\000\000\000\000\000\000\000\000\000\002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\016\004\b\000L\018-\000\016\026\000\000\017@\196\148\187\131\232>\022\028\015\249`w\139~p\248\000\b\128>\000\192@@>\002\001\000\007\194\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000@@\000 \
       \193\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\b\000\000\016\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000@@\000 \
       \193\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\b\000\000\016\000\004\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\004\000\000\128\000\001\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\t!\192\001\016\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016 \
       \004\000\000\b\016@\000\001\000\000\000\000\000\001\002\000@\000\000\129\000\000\000\016\000\000\000\000\bH\002(\000\130\t!\192\001\016\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\000@\004\000\000\000@\000\000\000\000\000\000\000\001\000\000\000@\000@\004\000\000\000\000\000\000\000\000\016\000\000\000\000\004\000@\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\128\001\016\007`\000 \
       \000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012H\002(\000\131\001!\192\001\016\006`\000 \
       \000\132\128\"\128\b \
       \018\024\000\017\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\004\000\000\000\000\004\000\000\000\000\000\000\000\0000\000@\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000@\000\132\128\"\128\b \
       \018\024\000\017\000f\000\002\000HH\002(\000\130\001!\000\001\016\006`\000 \
       \004\003\000\000\000\000\000\000\004\000\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\016\000\004\000\bH\002(\000\130\001!\128\001\016\006`\000 \
       \004\132\128\"\128\b \
       \018\016\000\017\000f\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000@\000\132\128\"\128\b \
       \018\024\000\017\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000}\246D\b/\227P\000L\028\030\227\139\002\131B~\018-X\170\2233=\001@\254\000\000x\224\003!\000@\128\004\193\"\208\001\001\160\000\001\004\001\000\000 \
       \000\000\000\000@\000\000\000\000\004\129\016#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000}\246D\b/\227P\000L\028\030\227\139\002\131B~\018-X\170\2233=\001@\254\000\000x\224\001\002\000@@\000\129\004\000\000\016\000\000\000\000\000\016 \
       \004\000\000\b\016@\000\001\000\000\000\000\000\001\002\000@\000\000\129\000\000\000\016\000\000\000\000\bH\002(\000\130\t!\192\001\016\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\012\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\192\004\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\016\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\132\128\"\128\b\"\018\028\012\017\000v\001\002\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\018(\000\130\001!\128\001\016\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\128\001\016\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130!!\192\193\016\007`\016 \
       \000\001 \
       \000\000@\000\128\006\000\000\000\128\000\000\000\000\018\000\000\000\000\b\000`\000\000\b\000\000\000\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\000\bH\002(\000\194\001!\192\001\016\007`\000`\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\128\000\132\128\"\128\b \
       \018\028\000\017\000f\016\002\016\000\016\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\bH\002(\000\130\001!\192\001\016\006`\000 \
       \000\132\128\"\128\b \
       \018\024\000\017\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\028\000\017\000f\000\002\000\bH\002(\000\130\001!\128\001\016\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000x\002/\001\130\012} \
       \001\016\006\000\000 \000\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000\000\016\000\000\004\000\000\000@\000\000\000\000\000\000\128\001\000\000\000@\000\000\004\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000@\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\b!\128\001\000\006a\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000@\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\b!\128\001\000\006a\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\000@\004\000\000\000@\000\000\000\000\000\000\000\001\000\000\000@\000@\004\000\000\000\000\000\000\000\000\016\000\000\000\000\004\000@\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\bH\002(\000\130\000!\128\001\000\007`\001 \
       \000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012H\002(\000\131\000!\192\001\000\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000@\000\000\000\000@\000\000\000\000\000\000\000\003\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\001@\000\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \130\024\000\016\000f\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012H\002(\000\131\000!\192\001\000\006`\000 \
       \004\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000@0\000\000\000\000\000\000@\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\001\000@@\000 \
       \193\000\000\000\016\000\000\000\000\012H\002(\000\131\000!\192\001\000\006`\000 \
       \004\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\001\000\000@\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\000!\128\001\000\006a\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\004\004\000\002\012\016\000\000\001\000\000\000\000\000\196\128\"\128\b0\002\028\000\016\000f\000\002\000\bH\002(\000\130\000!\128\001\000\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\004\004\004\002\012\016@\000\001\000\000\000\000\000\001\000@@\000 \
       \193\004\000\000\016\000\000\000\000\000\016\004\004\000\002\012\016\000\000\001\000\000\000\000\000\196\128\"\128\b0\002\028\000\016\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \
       \000\000@\000\128\006\000\000\000\128\000\000\000\000\018\000\000\000\000\b\000`\000\000\b\000\000\000\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\000\bH\002(\000\194\000!\192\001\000\006`\000`\000\b\128\000\000@\000@\006\000\000\000\000\000\000\000\000\128\000\000\004\000\004\000`\000\000\000\000\000\000\000\b\000\000\000\000\000@\006\000\000\000\000\000\000\000\000\128\000\000\000\000\004\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000 \
       \000\000\000\000\000\000\000\002\000\000$\128\004\000\000\000\128\000\000\000\000\b\000\000\000 \
       \000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\016\000\004\000 \
       \005\016 \
       \000\000\000\000\000\000\000\132\000\000\128\000\002\130\020\004\000\000\002\001\000\000\b@\000\b\000\000(!\000@\000\000 \
       \016\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\128\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\b\000\000 \
       !\000@\000\000 \
       \016\000\000\b\000\000\000\000@@\004\000\000\000\000\000\000\000\000\128\000\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\b@\000\b\000\000 \
       !\192@\000\000 \
       \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\128\000\004\000@\000\000\000\000\000\000\000\b\000\000\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\132\000\000\128\000\002\002\024\004\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000@\002\000Q\006\000\000\000\000\000\000\000\000\016\000\004\000 \
       \005\016 \
       \000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000@\000\000\000\000\000\000\128\001\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\016\000\000\000\016\000\004\000 \
       \005\016 \
       \000\000\000\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\004\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000 \
       \000\000\000\000@\000\000\000\000\004\000\000\000\000\002\000\000\000\000\004\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002\168\000\130!!\192A\016\007`\016 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\016\000\000\000\016\000\004\000 \
       \005\016 \
       \000\000\000\000\000\000\000\132\128*\128\b\"\018\028\004\017\000v\001\002\000H@\000\b\000\000 \
       !\192@\000\000 \
       \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\`\000\016\000\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\001\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\b@\000\b\000\000 \
       !\192\192\000\000 \
       \016\000\000\132\000\000\128\000\002\002\024\004\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\b\000\000 \
       !\128@\000\000 \
       \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\128\000\002\002\016\004\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\028\000\017\000f\000\002\000HH\002(\000\130\001!\000\001\016\006`\000 \
       \004\b\000\000\000\000\000@\006\000\000\000\000\000\000\000\000\128\000\000\000\000\004\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000@\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\016\000\004\000 \
       \005\016 \000\000\000\000\000\000\000\132\128\"\128\b \
       \018\028\000\017\000f\000\002\000HH\002(\000\130\001!\000\001\016\006`\000 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000@\006\000\000\000\000\000\000\000\000\128\000\000\000\000\004\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000@\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\0000\000\007\001 \
       \r\\ \
       \000\016\000\000\000\000\000\133\128\170\128\b0B\028\000\017\000v\000\006\000@0\000\006\000\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\0000\000\007\001 \
       \r\\ \
       \000\016\000\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\020\000\000\000 \
       \000\000\000\000@\000\000\000\000\004\001\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\0000\000\007\001 \
       \r\\ \
       \000\016\000\000\000\000\000\003\000\000`\000\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\003\000\000p\018\000\213\194\000\001\000\000\000\000\000\bX\n\
       \168\000\131\004!\192\001\016\007`\000 \
       \004\133\128\170\128\b0B\028\000\017\000v\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128*\128\b \
       \002\028\000\016\000v\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\000!\128\001\000\006`\000 \
       \004\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000@\128\000\000\000\000\004\000`\000\000\000\000\000\000\000\b\000\000\000\000\000@\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\003\000\000p\018\000\213\194\000\001\000\000\000\000\000\bH\002(\000\130\000!\128\001\000\006`\000 \
       \004\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \002\024\000\016\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000@ \
       \000\002H\000L\000@\b\000\000\000\000\000\128\002\000\000$\128\004\192\000\000\128\000\000\000\000\b\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\024\000\017\000v\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\024\000\017\000f\001\002\000HH\002(\000\130\001!\000\001\016\006`\000 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000@ \
       \000\002H\000L\000@\b\000\000\000\000\000\128\002\000\000$\128\004\192\000\000\128\000\000\000\000\b\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\0002\000\007\129\000\012\\(\000\016\b\002\000\001\000\003\000\002p\016\000\197\194\000\001\000\000\000\000\020\000\000\000\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bZ\002(\000\130\t!\160\001\016\014`\016 \
       \004\132\128\"\128\012 \
       \018\028\000\017\000f\001\006\016HH\002(\000\130\001!\192\001\016\006`\016!\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\128\001\016\006`\016!\004\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\000!\128\001\000\006`\016 \
       \004\132\128\"\128\b \
       \002\016\000\016\000f\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\028\000\017\000v\001\002\000@\018\000\000\128\000\b\000(\000\000\b\002\000\001\000\001 \
       \000\000\000\000\128\002\128\000\000\128 \
       \000\016\000\000\000\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\012 \
       \018\028\000\017\000f\001\006\016HH\002(\000\130\001!\192\001\016\006`\016!\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000@\000\000\000\000\000\000\000\b\128\000\000@\000@\006\000\000\000\000\000\000\000\000\128\000\000\000\000\004\000`\000\000\000\000\000\000\000\b\000\000\000\000\000@\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\0002\144\005\t\000L\018+\000\016\025\000\000P@\001\000\000@\002\000\209\002\000\000\004\000\000\000\000\b@\000\b\000\000(!@\192\000\000 \
       \016\000\000\132\000\000\128\000\002\130\016\012\000\000\002\001\000\000\b@\000\b\000\000 \
       !\000\192\000\000 \
       \016\000\000\b\000\000\000\000@@\004\000\000\000\000\000\000\b\000\000\000\000\000\004\004\000@\000\000\000\000\000\000\000\000\000\000\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000$\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\128\000\002\002\024\012\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\132\000\000\128\000\002\002\028\012\000\000\002\001\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000$\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\b\000\000@\004\000\000\000\000\000\000\b\000\000\000\000\128\000\004\000@\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\0002\144\005\t\000L\018+\000\016\025\000\000P@\003\128\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\016\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\b\000\000 \
       !\128\192\000\000 \
       \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\0002\144\005\t\000L\018+\000\016\025\000\000P@\003\128\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\016\000\000\000\0026\016\004X(\223\018=\000@\248\000\000\024\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0026\016\004X(\223\018}\000@\248\000\000\024\224#a\000E\130\141\241#\208\004\015\128\000\001\142\b@\000\b\000\000 \
       !\128\192\000\000 \
       \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\004\000 \
       \r\016`\000\000@\000\000\000\128\001\000\000@\002\000\209\006\000\000\004\000\000\000\000\000\016\000\004\000 \
       \r\016 \
       \000\000@\000\000\000\000\001\000\000@\002\000\209\002\000\000\004\000\000\000\000\0002\016D\012\128L\018m\000\016\024\000\000\016@}\246D\b/\227P\000L\028\030\227\139\002\131@2\016D\b\000L\018m\000\016\024\000\000\016@\003!\004@\128\004\193\"\208\001\001\128\000\001\004\0002\016\004\b\000L\018-\000\016\024\000\000\016@\000\000\000\000\000\000\000\b\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\004\000\000\000\000\000\000\b\000\016\000\000\000\000\000\000@\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\001\000\000\000\001\000\000@\002\000\209\002\000\000\004\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000@\000\000\016\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\144\005\t\000L\018k\000\016\024\000\000\016@\003)\000P\144\004\193\"\176\001\001\128\000\001\004\0002\144\005\t\001L\018+\000\016\024\000\000\016@\001\000\000@\002\000\209\002\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\004\001\000\000@\002\000\209\002\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\133\169*\212\026\162\211?\188\017\001\230\001\007\141HZ\146\173A\170-3\251\193\016\030`\016x\212\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002\168\000\130!!\192\193\016\006`\016`\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128*\128\b\"\018\028\012\017\000f\001\006\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002\168\000\130!!\192\193\016\006`\016`\020\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\001\000\000\000\001\000\000@\002\000\209\002\000\000\004\000\000\000\000\bH\002\168\000\130!!\192\193\016\006`\016`\020\003!\004@\128\004\193\"\208\001\001\128\000\001\004\0002\016\004\b\000L\018-\000\016\024\000\000\016@\000\000\000\000\000\000\000\b\000\b\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\000\000\000\000\004\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001 \
       \r\\ \
       \000\016\000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\b\000\000 \
       !\192\192\000\000 \
       \016\000\016\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\128\000\002\002\024\012\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000@\002\000\209\002\000\000\004\000\000\000\000\b@\000\b\000\000 \
       !\192\192\000\000 \
       \016\000\016\132\000\000\128\000\002\002\024\012\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000p\016\000\197\198\000\001\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\132\000\000\128\000\002\002\024\012\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\b\000\000 \
       !\128\192\000\000 \
       \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\128\000\002\002\016\012\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\028\000\017\000f\000\002\000@0\000\007\001 \r\\ \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\016\000\004\000 \
       \r\016 \000\000@\000\000\000\000\132\128\"\128\b \
       \018\028\000\017\000f\000\002\000@2\144\005\t\000L\018+\000\016\025\000\000P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\128\001\016\006`\000 \
       \004\132\128\"\128\b \
       \018\016\000\017\000f\000\002\000@\128\000\000\000\000\004\000`\000\000\000\000\000\000\000\b\000\000\000\000\000@\002\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\0002\144\005\t\000L\018+\000\016\025\000\000P@\132\128\"\128\b \
       \018\024\000\017\000f\000\002\000HH\002(\000\130\001!\000\001\016\006`\000 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\000\001\000\006`\000 \
       \000\003!\004@\192\004\193&\208\001\001\128\000\001\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\000\001\016\006`\000 \
       \004\132\128\"\128\b \
       \018\024\000\017\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\016\000\017\000f\000\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\128\001\000\006`\000 \
       \000\132\128\"\128\b \
       \018\016\000\016\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\000\001\144\006`\000 \
       \004\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\024\000\016\000f\000\002\000\bH\002(\000\130\001!\000\001\000\006`\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012H\002\168\000\131\t!\192\001\016\007`\002 \
       \004\192\000\b\000\000\016\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000@\000\000\000\000\004\193\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\b\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\128\000\002\002\016\012\000\000\002\001\000\000\b\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b2\016\004\b\000L\018-\000\016\026\000\000\017@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012IK\184>\131\225a\192\255\150\007x\183\231\015\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\001 \
       \000\b\000\000\128\002\000\000\000\128\000\000\016\000\018\000\000\000\000\b\000 \
       \000\000\b\000\000\001\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\000\bH\002(\000\194\001!\192\001\016\007`\000a\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\000\bH\002(\000\130\001!\192\001\016\006`\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\128\001\016\006`\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\194\001!\192\001\016\007`\000a\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\000\bH\002(\000\130\001!\192\001\016\006`\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\004\000\000\000\000\000\000\000\000\000\132\128\"\130\b \
       \018\024\000\017\000v\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\024\000\017\000f\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\128\000\b\000 \
       \000\000\b\000\000\001\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\016\bH\002(\000\130\001!\128\001\016\006`\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\002\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000 \
       \000\000\000\000\0000\000\006\000\000\012\\`\000\018\000\002\000\000\000\003\000\000`\000\000\197\194\000\001 \
       \000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\001\000\000\000\004\000\000\000\018\000\000\000\000\000\003\000\000`\000\000\197\194\000\001 \
       \000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000@\000\000\016\000\000\000\000\004\000\000\000\016\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\b\000\000\000\000\004\000\000\000\000\000@\000\000\000\000\128\000\000\000\000@\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0000\000\007\001\000\012\\ \
       \000\016\000\000\000\000\000\000\000\b\000\000\000\000\004\000\000\000\000\000@\000\000\000\000\000\000\004\004\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bH\002(\000\130\001!\192\001\016\006`\016 \
       \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003 \
       \000x\016\000\197\194\128\001\000\128 \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \002\024\000\016\000f\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\128\000\b\000 \
       \000\000\b\000\000\001\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\016\bH\002(\000\130\000!\128\001\000\006`\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000@\000\000\000\000\000\000\000\000\bH\002( \
       \130\000!\128\001\000\007`\017 \004\003 \
       \000x\016\000\197\194\128\001\000\128 \
       \000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \002\024\000\016\000f\001\002\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\018\000\000\128\000\b\000 \
       \000\000\b\000\000\001\000\001 \
       \000\000\000\000\128\002\000\000\000\128\000\000\016\bH\002(\000\130\000!\128\001\000\006`\000!\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\b\000\000\016\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\128\"\128\b \
       \018\024\000\017\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000#a\000E\130\141\241#\208\004\015\128\000\001\142\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128 \
       \128\b \
       \002\016\000\016\000d\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001 \
       \000\000\000\000\192\002\000\000\000\128\000\000\000\b\000\b\128~\002\194@\000>\"\001\004\001\130\139\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\016\000\000\000\016\000\000\000\000\012\000\000\000\000\000\000\000\000\000\128\000\128\007\224,$\000\003\226 \

       \000\000\000\000\128\002\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000p\016\000\197\194\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#a
       \197\138\173\2433\208\021\015\228\000\003\142\000\016\000\000\000\000\004\000\000\000\000\000\000\000\000\000\005\161 \
       \128\b \
       \210\016\016\017\000\228\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128 \
       \128\b \
       \018\016\000\017\000d\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\002\b\000\130\001!\000\001\000\006\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000'\225 \
       \197\138\173\2433\208\021\015\228\000\003\142\002~\018\012X\170\2233=\001P\254@\0008\224\004\128 \
       \128\b \
       \018\016\000\017\000d\000\002\000\000H\002\b\000\130\001!\000\001\016\006@\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\128 \
       \128\b \
       \018\024\000\017\000d\000\002\000\000H\002\b\000\130\001!\000\001\016\006@\000 \
       \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\002\b\000\130\001!\128\001\016\006@\000 \
       \000\004\128 \128\b \
       \018\016\000\017\000d\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"
    )

  and start = 13

  and action =
    ( ( 16,
        "C\170R\004Ff\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021HFf\000\000\000\000\020XFfC\170\020\182\000-\000[]\188\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\238\001\208\001d\000\000\002t\001\188\000\000\003\214\003$\007\140\000\000\005\244\003`\b\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\220\000\000\000\000\000\000\002\198l*\000\000\000\000\000\000\006&\000\000\000\000R\232\003P\003\178\000\000\000\000V&\006&\000\000J\014\020X\021\178^T\020Xh:R\004\020XN`\000\000\005\144\000\000Dp\006\136\000\000C\146\000\000\027\158\000\000\000\000\003\224\000\000\006&\000\000\000\000\000\000\006\242\000\000C\146\000\000\007\030|4`\020f\150\000\000\1340\136\022\000\000Mra\190\000\000Zr\026\206l*FfC\170\000\000\000\000R\004\020XTBDp\007\206x\"\000\000\130\142FfC\170R\004\020X\000\000\000\000\016xQ\254\020XG\030Y\222\000\000\001\026\000\000\000\000\004^\000\000\000\000I\182\001\026\024\138\005\200\tR\000\000\000\000\002\026\000\000\021\178\004\228\005\162\020X\028\254\020XC\170C\170\000\000\000\000\000\000R\012Q\182\020X\028\254A\248\020X\000\000\023\022\bZ\b\004\000\000\000\220\b\022\000\000\000\000\000\000\000\000\000\000\020X\000\000\000\000\000\000R\004\020X\000\000A\206x\168C\170\000\248\000\000Y\222{\230|\206\000\000\b\004\000\000\005J\000\000\000\000C,V&\136b\000\000jb\136b\000\000jbjb\000b\004\220\0008\000\000\020\190\000\000\006h\000\000\000\000\t\014\000\000\000\000\000\000jb\006&\000\000\000\000X\244V&V\154a\190\000\000\000\000OL\000b\000\000\000\000a\190\006\170V&\000\000PBa\190Q8\000\000\000\000\000\000\005\020\000\000jb\000\000\001\000m\"\000\000V&\005\216V&\000\000\022\\\b&\006&\000\000\000\000\023\224\000\000\006\208\000\000[\150\006\230\000\000\b\236jb\t\206\000\000\t\246\000\000\t\184\000\000\000\000\006\168\000\000\000\000\000\000\021  \
         4Y\222Q\240\020XY\222\000\000\000b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000N\\\027v\000\000\000\000\000\000\001\244&\174u\242\000\000\000\000Q\240\020XY\222\000\000\000\000\138(Y\222\138p|\206\000\000\138\202\000\000Y\222\000\000\000\000Z\202I\182\001\154\001\154\000\000\n\
         \146Y\222\000\000\000\000\000\000\004\250\011l\000\000A\012\000\000\000\000}\022\000\000\139\012jb\000\000\004R\000\000\000\000}\162\000\000\139f\n\
         \242\000\000\000\000\000\000\000\000\011\202\000\000\022\168\000\000\000\000}\162\000\000\005\220\000\000\000\000DHv~\000\000\000\000Bn\023|\019\252\023\174\000\000\000\000\000\000\000\000\002>\000\000\000\000\\`\n\
         \184\012n\000\017V&\000\226\012\242\000\000\000\000\011\230\012n\004p\000\000R\004R\144Q\182\020X\028\254\000-\000\018\011\154\000\000\012\130\021\178\021\178\000-\000\018\000\018\021\178\000\000k`\n\
         XDp\b\004\bT\139\156\000\000V&g6V&`\244g\214V&\005hV&hp\000\000\012\250\tD\011\020\021\178l\000\000\000\005\018\tV^v\000\000\000\000\000\000\000\000\021\178lX\021\178l\248\020d\0008a\148\b\022\0008a\236\000\000mP\n\
         X\000\000\000\000\000\000\002\152\000\000\000\000\006x\000\000\006z\028\254\000\000_4A\248\000\000\031\138\000\000\000\000\021\178\003\144\000\000\000\000\000\000\000\000]\024\000\000\001\248\000\000Wf\b(\0032\000\000\0226R\144R\004\020XH<R\004\020X\016x\016x\000\000\000\000\000\000\000\000\001\240\024&B\188\000\000S\172T`Up\020X\028\254\007h\021\178\000\000\007p\000\000U\020U\200}\234G\n\
         V&\005\180\000\000R\004\020X\000\000Q\240\020X{\230Y\222N6\000\000R\004\020Xy*\001\b\000\000Y\222DHV&\002\210\004p\0142\000\000\000\000\000\000J\162\001\154\014hr\028\000\000Q\240\020XY\222\025R\000\000R\004\020X\016x\0226\016x\002\232\023\240\000\000\000\000\016x\012\222\014B\000*\137\170\000\000\028\018\139\246\000\000\026\"V&\029\220\015\006\000\000\000\000\014\222\000\000\016x\003\224\015\"\000\000'\166\000\000\b\n\
         \000\000\000\000\026\022\000\000\017p\023.\000\000\000\000\000\000\000\000\t\136\000\000\000\000\027\014\000\000\028\006\000\000\028\254\000\000\018h\024&\000\000\000\000\000\000Ff\000\000\000\000\000\000\000\000\029\246\000\000\030\238\000\000\031\230\000\000 \
         \222\000\000!\214\000\000\"\206\000\000#\198\000\000$\190\000\000%\182\000\000&\174\000\000'\166\000\000(\158\000\000)\150\000\000*\142\000\000+\134\000\000,~\000\000-v\000\000.n\000\000/f\000\0000^\020XY\222GPK\142\001\154\015\188n\004Y\222\000\000\000\000\000\000\0152\000\000\000\000\000\000\000\000n\004\000\000\000\000l*\001\154\015bV&\006p\000\000\000\000\b\188\006&\000\000V&\007X\000\000\000\000\015\148\000\000\000\000\000\000G\"V&\t\154\000\000\000\000\030*\000\000\000\000~v\000\000\031\"~\190\000\000 \
         \026\127J\000\000!\018\012\226\000\000\000\000\000\000\000\000\"\n\
         Y\222#\002\000\000rjrj\000\000\000\000\000\0001V\000\000\t\188\000\000\000\000\000\000\007:\000\000\000\000\000\220\023\248\000\000\n\
         \156\000\000\000\000_\214H<\000\000\000\000\n\
         \202\000\000\000\000\000\000\012\018\000\000\000\000\000\000\016x\004\216\024\232\000\000\011\172\000\000\005\208\000\0002N\000\000\n\
         \224\000\000\006\200\000\0003F\000\000\012\140\000\000\007\192\000\0004>(\158\000\000\012\164\b\184\000\00056\000\000\r\152\t\176\000\0006.\000\000\r\172\n\
         \168\000\0007&\004\188\025\016\000\000\014\148\011\160\000\0008\030\000\000\r\156\012\152\000\0009\022\000\000\014\002\r\144\000\000:\014\014\136\000\000;\006\015\128\019`\000\000\000\000\000\000\014\170\000\000\000\000\r\178\000\000\000\000\014\250\000\000\tB\000\000\000\000\000\000\015\224\000\000\015\232\000\000\000\000Lz\001\154\016\184r\028a\190\000b\000\000\000\000r\028\000\000\000\000\000\000r\028\000\000\016\148\000\000\000\000\000\000\000\000\000\000\000\000;\254Y\222\000\000\000\000\017\004\000\000<\246\000\000=\238\000\000#\250\000\000\000\000\006~\000\000\000\000Y\222\000\000\000\000y\164\0150\000\000\000\000H\240\000\000\007\248\000\000\000\000X*\000\000\014\192\000\000\000\000\004H\011\254\000\000\000\000\0226\022\028\b\004\000\000A\214\000\000!,\023\176\021\220\000\000\000\000\015\134\000\000\000\000\001\238\025\030X\192\000\000\025\030\000\000\011\238\000\000\000\000\015\156\000\000\000\000i\018\t\002\004H\000\000\000\000\r\148\000\000\000\000\015\140\000\000\000\000\000\000\020X\028\254\003\184\000\000\000\000\023&\005\200\tR\004\128\028\254z2\021\178\020X\028\254z\138\016\138\000\000\000\000\004\128\000\000I\248\019\248\021\204\000\000\n\
         \"\017\020\000\000\017\022\000Va\190\000\244\000\000\017\002\016\140l*\n\
         |V&\030\128\020F\015|\003\b\000\000\031x\017H\000\000\000\244\000\000\000\000\017\\a\190b\140\000\000idg$\011\164a\190\017,a\190n\156c,\0176a\190o\026c\204\001\024\016\250\000\000\000\000\000\000\020X\130\216\000\000Y\222rj\000\000\000\000\017r\000\000\000\000\000\000>\230\000\000\012\180\000\000\000\000\000\000Up\020X\028\254\003\202\000\000F\138\000\000\bh\000\000\000*\000\000\000\000\017\128\000\000\017\184{\230?\222j\016\000\000\000\000IZ\000\000\t`\000\000N\150\000\000\020X\000\000\021\178\n\
         X\000\000\130\142\000\000\020X\028\254\130\142\000\000\025D\023\022\bZ\006&\132\202\021\178\127\144rj\000\000\005\200\tR\tR\004\128rj\134\164\005\200\tR\004\128rj\134\164\000\000\000\000\004\128rj\000\000FfC\170Y\222\027B\000\000\000\000FfC\170Q\182\020X\028\254\130\142\000\000\020\182\000-\000[\016\228l*\012$V&s\004\017\012\017\186\133H\000\000rj\000\000s\128I\248\019\248\021\204{\b\023\228\r(\128\012\012\216\017\n\
         \020Xrj\000\000\020Xrj\000\000jbh:\019\134\004\206\005\200\0008P\012\000\000\005\200\0008P\012\000\000\0274\023\022\bZ\006&Q\002\021\178\130b\000\000\005\200\n\
         J\0212\011\164\000\000P\012\000\000\tR\0170\021\178\131\030\136\216\005\200\tR\0176\021\178\131\030\136\216\000\000\000\000\b`\000\000\135\158\000\000\021\178\133\160P\012\000\000\b`\000\000J\014\020X\021\178\130b\000\000I\248\019\248\021\204s\252B\138\026\222\019\170\002\142\000\000\r\216C\146\000\017\000\000\017\180\017b\024\196\020XV\206V&\t\154\000\000Y\172\n\
         \254\003\220\r\230\000\000\012\148\000\000\017\184\017BV&PJ\000\000\0032\002\228\012\002\000\000\014\210\000\000\017\198\017Zl*PJ\000\000\020X\024\196\017\242\011\028\005\200\000\000\015Z\024\196V&\r\200\000b\000\000V&\007\242\b4\000\000\000\000ot\000\000\000\000\015\184\024\196o\242PJ\000\000\020XV&\014\210V&MzPJ\000\000\014\214\000\000\000\000PJ\000\000\000\000Y\172\000\000rj\134\178\019\170\002\142\r\216\017\222\017\166\024\196rj\134\178\000\000\000\000\019\170\002\142\r\216\017\252\017\146O\030Mha\190\018\024O\030jb\020\184\018\026O\030a\190\018\030O\030p\146q\018\000\000\131\156\000\000\000\000rj\136\230\019\170\002\142\r\216\018\024\017\170O\030rj\136\230\000\000\000\000\000\000h:\000\000\000\000\000\000\000\000\000\000\000\000\000\000P\012\000\000\135D\020XDp\018(x\"\000\000\130\142\135D\000\000\000\000\1372\020XDp\0180\017\198`\020\137\170\000\244\018r\000\000\000\000q\144s\252\020X\000\000\128d\021\204\000\000\000\000\130\142\1372\000\000\000\000\000\000{`D\228F\134\000\244\018\132\000\000\000\000\000\000s\252\020X\000\000\000\244\018\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\028B\138\019\170\002\142\r\216\018Xtl\023\204\020XG\030\\.\020(\003\b\000\244\018d\003\172\000\000\000\000\018\022\000\000\000\000b\186\000\000\t\172\015|\000\000\014\240\000\000\018n\017\254V&Xr\018x\n\
         \152\000\000\000\000\0184\000\000\000\000\020F\0032\015\184\000\000\018\160t\238\140B\001\154\018BV&\015\202\000\000\000\000\018X\000\000\000\000\000\000b\186\000\000\0068\015\202\000\000\016\"\000\000\018\174\0188l*\000\000\018\178up\140t\001\154\018ZV&\016\016\000\000\000\000\018v\000\000\000\000\000\000\020X\000\000b\186\000\000\020z\020X\023\204\023\204v\198Ff\020X\130\216Y\222\021\162\000\000\012\020\005\200\000\000\015\212\023\204V&\014`\b\004\000\000\020XY\222tl\023\204\015\228\023\204\000\000D\142Et\000\000d&\000\000\000\000d\194\000\000\000\000e^\000\000\015\252\023\204e\250\130\216Y\222\021\162\000\000\000\"\000\000\000\000O\030\016\162\000\000\000\000Wf\018\208\000\000b\186\000\000\023\204Wfb\186\000\000\020XV&b\186\000\000\016\232\000\000\000\000b\186\000\000\000\000\\.\000\000\131\244O\030\018\130\023\204\132rtl\000\000rj\135R\019\170\002\142\r\216\018\242tlrj\135R\000\000\000\000\000\000\137\242Q\240\000\000\000\000\000\000\000\000\000\000\000\000\133\218rj\000\000\135D\000\000\000\000\000\000\000\000rj\137\242\000\000\019*\000\000\000\000\133\218\0198\000\000rj\137\242\000\000\000\000\017\018\000\000\000\000k\b\004\136\000\000\000\000B\158\000\000V&\016\016\000\000\\.\017\024\000\000\000\000\019d{\230\000\000@\214\019<\000\000\000\000\0190\026R\028B\021\204wN\023\228\020X\000\000rj\000\000\000\000\000\000\000\000\000\000\000\000\000\000wb\023\228\020X\000\000\015\196x\"\000\000\130\142\000\000\0196\026R\028Brj\000\000\019P\000\000\006\190\016\212\020X\140\146\000\000\000\000\028\190\140\234\000\000\000\000\018\222\000\000\0194V&\000\000\017 \
         \011\174\000b\000\000\000\000V&\r@\014\020\000\000V&\0148\000\244\019j\000\000\000\000\128\254\000\000\000\000`\020\000\000\130\142\000\000\019n\026R\029:P\012\000\000\000\000\000\000\000\000\016\206\129\152`\020\000\000\130\142\000\000\019r\026R\029:P\012\000\000\017$\000\000\000\000\012H\000\000rj\000\000\019\146\000\000\000\000\018\248\000\000\019\b\000\000\019\024\000\000\000\000R\214\019(\000\000\000\000%\182]\188\019\210\000\000\000\000\000\000\tl\r$`\\\019\240\000\000\000\000\000\000\000\000\000\000\000\000\019h\000\000\023\228\000\000\019\146\000\000V&\000\000\012\232\000\000\000\000\019\190\000\000\000\000\0008\000\000\004\202\000\000\000\000\000\000\r(\000\000\tD\000\000\019\218\000\000Y\222\022\168\000\000\000\000\014\028\019\224\000\000\000\000\019\214\015\020H<\006&\130\022\000\000\000\000\000\000\000\000\000\000[b\000\000\000\000\020\198\000\000n\004\000\000\016\252\020\200\000\000\020\214\000\000H\240H\240]R]R\000\000\000\000rj]R\000\000\000\000\000\000rj]R\020h\000\000\020n\000\000"
      ),
      ( 16,
        "\tA\tA\000\006\001\002\001\190\tA\002\186\002\190\tA\002\234\002\138\tA\003\145\tA\019j\002\246\tA\024^\tA\tA\tA\016\226\tA\tA\tA\001\210\004Q\004Q\004F\002\250\tA\003r\003v\n\
         z\tA\001\206\tA\024b\002\254\000\238\003\150\016\230\tA\tA\003\202\003\206\tA\003\210\003\222\003\234\003\242\007\030\007Z\tA\tA\002\178\001\206\007:\003\230\tA\tA\tA\bz\b~\b\138\b\158\001*\005v\tA\tA\tA\tA\tA\tA\tA\tA\tA\t\018\000\238\tA\015\214\tA\tA\003\145\t\030\t6\t\130\005\130\005\134\tA\tA\tA\r\250\tA\tA\tA\tA\002r\002\162\014*\tA\006\250\tA\tA\003-\tA\tA\tA\tA\tA\tA\005\138\b\146\tA\tA\tA\b\170\004r\t\150\003-\tA\tA\tA\tA\r\025\r\025\024f\t\202\004\154\r\025\t\214\r\025\r\025\003\149\r\025\r\025\r\025\r\025\tF\r\025\r\025\006\157\r\025\r\025\r\025\003\137\r\025\r\025\r\025\r\025\004Q\r\025\0166\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\006\157\r\025\015\222\r\025\004\226\r\025\r\025\r\025\r\025\r\025\005\229\r\025\r\025\000\238\r\025\003\238\r\025\r\025\r\025\tJ\tf\r\025\r\025\r\025\r\025\r\025\r\025\r\025\000\238\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\000\238\r\025\r\025\003\149\r\025\r\025\012b\003\022\003\170\004Q\r\025\r\025\r\025\r\025\r\025\004Q\r\025\r\025\r\025\r\025\r\025\006i\r\025\r\025\006\005\r\025\r\025\003\026\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\r\025\006i\004Q\r\025\r\025\r\025\r\025\001\181\001\181\001\181\001f\003i\001\181\006\018\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001v\001\181\001j\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\006\226\001\181\003J\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\b>\001\181\001\181\001\181\006\005\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\000\238\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\bv\001\181\001\181\019Z\b\030\007f\001r\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\015\006\b\194\001\181\005\186\001\181\001\181\b\"\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\181\001\182\001\181\001\181\001\181\001\181\001\181\n\
         \129\n\
         \129\019\198\007\226\r=\n\
         \129\003N\n\
         \129\n\
         \129\004\r\n\
         \129\n\
         \129\n\
         \129\n\
         \129\001\186\n\
         \129\n\
         \129\r=\n\
         \129\n\
         \129\n\
         \129\000\238\n\
         \129\n\
         \129\n\
         \129\n\
         \129\019\206\n\
         \129\006\230\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\007\001\n\
         \129\004Q\n\
         \129\004Q\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\b5\n\
         \129\n\
         \129\000\238\n\
         \129\001\130\n\
         \129\n\
         \129\n\
         \129\007\001\004Q\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\004Q\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\000\238\n\
         \129\n\
         \129\004\r\n\
         \129\n\
         \129\001\146\bZ\007f\004Q\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\001\198\n\
         \129\n\
         \129\n\
         \129\n\
         \129\t\174\000\238\n\
         \014\n\
         \129\001\234\n\
         \129\n\
         \129\b^\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\007\001\n\
         \129\n\
         \129\n\
         \129\n\
         \129\n\
         \129\003\177\003\177\019\154\007\226\b\134\003\177\002V\003\177\003\177\016\202\003\177\003\177\003\177\003\177\001f\003\177\003\177\003i\003\177\003\177\003\177\000\238\003\177\003\177\003\177\003\177\002Z\003\177\b>\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\b>\003\177\019\162\003\177\000\238\003\177\003\177\003\177\003\177\003\177\005\237\003\177\003\177\000\238\003\177\t\029\003\177\003\177\003\177\015n\006^\003\177\003\177\003\177\003\177\003\177\003\177\003\177\022\150\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\006b\t\166\n\
         \006\t\202\003\177\003\177\t\214\025\158\007f\001\238\003\177\003\177\003\177\003\177\003\177\007\025\003\177\003\177\003\177\003\177\t\174\016\206\n\
         \014\003\177\b\130\003\177\003\177\025\162\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\003\177\000\238\003\177\003\177\003\177\003\177\003\177\003\161\003\161\002\217\007\226\007:\003\161\003\"\003\161\003\161\t\029\003\161\003\161\003\161\003\161\003V\003\161\003\161\006\169\003\161\003\161\003\161\000\238\003\161\003\161\003\161\003\161\003&\003\161\000\n\
         \003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\006\169\003\161\007\026\003\161\004B\003\161\003\161\003\161\003\161\003\161\015\134\003\161\003\161\004B\003\161\004\210\003\161\003\161\003\161\002\217\004\014\003\161\003\161\003\161\003\161\003\161\003\161\003\161\015\142\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\004B\t\166\n\
         \006\004\018\003\161\003\161\r>\003\"\003\170\028\031\003\161\003\161\003\161\003\161\003\161\004R\003\161\003\161\003\161\003\161\t\174\012\221\n\
         \014\003\161\004^\003\161\003\161\003&\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\003\161\012\221\003\161\003\161\003\161\003\161\003\161\t\233\t\233\004Q\004Q\007\194\t\233\006\166\t\233\t\233\000\238\t\233\t\233\t\233\t\233\003Z\t\233\t\233\004Q\t\233\t\233\t\233\004\214\t\233\t\233\t\233\t\233\004Q\t\233\006\170\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\001f\t\233\007\154\t\233\003i\t\233\t\233\t\233\t\233\t\233\000\238\t\233\t\233\001\218\t\233\012\194\t\233\t\233\t\233\023B\000\238\t\233\t\233\t\233\t\233\t\233\t\233\t\233\000\238\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\014\t\233\t\233\023J\t\233\t\233\004V\002.\007f\004Q\t\233\t\233\t\233\t\233\t\233\001\222\t\233\t\233\t\233\t\233\t\233\012\225\t\233\t\233\b-\t\233\t\233\b*\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\t\233\012\225\004Q\t\233\t\233\t\233\t\233\t\249\t\249\004\242\007\226\b2\t\249\005R\t\249\t\249\007:\t\249\t\249\t\249\t\249\004Q\t\249\t\249\000\238\t\249\t\249\t\249\000\238\t\249\t\249\t\249\t\249\t\t\t\249\004\174\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\005&\t\249\014n\t\249\002n\t\249\t\249\t\249\t\249\t\249\011\138\t\249\t\249\001\206\t\249\012\218\t\249\t\249\t\249\000\238\012V\t\249\t\249\t\249\t\249\t\249\t\249\t\249\000\238\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\004Q\t\249\t\249\012Z\t\249\t\249\014v\002:\007f\t\t\t\249\t\249\t\249\t\249\t\249\002~\t\249\t\249\t\249\t\249\t\249\006q\t\249\t\249\004r\t\249\t\249\b\242\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\t\249\006q\t\t\t\249\t\249\t\249\t\249\t\241\t\241\002r\007\226\b>\t\241\t\005\t\241\t\241\000\238\t\241\t\241\t\241\t\241\001\206\t\241\t\241\000\238\t\241\t\241\t\241\000\238\t\241\t\241\t\241\t\241\001\134\t\241\014\158\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\n\
         \026\t\241\011\166\t\241\002\190\t\241\t\241\t\241\t\241\t\241\b\217\t\241\t\241\003\174\t\241\012\242\t\241\t\241\t\241\002\214\n\
         \030\t\241\t\241\t\241\t\241\t\241\t\241\t\241\b\230\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\005\002\t\241\t\241\b\213\t\241\t\241\003\162\004Q\007f\000\238\t\241\t\241\t\241\t\241\t\241\003\178\t\241\t\241\t\241\t\241\t\241\006y\t\241\t\241\b\130\t\241\t\241\016\218\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\t\241\006y\000\238\t\241\t\241\t\241\t\241\t\221\t\221\004Q\007\226\007:\t\221\b\217\t\221\t\221\015B\t\221\t\221\t\221\t\221\000\238\t\221\t\221\014\162\t\221\t\221\t\221\000\238\t\221\t\221\t\221\t\221\001\150\t\221\011\150\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\025\t\221\b\213\t\221\007v\t\221\t\221\t\221\t\221\t\221\019\002\t\221\t\221\004V\t\221\r\n\
         \t\221\t\221\t\221\015:\007~\t\221\t\221\t\221\t\221\t\221\t\221\t\221\019\014\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\002\014\t\221\t\221\r\194\t\221\t\221\003>\003B\007f\007\198\t\221\t\221\t\221\t\221\t\221\004b\t\221\t\221\t\221\t\221\t\221\017z\t\221\t\221\011\158\t\221\t\221\017\022\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\221\t\025\001\222\t\221\t\221\t\221\t\221\t\229\t\229\022\182\007\226\001\222\t\229\012F\t\229\t\229\019\138\t\229\t\229\t\229\t\229\004B\t\229\t\229\005.\t\229\t\229\t\229\000\238\t\229\t\229\t\229\t\229\005F\t\229\012J\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\0056\t\229\022\190\t\229\r\198\t\229\t\229\t\229\t\229\t\229\005\229\t\229\t\229\000\238\t\229\r\030\t\229\t\229\t\229\n\
         F\005>\t\229\t\229\t\229\t\229\t\229\t\229\t\229\027\182\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\002\150\t\229\t\229\011\202\t\229\t\229\003>\018\182\007f\005J\t\229\t\229\t\229\t\229\t\229\007j\t\229\t\229\t\229\t\229\t\229\018\202\t\229\t\229\011*\t\229\t\229\0172\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\t\229\012n\004\214\t\229\t\229\t\229\t\229\t\225\t\225\007\166\007\226\011\150\t\225\004\214\t\225\t\225\006\030\t\225\t\225\t\225\t\225\012r\t\225\t\225\012\138\t\225\t\225\t\225\000\238\t\225\t\225\t\225\t\225\004\214\t\225\012\210\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\006v\t\225\012\142\t\225\015\198\t\225\t\225\t\225\t\225\t\225\004Q\t\225\t\225\012\214\t\225\r2\t\225\t\225\t\225\006\242\007\n\
         \t\225\t\225\t\225\t\225\t\225\t\225\t\225\004Q\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\015\242\t\225\t\225\b\t\t\225\t\225\022\222\004Q\001\002\001\190\t\225\t\225\t\225\t\225\t\225\004Q\t\225\t\225\t\225\t\225\t\225\t\202\t\225\t\225\t\214\t\225\t\225\000\238\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\t\225\0066\000\238\t\225\t\225\t\225\t\225\t\237\t\237\018\190\003>\003B\t\237\012\186\t\237\t\237\001\206\t\237\t\237\t\237\t\237\001\206\t\237\t\237\007>\t\237\t\237\t\237\007\178\t\237\t\237\t\237\t\237\012\190\t\237\011\150\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\007\218\t\237\015\030\t\237\006\138\t\237\t\237\t\237\t\237\t\237\014\194\t\237\t\237\019\250\t\237\rN\t\237\t\237\t\237\002\162\012\154\t\237\t\237\t\237\t\237\t\237\t\237\t\237\004Q\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\019\202\t\237\t\237\012\158\t\237\t\237\007\018\016\154\007f\026\170\t\237\t\237\t\237\t\237\t\237\011\150\t\237\t\237\t\237\t\237\t\237\b=\t\237\t\237\016>\t\237\t\237\027V\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\t\237\012\234\000\238\t\237\t\237\t\237\t\237\t\253\t\253\019\166\007\226\014\198\t\253\n\
         \026\t\253\t\253\015\"\t\253\t\253\t\253\t\253\016\174\t\253\t\253\012\238\t\253\t\253\t\253\000\238\t\253\t\253\t\253\t\253\r\006\t\253\006\246\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\012\006\t\253\003\174\t\253\017\254\t\253\t\253\t\253\t\253\t\253\005\241\t\253\t\253\023\214\t\253\rb\t\253\t\253\t\253\002\190\007\170\t\253\t\253\t\253\t\253\t\253\t\253\t\253\007\006\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\007\198\t\253\t\253\018B\t\253\t\253\t\194\t\242\001\002\001\190\t\253\t\253\t\253\t\253\t\253\002\150\t\253\t\253\t\253\t\253\t\253\007F\t\253\t\253\000\238\t\253\t\253\b\237\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\t\253\027\186\001\222\t\253\t\253\t\253\t\253\t\245\t\245\015J\016\178\012F\t\245\012\138\t\245\t\245\027\255\t\245\t\245\t\245\t\245\012V\t\245\t\245\012\210\t\245\t\245\t\245\000\238\t\245\t\245\t\245\t\245\r\026\t\245\r^\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\r.\t\245\r\174\t\245\028/\t\245\t\245\t\245\t\245\t\245\007\246\t\245\t\245\020\018\t\245\rv\t\245\t\245\t\245\0062\012\154\t\245\t\245\t\245\t\245\t\245\t\245\t\245\b\237\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\002\190\t\245\t\245\rr\t\245\t\245\015N\019\158\002\245\026\194\t\245\t\245\t\245\t\245\t\245\005\245\t\245\t\245\t\245\t\245\t\245\019b\t\245\t\245\tb\t\245\t\245\b\241\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\t\245\001\002\001\190\t\245\t\245\t\245\t\245\n\
         m\n\
         m\023\238\000\238\tz\n\
         m\012n\n\
         m\n\
         m\020\026\n\
         m\n\
         m\n\
         m\n\
         m\t\198\n\
         m\n\
         m\012\186\n\
         m\n\
         m\n\
         m\000\238\n\
         m\n\
         m\n\
         m\n\
         m\rJ\n\
         m\014\178\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\r\162\n\
         m\020n\n\
         m\019\210\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\026\198\n\
         m\n\
         m\014\182\n\
         m\r\130\n\
         m\n\
         m\n\
         m\022\194\012\234\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\b\241\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\003\174\n\
         m\n\
         m\r\186\n\
         m\n\
         m\t\238\014\138\020\026\b9\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\t\250\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\000\238\n\
         m\n\
         m\005\233\n\
         m\n\
         m\014\142\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\n\
         m\001\002\001\190\n\
         m\n\
         m\n\
         m\n\
         m\003\157\003\157\n\n\
         \014\250\020Z\003\157\015V\003\157\003\157\020r\003\157\003\157\003\157\003\157\015*\003\157\003\157\016\002\003\157\003\157\003\157\003}\003\157\003\157\003\157\003\157\014\254\003\157\015Z\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\015.\003\157\022\186\003\157\001\206\003\157\003\157\003\157\003\157\003\157\rE\003\157\003\157\011B\003\157\011Z\003\157\003\157\003\157\022\254\020\006\003\157\003\157\003\157\003\157\003\157\003\157\003\157\023F\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\b-\t\166\n\
         \006\007\246\003\157\003\157\026:\011\130\023N\rQ\003\157\003\157\003\157\003\157\003\157\025\182\003\157\003\157\003\157\003\157\t\174\000\238\n\
         \014\003\157\011\178\003\157\003\157\020>\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\003\157\023\226\003\157\003\157\003\157\003\157\003\157\001\237\001\237\024\n\
         \007\246\023\030\001\237\b1\002\190\001\237\000\238\002\138\001\237\t\190\001\237\024B\002\246\001\237\007\246\001\237\001\237\001\237\024n\001\237\001\237\001\237\001\210\r\210\t\246\r\218\002\250\001\237\001\237\001\237\001\237\001\237\t\254\001\237\007\246\002\254\023~\003\150\024r\001\237\001\237\001\237\001\237\001\237\011*\003\222\001\190\001\206\001\237\r\238\001\237\001\237\002\178\024\174\014\030\003\230\001\237\001\237\001\237\bz\b~\b\138\026n\012\166\005v\001\237\001\237\001\237\001\237\001\237\001\237\001\237\001\237\001\237\025\142\t\166\n\
         \006\025\194\001\237\001\237\014J\004i\015\162\027J\005\130\005\134\001\237\001\237\001\237\027\030\001\237\001\237\001\237\001\237\012\174\015\202\012\250\001\237\003\254\001\237\001\237\026\166\001\237\001\237\001\237\001\237\001\237\001\237\005\138\b\146\001\237\001\237\001\237\b\170\004r\015\230\015\234\001\237\001\237\001\237\001\237\n\
         U\n\
         U\002\226\016\018\004\229\n\
         U\016&\002\190\n\
         U\016F\002\138\n\
         U\n\
         U\n\
         U\016V\002\246\n\
         U\016j\n\
         U\n\
         U\n\
         U\016\150\n\
         U\n\
         U\n\
         U\001\210\024\178\n\
         U\016\238\002\250\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\016\246\002\254\017\246\003\150\018\n\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\025\146\003\222\001\190\025\198\n\
         U\018\014\n\
         U\n\
         U\002\178\027N\006\134\003\230\n\
         U\n\
         U\n\
         U\bz\b~\b\138\026\182\n\
         U\005v\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\018\210\n\
         U\n\
         U\018\234\n\
         U\n\
         U\019r\019v\019\174\019\178\005\130\005\134\n\
         U\n\
         U\n\
         U\019\218\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\019\222\n\
         U\n\
         U\019\246\n\
         U\n\
         U\020\162\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\n\
         U\005\138\b\146\n\
         U\n\
         U\n\
         U\b\170\004r\020\166\020\202\n\
         U\n\
         U\n\
         U\n\
         U\n\
         Q\n\
         Q\020\206\020\222\020\238\n\
         Q\020\250\002\190\n\
         Q\021.\002\138\n\
         Q\n\
         Q\n\
         Q\0212\002\246\n\
         Q\021\130\n\
         Q\n\
         Q\n\
         Q\021\170\n\
         Q\n\
         Q\n\
         Q\001\210\021\174\n\
         Q\021\190\002\250\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\022\014\002\254\022.\003\150\022n\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\022\146\003\222\001\190\022\162\n\
         Q\022\202\n\
         Q\n\
         Q\002\178\022\206\022\218\003\230\n\
         Q\n\
         Q\n\
         Q\bz\b~\b\138\022\234\n\
         Q\005v\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\023\006\n\
         Q\n\
         Q\023\022\n\
         Q\n\
         Q\023*\023V\023Z\023f\005\130\005\134\n\
         Q\n\
         Q\n\
         Q\023v\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\023\138\n\
         Q\n\
         Q\024~\n\
         Q\n\
         Q\024\214\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\n\
         Q\005\138\b\146\n\
         Q\n\
         Q\n\
         Q\b\170\004r\024\254\025f\n\
         Q\n\
         Q\n\
         Q\n\
         Q\0021\0021\025v\025\206\025\222\0021\025\234\002\190\0021\026N\002\138\0021\t\190\0021\026b\002\246\0021\026\146\0021\0021\0021\026\154\0021\0021\0021\001\210\002\217\t\246\026\214\002\250\0021\0021\0021\0021\0021\t\254\0021\026\254\002\254\0276\003\150\004Q\0021\0021\0021\0021\0021\027f\003\222\001\190\027r\0021\000\n\
         \0021\0021\002\178\027z\027\131\003\230\0021\0021\0021\bz\b~\b\138\027\147\012\166\005v\0021\0021\0021\0021\0021\0021\0021\0021\0021\027\166\004\189\0021\002\217\0021\0021\004Q\006\202\002\190\004Q\005\130\005\134\0021\0021\0021\027\194\0021\0021\0021\0021\027\223\000\238\004Q\0021\004\189\0021\0021\004Q\0021\0021\0021\0021\0021\0021\005\138\b\146\0021\0021\0021\b\170\004r\027\239\004Q\0021\0021\0021\0021\004Q\007f\004Q\003\162\004Q\004Q\004Q\004Q\004Q\004Q\004Q\018j\004Q\000\238\004Q\004Q\028\011\004Q\004Q\004Q\017&\004Q\004Q\004Q\004Q\004Q\004Q\004Q\004Q\004Q\028?\004Q\004Q\028[\028f\004Q\004Q\000\238\004Q\004Q\004Q\004Q\004Q\007\226\004Q\004Q\004Q\004Q\004Q\004Q\004Q\004Q\000\238\004Q\004Q\004Q\004Q\004Q\004Q\004Q\004Q\000\238\004Q\004Q\004Q\004Q\004Q\004Q\004Q\004Q\b\213\004N\004Q\028\155\028\175\004Q\004Q\004Q\000\238\004Q\000\n\
         \028\183\004Q\004Q\004Q\004Q\004Q\004Q\004Q\004Q\004Q\015\150\022\134\004Q\004Q\002\217\002\217\007\238\004Q\004B\006\253\028\243\004Q\004Q\028\251\007\246\017*\022\246\002\217\000\238\004Q\004Q\004Q\007\250\000\000\004Q\004Q\004Q\004Q\006\253\000\161\004Q\000\161\006\253\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\161\023\170\000\161\000\161\000\000\000\161\000\161\000\000\000\000\000\161\000\161\000\000\000\161\000\161\000\161\000\161\000\000\000\161\004R\000\161\000\161\b\213\000\000\000\161\000\161\005\157\000\161\000\161\000\161\000\238\000\161\t\t\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\b\234\000\161\000\161\000\000\000\000\000\161\000\161\002\014\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\002\018\006\253\000\161\015\190\t5\000\161\002\138\000\161\001\210\000\161\005\157\002\190\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\000\000\000\000\161\003R\018\186\t5\005\157\000\222\000\000\007J\001\222\000\161\000\000\002\226\000\000\014\210\002\178\000\161\000\161\000\161\000\161\000\000\015\194\000\161\000\161\000\161\000\161\002)\002)\004i\000\000\003\162\002)\000\000\002\190\002)\015\206\002\138\002)\001b\002)\000\000\002\246\002)\007N\002)\002)\002)\000\000\002)\002)\002)\001\210\001z\000\000\001\138\002\250\002)\002)\002)\002)\002)\005\134\002)\000\000\002\254\000\000\003\150\b\193\002)\002)\002)\002)\002)\004i\003\222\b\142\000\000\002)\000\000\002)\002)\002\178\000\000\006\146\003\230\002)\002)\002)\bz\b~\b\138\t\166\n\
         \006\005v\002)\002)\002)\002)\002)\002)\002)\002)\002)\006\150\t\166\n\
         \006\b\193\002)\002)\000\000\t\174\000\000\n\
         \014\005\130\005\134\002)\002)\002)\000\000\002)\002)\002)\002)\t\174\000\000\n\
         \014\002)\b\193\002)\002)\000\000\002)\002)\002)\002)\002)\002)\005\138\b\146\002)\002)\002)\b\170\004r\000\238\002\217\002)\002)\002)\002)\002=\002=\002\217\002\217\000\000\002=\000\000\000\000\002=\000\000\b\193\002=\000\000\002=\004\254\000\000\002=\b\193\002=\002=\002=\000\n\
         \002=\002=\002=\000\000\028K\000\000\000\000\000\n\
         \002=\002=\002=\002=\002=\000\000\002=\002\217\006F\004\185\000\000\005\234\002=\002=\002=\002=\002=\000\000\006f\002\217\000\000\002=\006r\002=\002=\000\000\000\000\002\217\006\198\002=\002=\002=\004\185\000\000\006\233\t1\000\000\000\000\002=\002=\002=\002=\002=\002=\002=\002=\002=\000\000\t\166\n\
         \006\000\000\002=\002=\006\206\014\234\000\000\002\190\006\233\t1\002=\002=\002=\000\000\002=\002=\002=\002=\t\174\002\190\n\
         \014\002=\002\138\002=\002=\001\210\002=\002=\002=\002=\002=\002=\b\189\000\000\002=\002=\002=\000\000\022v\000\000\000\000\002=\002=\002=\002=\0029\0029\000\000\023\178\003\162\0029\023\182\003\174\0029\000\000\002\178\0029\000\000\0029\000\000\0186\0029\023\230\0029\0029\0029\t\178\0029\0029\0029\012f\b\189\000\000\000\000\015\206\0029\0029\0029\0029\0029\r\166\0029\r\178\000\000\012\130\023\246\012\146\0029\0029\0029\0029\0029\b\189\b\198\001\190\001*\0029\000\000\0029\0029\005\134\002\217\002\217\014\146\0029\0029\0029\014\166\014\186\014\202\000\000\000\000\000\000\0029\0029\0029\0029\0029\0029\0029\0029\0029\000\000\t\166\n\
         \006\b\189\0029\0029\000\n\
         \004\254\000\000\001\206\b\189\000\000\0029\0029\0029\000\000\0029\0029\0029\0029\t\174\000\000\n\
         \014\0029\000\000\0029\0029\001\210\0029\0029\0029\0029\0029\0029\002\217\000\000\0029\0029\0029\000\000\019z\000\000\000\000\0029\0029\0029\0029\002-\002-\000\000\000\000\002\162\002-\019\242\003\174\002-\000\000\002\178\002-\000\000\002-\000\000\000\000\002-\020\n\
         \002-\002-\002-\012\178\002-\002-\002-\002\217\002\217\017R\000\000\000\000\002-\002-\002-\002-\002-\012\202\002-\012\226\000\000\000\000\002\217\rB\002-\002-\002-\002-\002-\000\000\b\198\015\n\
         \000\000\002-\000\n\
         \002-\002-\rV\000\000\rj\014\146\002-\002-\002-\014\166\014\186\014\202\000\000\000\000\000\000\002-\002-\002-\002-\002-\002-\002-\002-\002-\000\000\t\166\n\
         \006\002\217\002-\002-\000\000\000\000\000\000\000\000\000\238\000\000\002-\002-\002-\000\000\002-\002-\002-\002-\t\174\000\000\n\
         \014\002-\000\000\002-\002-\000\000\002-\002-\002-\002-\002-\002-\000\000\000\000\002-\002-\002-\000\000\t\146\000\000\000\000\002-\002-\002-\002-\0025\0025\000\000\000\000\000\000\0025\012\161\006F\0025\000\000\005\234\0025\000\000\0025\000\000\000\000\0025\006f\0025\0025\0025\006r\0025\0025\0025\012\161\012\161\000\000\000\000\012\161\0025\0025\0025\0025\0025\000\000\0025\b-\000\000\000\000\b-\000\000\0025\0025\0025\0025\0025\000\000\000\000\000\000\000\000\0025\000\000\0025\0025\000\000\000\000\000\000\022\254\0025\0025\0025\000\000\000\000\000\000\000\000\000\000\000\238\0025\0025\0025\0025\0025\0025\0025\0025\0025\000\000\b-\0025\000\000\0025\0025\000\000\000\000\000\000\000\000\000\000\000\000\0025\0025\0025\b-\0025\0025\0025\0025\012\161\000\000\005\r\0025\000\000\0025\0025\002\217\n\
         &\0025\0025\0025\0025\0025\005\r\t\226\0025\0025\0025\000\000\000\000\b-\000\000\0025\0025\0025\0025\t=\t=\000\000\000\000\000\000\t=\000\000\000\000\t=\000\n\
         \000\000\t=\000\000\t=\000\000\000\000\n\
         R\005\r\t=\n\
         v\t=\b-\t=\t=\t=\002\217\002\217\018\146\000\000\017\194\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\t=\002\217\002\217\000\000\002\217\000\000\t=\t=\n\
         \186\n\
         \194\t=\005\r\b\r\000\000\005\r\t=\000\n\n\
         \202\t=\000\000\000\000\000\000\000\000\t=\t=\000\238\000\000\000\000\000\000\000\000\000\000\002\246\t=\t=\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\t=\t=\002\174\012\229\t=\002\217\t=\n\
         \242\000\000\003\018\000\000\000\000\000\238\000\000\t=\t=\n\
         \250\000\000\t=\t=\t=\t=\003\030\012\229\000\000\t=\000\000\t=\t=\002J\011\026\t=\011\"\n\
         \226\t=\t=\000\000\000\000\t=\011\002\t=\000\000\002N\000\000\005v\t=\t=\011\n\
         \011\018\002i\002i\000\000\000\000\000\000\002i\012\169\006F\002i\000\000\005\234\002i\000\000\002i\000\000\005\130\002i\006f\002i\002i\002i\006r\002i\002i\002i\012\169\012\169\000\000\000\000\012\169\002i\002i\002i\002i\002i\000\000\002i\015\190\000\000\005\138\002\138\000\000\002i\002i\002i\002i\002i\000\000\000\000\000\000\000\000\002i\000\000\002i\002i\000\000\000\000\000\000\000\000\002i\002i\002i\000\000\000\000\000\000\000\000\000\000\000\238\002i\002i\n\
         Z\002i\002i\002i\002i\002i\002i\000\000\015\194\002i\000\000\002i\002i\000\000\000\000\000\000\000\000\000\000\000\000\002i\002i\002i\015\206\002i\002i\002i\002i\012\169\000\000\001\206\002i\000\000\002i\002i\000\000\002i\002i\002i\002i\002i\002i\026\130\000\000\002i\002i\002i\000\000\000\000\005\134\000\000\002i\002i\002i\002i\002Q\002Q\000\000\000\000\000\000\002Q\000\000\002\190\002Q\000\000\000\000\002Q\000\000\002Q\003b\000\000\002Q\002\162\002Q\002Q\002Q\025\242\002Q\002Q\002Q\001\210\000\000\000\000\000\000\000\000\002Q\002Q\002Q\002Q\002Q\000\000\002Q\015\190\000\000\000\000\002\138\000\000\002Q\002Q\002Q\002Q\002Q\004\154\003\138\000\000\004\233\002Q\000\000\002Q\002Q\002\178\000\000\000\000\000\000\002Q\002Q\002Q\000\000\000\000\000\000\000\000\000\000\000\000\002Q\002Q\n\
         Z\002Q\002Q\002Q\002Q\002Q\002Q\000\000\015\194\002Q\000\000\002Q\002Q\0072\000\000\000\000\000\000\000\000\000\000\002Q\002Q\002Q\015\206\002Q\002Q\002Q\002Q\000\000\000\000\000\000\002Q\000\000\002Q\002Q\000\000\002Q\002Q\002Q\002Q\002Q\002Q\012\165\000\000\002Q\002Q\002Q\000\000\000\000\005\134\000\000\002Q\002Q\002Q\002Q\002]\002]\000\000\000\000\000\000\002]\012\165\012\165\002]\000\000\012\165\002]\000\000\002]\000\000\000\000\n\
         R\000\000\002]\002]\002]\021\218\002]\002]\002]\000\000\000\000\000\000\000\000\000\000\002]\002]\002]\n\
         \146\002]\000\000\002]\000\000\000\000\000\000\000\000\000\000\002]\002]\002]\002]\002]\000\000\000\238\000\000\000\000\002]\000\000\002]\002]\000\000\000\000\000\000\000\000\002]\002]\002]\000\000\000\000\000\000\000\000\000\000\000\000\002]\002]\n\
         Z\n\
         \154\002]\002]\002]\002]\002]\000\000\012\165\002]\000\000\002]\002]\000\000\000\000\000\000\000\000\000\238\b!\002]\002]\002]\b!\002]\002]\002]\002]\000\000\000\000\000\000\002]\000\000\002]\002]\000\000\002]\002]\002]\002]\002]\002]\000\000\000\000\002]\002]\002]\000\000\011\214\000\000\000\000\002]\002]\002]\002]\002m\002m\000\000\000\000\000\000\002m\b!\011\222\002m\000\000\011\234\002m\000\000\002m\000\000\000\000\002m\011\246\002m\002m\002m\012\002\002m\002m\002m\000\000\000\000\b!\000\000\000\000\002m\002m\002m\002m\002m\000\000\002m\000\000\000\000\000\000\000\000\000\000\002m\002m\002m\002m\002m\000\000\000\000\000\000\000\000\002m\000\000\002m\002m\000\000\000\000\000\000\000\000\002m\002m\002m\000\000\000\000\004\254\000\000\000\000\000\000\002m\002m\n\
         Z\002m\002m\002m\002m\002m\002m\000\000\bJ\002m\000\000\002m\002m\000\000\000\000\000\000\000\000\000\238\b\029\002m\002m\002m\b\029\002m\002m\002m\002m\000\000\bN\000\000\002m\000\000\002m\002m\000\000\002m\002m\002m\002m\002m\002m\000\000\000\000\002m\002m\002m\000\000\007\185\000\000\000\000\002m\002m\002m\002m\002M\002M\b>\000\000\000\000\002M\b\029\007\185\002M\000\000\005\234\002M\000\000\002M\000\000\000\238\002M\007\185\002M\002M\002M\007\185\002M\002M\002M\000\000\000\000\b\029\000\000\000\000\002M\002M\002M\002M\002M\000\000\002M\000\000\000\000\007\017\000\000\000\000\002M\002M\002M\002M\002M\000\000\000\000\000\000\000\000\002M\000\000\002M\002M\000\000\000\000\000\000\007\017\002M\002M\002M\007\017\bR\004\254\000\000\000\000\000\000\002M\002M\n\
         Z\002M\002M\002M\002M\002M\002M\000\000\000\000\002M\000\000\002M\002M\000\000\000\000\000\000\000\000\007\213\000\000\002M\002M\002M\000\000\002M\002M\002M\002M\000\000\000\000\000\000\002M\000\000\002M\002M\000\000\002M\002M\002M\002M\002M\002M\000\000\000\000\002M\002M\002M\000\000\007\213\000\000\000\000\002M\002M\002M\002M\002Y\002Y\000\000\000\000\000\000\002Y\005f\007\213\002Y\000\000\005\234\002Y\000\000\002Y\000\000\000\000\n\
         R\007\213\002Y\002Y\002Y\007\213\002Y\002Y\002Y\000\000\000\000\000\000\000\000\000\000\002Y\002Y\002Y\n\
         \146\002Y\000\000\002Y\000\000\000\000\007\001\000\000\000\000\002Y\002Y\002Y\002Y\002Y\000\000\000\000\000\000\000\000\002Y\000\000\002Y\002Y\000\000\000\000\000\000\007\001\002Y\002Y\002Y\007\001\000\000\000\000\000\000\000\000\000\000\002Y\002Y\n\
         Z\n\
         \154\002Y\002Y\002Y\002Y\002Y\000\000\000\000\002Y\000\000\002Y\002Y\000\000\000\000\000\000\000\000\000\238\000\000\002Y\002Y\002Y\000\000\002Y\002Y\002Y\002Y\000\000\000\000\000\000\002Y\000\000\002Y\002Y\000\000\002Y\002Y\002Y\002Y\002Y\002Y\000\000\000\000\002Y\002Y\002Y\000\000\007\241\000\000\000\000\002Y\002Y\002Y\002Y\002U\002U\000\000\000\000\000\000\002U\b\134\006F\002U\000\000\005\234\002U\000\000\002U\000\000\000\000\n\
         R\007\241\002U\002U\002U\007\241\002U\002U\002U\000\000\000\000\000\000\000\000\000\000\002U\002U\002U\n\
         \146\002U\000\000\002U\000\000\000\000\000\000\000\000\000\000\002U\002U\002U\002U\002U\000\000\000\000\000\000\000\000\002U\000\000\002U\002U\000\000\000\000\000\000\000\000\002U\002U\002U\000\000\000\000\000\000\000\000\000\000\000\000\002U\002U\n\
         Z\n\
         \154\002U\002U\002U\002U\002U\000\000\000\000\002U\000\000\002U\002U\000\000\000\000\000\000\000\000\007\233\000\000\002U\002U\002U\000\000\002U\002U\002U\002U\000\000\000\000\000\000\002U\000\000\002U\002U\000\000\002U\002U\002U\002U\002U\002U\000\000\000\000\002U\002U\002U\000\000\007\233\000\000\000\000\002U\002U\002U\002U\002}\002}\000\000\000\000\000\000\002}\000\000\012\026\002}\000\000\007\233\002}\000\000\002}\000\000\000\000\n\
         R\007\233\002}\002}\002}\007\233\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002}\000\000\000\000\000\000\000\000\000\000\002}\002}\n\
         \186\n\
         \194\002}\000\000\000\000\000\000\000\000\002}\000\000\n\
         \202\002}\000\000\000\000\000\000\000\000\002}\002}\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002}\002}\000\000\000\000\002}\000\000\002}\n\
         \242\000\000\000\000\000\000\000\000\000\238\000\000\002}\002}\n\
         \250\000\000\002}\002}\002}\002}\000\000\000\000\000\000\002}\000\000\002}\002}\000\000\002}\002}\002}\n\
         \226\002}\002}\000\000\000\000\002}\011\002\002}\000\000\007\181\000\000\000\000\002}\002}\011\n\
         \011\018\002e\002e\000\000\000\000\000\000\002e\000\000\007\181\002e\000\000\005\234\002e\000\000\002e\000\000\000\000\n\
         R\007\181\002e\002e\002e\007\181\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\002e\002e\002e\n\
         \146\002e\000\000\002e\000\000\000\000\000\000\000\000\000\000\002e\002e\002e\002e\002e\000\000\000\000\000\000\000\000\002e\000\000\002e\002e\000\000\000\000\000\000\000\000\002e\002e\002e\000\000\000\000\000\000\000\000\000\000\000\000\002e\002e\n\
         Z\n\
         \154\002e\002e\002e\002e\002e\000\000\000\000\002e\000\000\002e\002e\000\000\000\000\000\000\000\000\000\238\000\000\002e\002e\002e\000\000\002e\002e\002e\002e\000\000\000\000\000\000\002e\000\000\002e\002e\000\000\002e\002e\002e\002e\002e\002e\000\000\000\000\002e\002e\002e\000\000\014b\000\000\000\000\002e\002e\002e\002e\002a\002a\000\000\000\000\000\000\002a\000\000\011\222\002a\000\000\011\234\002a\000\000\002a\000\000\000\000\n\
         R\011\246\002a\002a\002a\012\002\002a\002a\002a\000\000\000\000\000\000\000\000\000\000\002a\002a\002a\n\
         \146\002a\000\000\002a\000\000\000\000\000\000\000\000\000\000\002a\002a\002a\002a\002a\000\000\000\000\000\000\000\000\002a\000\000\002a\002a\000\000\000\000\000\000\000\000\002a\002a\002a\000\000\000\000\000\000\000\000\000\000\000\000\002a\002a\n\
         Z\n\
         \154\002a\002a\002a\002a\002a\000\000\000\000\002a\000\000\002a\002a\000\000\000\000\000\000\000\000\000\000\000\000\002a\002a\002a\000\000\002a\002a\002a\002a\000\000\000\000\000\000\002a\000\000\002a\002a\000\000\002a\002a\002a\002a\002a\002a\000\000\000\000\002a\002a\002a\000\000\000\000\000\000\000\000\002a\002a\002a\002a\002u\002u\000\000\000\000\000\000\002u\000\000\002\014\002u\000\000\002\138\002u\000\000\002u\000\000\000\000\n\
         R\000\000\002u\002u\002u\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\002u\000\000\002u\000\000\000\000\000\000\000\000\000\000\002u\002u\n\
         \186\n\
         \194\002u\000\000\027\158\001\222\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\002u\002u\000\238\015\206\000\000\000\000\000\000\000\000\000\000\002u\002u\n\
         Z\n\
         \154\n\
         \210\n\
         \218\002u\002u\002u\000\000\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\000\000\005\134\002u\002u\002u\000\000\002u\002u\002u\002u\000\000\000\000\000\000\002u\000\000\002u\002u\000\000\002u\002u\002u\n\
         \226\002u\002u\000\000\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\002u\002u\002u\002u\002I\002I\000\000\000\000\000\000\002I\000\000\003\174\002I\000\000\000\000\002I\000\000\002I\000\000\000\000\n\
         R\000\000\002I\002I\002I\000\000\002I\002I\002I\000\000\000\000\000\000\000\000\000\000\002I\002I\002I\n\
         \146\002I\000\000\002I\000\000\000\000\000\000\000\000\000\000\002I\002I\002I\002I\002I\000\000\005\190\000\000\000\000\002I\000\000\002I\002I\000\000\000\000\000\000\003\246\002I\002I\002I\006\154\000\000\004\002\000\000\000\000\000\000\002I\002I\n\
         Z\n\
         \154\002I\002I\002I\002I\002I\000\000\000\000\002I\000\000\002I\002I\000\000\000\000\000\000\000\000\000\000\000\000\002I\002I\002I\000\000\002I\002I\002I\002I\000\000\000\000\000\000\002I\000\000\002I\002I\000\000\002I\002I\002I\002I\002I\002I\000\000\000\000\002I\002I\002I\000\000\000\000\000\000\000\000\002I\002I\002I\002I\002E\002E\000\000\000\000\000\000\002E\000\000\002\190\002E\000\000\000\000\002E\000\000\002E\000\000\000\000\n\
         R\000\000\002E\002E\002E\000\000\002E\002E\002E\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\002E\000\000\002E\000\000\000\000\000\000\000\000\000\000\002E\002E\n\
         \186\n\
         \194\002E\000\000\n\
         \018\003\162\000\000\002E\000\000\002E\002E\000\000\000\000\000\000\000\000\002E\002E\000\238\012>\000\000\012N\000\000\000\000\000\000\002E\002E\n\
         Z\n\
         \154\n\
         \210\n\
         \218\002E\002E\002E\000\000\000\000\002E\000\000\002E\002E\000\000\000\000\000\000\000\000\000\000\000\000\002E\002E\002E\000\000\002E\002E\002E\002E\000\000\000\000\000\000\002E\000\000\002E\002E\000\000\002E\002E\002E\n\
         \226\002E\002E\000\000\000\000\002E\002E\002E\000\000\000\000\000\000\000\000\002E\002E\002E\002E\002\161\002\161\000\000\000\000\000\000\002\161\000\000\002\190\002\161\000\000\000\000\002\161\000\000\002\161\000\000\000\000\n\
         R\000\000\002\161\002\161\002\161\000\000\002\161\002\161\002\161\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\002\161\000\000\002\161\000\000\000\000\000\000\000\000\000\000\002\161\002\161\n\
         \186\n\
         \194\002\161\000\000\012\254\003\162\000\000\002\161\000\000\002\161\002\161\000\000\000\000\000\000\000\000\002\161\002\161\002\161\r\018\000\000\r&\000\000\000\000\000\000\002\161\002\161\n\
         Z\n\
         \154\n\
         \210\002\161\002\161\002\161\002\161\000\000\000\000\002\161\000\000\002\161\002\161\000\000\000\000\000\000\000\000\000\000\000\000\002\161\002\161\002\161\000\000\002\161\002\161\002\161\002\161\000\000\000\000\000\000\002\161\000\000\002\161\002\161\000\000\002\161\002\161\002\161\n\
         \226\002\161\002\161\000\000\000\000\002\161\002\161\002\161\000\000\000\000\000\000\000\000\002\161\002\161\002\161\002\161\002A\002A\000\000\000\000\000\000\002A\000\000\000\000\002A\000\000\000\000\002A\000\000\002A\000\000\000\000\n\
         R\000\000\002A\002A\002A\000\000\002A\002A\002A\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\002A\000\000\002A\000\000\000\000\000\000\000\000\000\000\002A\002A\n\
         \186\n\
         \194\002A\000\000\000\000\000\000\000\000\002A\000\000\002A\002A\000\000\000\000\000\000\000\000\002A\002A\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002A\002A\n\
         Z\n\
         \154\n\
         \210\n\
         \218\002A\002A\002A\000\000\000\000\002A\000\000\002A\002A\000\000\000\000\000\000\000\000\000\000\000\000\002A\002A\002A\000\000\002A\002A\002A\002A\000\000\000\000\000\000\002A\000\000\002A\002A\000\000\002A\002A\002A\n\
         \226\002A\002A\000\000\000\000\002A\002A\002A\000\000\000\000\000\000\000\000\002A\002A\002A\002A\002y\002y\000\000\000\000\000\000\002y\000\000\000\000\002y\000\000\000\000\002y\000\000\002y\000\000\000\000\n\
         R\000\000\002y\002y\002y\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\002y\000\000\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\n\
         \186\n\
         \194\002y\000\000\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\002y\002y\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\n\
         Z\n\
         \154\n\
         \210\n\
         \218\002y\002y\002y\000\000\000\000\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\000\000\002y\002y\002y\002y\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\002y\002y\002y\n\
         \226\002y\002y\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\002y\002y\002y\002y\002q\002q\000\000\000\000\000\000\002q\000\000\000\000\002q\000\000\000\000\002q\000\000\002q\000\000\000\000\n\
         R\000\000\002q\002q\002q\000\000\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\002q\000\000\002q\000\000\000\000\000\000\000\000\000\000\002q\002q\n\
         \186\n\
         \194\002q\000\000\000\000\000\000\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\000\000\002q\002q\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002q\002q\n\
         Z\n\
         \154\n\
         \210\n\
         \218\002q\002q\002q\000\000\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\000\000\000\000\000\000\002q\002q\002q\000\000\002q\002q\002q\002q\000\000\000\000\000\000\002q\000\000\002q\002q\000\000\002q\002q\002q\n\
         \226\002q\002q\000\000\000\000\002q\002q\002q\000\000\000\000\000\000\000\000\002q\002q\002q\002q\002\129\002\129\000\000\000\000\000\000\002\129\000\000\000\000\002\129\000\000\000\000\002\129\000\000\002\129\000\000\000\000\n\
         R\000\000\002\129\002\129\002\129\000\000\002\129\002\129\002\129\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\129\000\000\000\000\000\000\000\000\000\000\002\129\002\129\n\
         \186\n\
         \194\002\129\000\000\000\000\000\000\000\000\002\129\000\000\n\
         \202\002\129\000\000\000\000\000\000\000\000\002\129\002\129\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\129\002\129\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\129\002\129\000\000\000\000\002\129\000\000\002\129\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\129\002\129\n\
         \250\000\000\002\129\002\129\002\129\002\129\000\000\000\000\000\000\002\129\000\000\002\129\002\129\000\000\002\129\002\129\002\129\n\
         \226\002\129\002\129\000\000\000\000\002\129\011\002\002\129\000\000\000\000\000\000\000\000\002\129\002\129\011\n\
         \011\018\002\133\002\133\000\000\000\000\000\000\002\133\000\000\000\000\002\133\000\000\000\000\002\133\000\000\002\133\000\000\000\000\n\
         R\000\000\002\133\002\133\002\133\000\000\002\133\002\133\002\133\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\002\133\000\000\002\133\000\000\000\000\000\000\000\000\000\000\002\133\002\133\n\
         \186\n\
         \194\002\133\000\000\000\000\000\000\000\000\002\133\000\000\n\
         \202\002\133\000\000\000\000\000\000\000\000\002\133\002\133\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\133\002\133\000\000\000\000\002\133\000\000\002\133\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\n\
         \250\000\000\002\133\002\133\002\133\002\133\000\000\000\000\000\000\002\133\000\000\002\133\002\133\000\000\002\133\002\133\002\133\n\
         \226\002\133\002\133\000\000\000\000\002\133\002\133\002\133\000\000\000\000\000\000\000\000\002\133\002\133\011\n\
         \011\018\002\137\002\137\000\000\000\000\000\000\002\137\000\000\000\000\002\137\000\000\000\000\002\137\000\000\002\137\000\000\000\000\n\
         R\000\000\002\137\002\137\002\137\000\000\002\137\002\137\002\137\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\002\137\000\000\002\137\000\000\000\000\000\000\000\000\000\000\002\137\002\137\n\
         \186\n\
         \194\002\137\000\000\000\000\000\000\000\000\002\137\000\000\n\
         \202\002\137\000\000\000\000\000\000\000\000\002\137\002\137\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\137\002\137\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\137\002\137\000\000\000\000\002\137\000\000\002\137\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\137\002\137\n\
         \250\000\000\002\137\002\137\002\137\002\137\000\000\000\000\000\000\002\137\000\000\002\137\002\137\000\000\002\137\002\137\002\137\n\
         \226\002\137\002\137\000\000\000\000\002\137\002\137\002\137\000\000\000\000\000\000\000\000\002\137\002\137\011\n\
         \011\018\b\249\b\249\000\000\000\000\000\000\b\249\000\000\000\000\b\249\000\000\000\000\b\249\000\000\b\249\000\000\000\000\n\
         R\000\000\b\249\b\249\b\249\000\000\b\249\b\249\b\249\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\b\249\000\000\000\000\000\000\000\000\000\000\b\249\b\249\n\
         \186\n\
         \194\b\249\000\000\000\000\000\000\000\000\b\249\000\000\n\
         \202\b\249\000\000\000\000\000\000\000\000\b\249\b\249\000\238\000\000\000\000\000\000\000\000\000\000\000\000\b\249\b\249\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\b\249\b\249\000\000\000\000\b\249\000\000\b\249\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\b\249\b\249\n\
         \250\000\000\b\249\b\249\b\249\b\249\000\000\000\000\000\000\b\249\000\000\b\249\b\249\000\000\b\249\b\249\b\249\n\
         \226\b\249\b\249\000\000\000\000\b\249\011\002\b\249\000\000\000\000\000\000\000\000\b\249\b\249\011\n\
         \011\018\002\141\002\141\000\000\000\000\000\000\002\141\000\000\000\000\002\141\000\000\000\000\002\141\000\000\002\141\000\000\000\000\n\
         R\000\000\002\141\002\141\002\141\000\000\002\141\002\141\002\141\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\141\000\000\000\000\000\000\000\000\000\000\002\141\002\141\n\
         \186\n\
         \194\002\141\000\000\000\000\000\000\000\000\002\141\000\000\n\
         \202\002\141\000\000\000\000\000\000\000\000\002\141\002\141\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\141\002\141\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\141\002\141\000\000\000\000\002\141\000\000\002\141\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\141\002\141\n\
         \250\000\000\002\141\002\141\002\141\002\141\000\000\000\000\000\000\002\141\000\000\002\141\002\141\000\000\011\026\002\141\011\"\n\
         \226\002\141\002\141\000\000\000\000\002\141\011\002\002\141\000\000\000\000\000\000\000\000\002\141\002\141\011\n\
         \011\018\b\245\b\245\000\000\000\000\000\000\b\245\000\000\000\000\b\245\000\000\000\000\b\245\000\000\b\245\000\000\000\000\n\
         R\000\000\b\245\b\245\b\245\000\000\b\245\b\245\b\245\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\b\245\000\000\000\000\000\000\000\000\000\000\b\245\b\245\n\
         \186\n\
         \194\b\245\000\000\000\000\000\000\000\000\b\245\000\000\n\
         \202\b\245\000\000\000\000\000\000\000\000\b\245\b\245\000\238\000\000\000\000\000\000\000\000\000\000\000\000\b\245\b\245\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\b\245\b\245\000\000\000\000\b\245\000\000\b\245\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\b\245\b\245\n\
         \250\000\000\b\245\b\245\b\245\b\245\000\000\000\000\000\000\b\245\000\000\b\245\b\245\000\000\b\245\b\245\b\245\n\
         \226\b\245\b\245\000\000\000\000\b\245\011\002\b\245\000\000\000\000\000\000\000\000\b\245\b\245\011\n\
         \011\018\002\185\002\185\000\000\000\000\000\000\002\185\000\000\000\000\002\185\000\000\000\000\002\185\000\000\002\185\000\000\000\000\n\
         R\000\000\002\185\002\185\002\185\000\000\002\185\002\185\002\185\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\185\000\000\000\000\000\000\000\000\000\000\002\185\002\185\n\
         \186\n\
         \194\002\185\000\000\000\000\000\000\000\000\002\185\000\000\n\
         \202\002\185\000\000\000\000\000\000\000\000\002\185\002\185\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\185\002\185\000\000\000\000\002\185\000\000\002\185\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\n\
         \250\000\000\002\185\002\185\002\185\002\185\000\000\000\000\000\000\002\185\000\000\002\185\002\185\000\000\011\026\002\185\011\"\n\
         \226\002\185\002\185\000\000\000\000\002\185\011\002\002\185\000\000\000\000\000\000\000\000\002\185\002\185\011\n\
         \011\018\002\201\002\201\000\000\000\000\000\000\002\201\000\000\000\000\002\201\000\000\000\000\002\201\000\000\002\201\000\000\000\000\n\
         R\000\000\002\201\002\201\002\201\000\000\002\201\002\201\002\201\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\201\000\000\000\000\000\000\000\000\000\000\002\201\002\201\n\
         \186\n\
         \194\002\201\000\000\000\000\000\000\000\000\002\201\000\000\n\
         \202\002\201\000\000\000\000\000\000\000\000\002\201\002\201\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\201\002\201\000\000\000\000\002\201\000\000\002\201\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\201\002\201\n\
         \250\000\000\002\201\002\201\002\201\002\201\000\000\000\000\000\000\002\201\000\000\002\201\002\201\000\000\011\026\002\201\011\"\n\
         \226\002\201\002\201\000\000\000\000\002\201\011\002\002\201\000\000\000\000\000\000\000\000\002\201\002\201\011\n\
         \011\018\002\193\002\193\000\000\000\000\000\000\002\193\000\000\000\000\002\193\000\000\000\000\002\193\000\000\002\193\000\000\000\000\n\
         R\000\000\002\193\002\193\002\193\000\000\002\193\002\193\002\193\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\193\000\000\000\000\000\000\000\000\000\000\002\193\002\193\n\
         \186\n\
         \194\002\193\000\000\000\000\000\000\000\000\002\193\000\000\n\
         \202\002\193\000\000\000\000\000\000\000\000\002\193\002\193\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\193\002\193\000\000\000\000\002\193\000\000\002\193\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\193\002\193\n\
         \250\000\000\002\193\002\193\002\193\002\193\000\000\000\000\000\000\002\193\000\000\002\193\002\193\000\000\011\026\002\193\011\"\n\
         \226\002\193\002\193\000\000\000\000\002\193\011\002\002\193\000\000\000\000\000\000\000\000\002\193\002\193\011\n\
         \011\018\002\173\002\173\000\000\000\000\000\000\002\173\000\000\000\000\002\173\000\000\000\000\002\173\000\000\002\173\000\000\000\000\n\
         R\000\000\002\173\002\173\002\173\000\000\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\173\000\000\000\000\000\000\000\000\000\000\002\173\002\173\n\
         \186\n\
         \194\002\173\000\000\000\000\000\000\000\000\002\173\000\000\n\
         \202\002\173\000\000\000\000\000\000\000\000\002\173\002\173\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\173\002\173\000\000\000\000\002\173\000\000\002\173\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\n\
         \250\000\000\002\173\002\173\002\173\002\173\000\000\000\000\000\000\002\173\000\000\002\173\002\173\000\000\011\026\002\173\011\"\n\
         \226\002\173\002\173\000\000\000\000\002\173\011\002\002\173\000\000\000\000\000\000\000\000\002\173\002\173\011\n\
         \011\018\002\181\002\181\000\000\000\000\000\000\002\181\000\000\000\000\002\181\000\000\000\000\002\181\000\000\002\181\000\000\000\000\n\
         R\000\000\002\181\002\181\002\181\000\000\002\181\002\181\002\181\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\181\000\000\000\000\000\000\000\000\000\000\002\181\002\181\n\
         \186\n\
         \194\002\181\000\000\000\000\000\000\000\000\002\181\000\000\n\
         \202\002\181\000\000\000\000\000\000\000\000\002\181\002\181\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\181\002\181\000\000\000\000\002\181\000\000\002\181\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\n\
         \250\000\000\002\181\002\181\002\181\002\181\000\000\000\000\000\000\002\181\000\000\002\181\002\181\000\000\011\026\002\181\011\"\n\
         \226\002\181\002\181\000\000\000\000\002\181\011\002\002\181\000\000\000\000\000\000\000\000\002\181\002\181\011\n\
         \011\018\002\177\002\177\000\000\000\000\000\000\002\177\000\000\000\000\002\177\000\000\000\000\002\177\000\000\002\177\000\000\000\000\n\
         R\000\000\002\177\002\177\002\177\000\000\002\177\002\177\002\177\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\177\000\000\000\000\000\000\000\000\000\000\002\177\002\177\n\
         \186\n\
         \194\002\177\000\000\000\000\000\000\000\000\002\177\000\000\n\
         \202\002\177\000\000\000\000\000\000\000\000\002\177\002\177\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\177\002\177\000\000\000\000\002\177\000\000\002\177\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\n\
         \250\000\000\002\177\002\177\002\177\002\177\000\000\000\000\000\000\002\177\000\000\002\177\002\177\000\000\011\026\002\177\011\"\n\
         \226\002\177\002\177\000\000\000\000\002\177\011\002\002\177\000\000\000\000\000\000\000\000\002\177\002\177\011\n\
         \011\018\002\189\002\189\000\000\000\000\000\000\002\189\000\000\000\000\002\189\000\000\000\000\002\189\000\000\002\189\000\000\000\000\n\
         R\000\000\002\189\002\189\002\189\000\000\002\189\002\189\002\189\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\189\000\000\000\000\000\000\000\000\000\000\002\189\002\189\n\
         \186\n\
         \194\002\189\000\000\000\000\000\000\000\000\002\189\000\000\n\
         \202\002\189\000\000\000\000\000\000\000\000\002\189\002\189\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\189\002\189\000\000\000\000\002\189\000\000\002\189\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\n\
         \250\000\000\002\189\002\189\002\189\002\189\000\000\000\000\000\000\002\189\000\000\002\189\002\189\000\000\011\026\002\189\011\"\n\
         \226\002\189\002\189\000\000\000\000\002\189\011\002\002\189\000\000\000\000\000\000\000\000\002\189\002\189\011\n\
         \011\018\002\205\002\205\000\000\000\000\000\000\002\205\000\000\000\000\002\205\000\000\000\000\002\205\000\000\002\205\000\000\000\000\n\
         R\000\000\002\205\002\205\002\205\000\000\002\205\002\205\002\205\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\205\000\000\000\000\000\000\000\000\000\000\002\205\002\205\n\
         \186\n\
         \194\002\205\000\000\000\000\000\000\000\000\002\205\000\000\n\
         \202\002\205\000\000\000\000\000\000\000\000\002\205\002\205\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\205\002\205\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\205\002\205\000\000\000\000\002\205\000\000\002\205\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\205\002\205\n\
         \250\000\000\002\205\002\205\002\205\002\205\000\000\000\000\000\000\002\205\000\000\002\205\002\205\000\000\011\026\002\205\011\"\n\
         \226\002\205\002\205\000\000\000\000\002\205\011\002\002\205\000\000\000\000\000\000\000\000\002\205\002\205\011\n\
         \011\018\002\197\002\197\000\000\000\000\000\000\002\197\000\000\000\000\002\197\000\000\000\000\002\197\000\000\002\197\000\000\000\000\n\
         R\000\000\002\197\002\197\002\197\000\000\002\197\002\197\002\197\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\197\000\000\000\000\000\000\000\000\000\000\002\197\002\197\n\
         \186\n\
         \194\002\197\000\000\000\000\000\000\000\000\002\197\000\000\n\
         \202\002\197\000\000\000\000\000\000\000\000\002\197\002\197\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\197\002\197\000\000\000\000\002\197\000\000\002\197\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\197\002\197\n\
         \250\000\000\002\197\002\197\002\197\002\197\000\000\000\000\000\000\002\197\000\000\002\197\002\197\000\000\011\026\002\197\011\"\n\
         \226\002\197\002\197\000\000\000\000\002\197\011\002\002\197\000\000\000\000\000\000\000\000\002\197\002\197\011\n\
         \011\018\002\169\002\169\000\000\000\000\000\000\002\169\000\000\000\000\002\169\000\000\000\000\002\169\000\000\002\169\000\000\000\000\n\
         R\000\000\002\169\002\169\002\169\000\000\002\169\002\169\002\169\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\169\000\000\000\000\000\000\000\000\000\000\002\169\002\169\n\
         \186\n\
         \194\002\169\000\000\000\000\000\000\000\000\002\169\000\000\n\
         \202\002\169\000\000\000\000\000\000\000\000\002\169\002\169\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\169\002\169\000\000\000\000\002\169\000\000\002\169\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\n\
         \250\000\000\002\169\002\169\002\169\002\169\000\000\000\000\000\000\002\169\000\000\002\169\002\169\000\000\011\026\002\169\011\"\n\
         \226\002\169\002\169\000\000\000\000\002\169\011\002\002\169\000\000\000\000\000\000\000\000\002\169\002\169\011\n\
n\
         R\000\000\002\029\002\029\002\029\000\000\002\029\002\029\002\029\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\029\000\000\000\000\000\000\000\000\000\000\002\029\002\029\n\
         \186\n\
         \194\002\029\000\000\000\000\000\000\000\000\002\029\000\000\n\
         \202\002\029\000\000\000\000\000\000\000\000\002\029\002\029\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\029\002\029\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\029\002\029\000\000\000\000\002\029\000\000\002\029\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\029\002\029\n\
         \250\000\000\002\029\002\029\014R\002\029\000\000\000\000\000\000\002\029\000\000\002\029\002\029\000\000\011\026\002\029\011\"\n\
         \226\002\029\002\029\000\000\000\000\002\029\011\002\002\029\000\000\000\000\000\000\000\000\002\029\002\029\011\n\
         \011\018\002\025\002\025\000\000\000\000\000\000\002\025\000\000\000\000\002\025\000\000\000\000\002\025\000\000\002\025\000\000\000\000\n\
         R\000\000\002\025\002\025\002\025\000\000\002\025\002\025\002\025\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\025\000\000\000\000\000\000\000\000\000\000\002\025\002\025\n\
         \186\n\
         \194\002\025\000\000\000\000\000\000\000\000\002\025\000\000\n\
         \202\002\025\000\000\000\000\000\000\000\000\002\025\002\025\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\025\002\025\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\025\002\025\000\000\000\000\002\025\000\000\002\025\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\025\002\025\n\
         \250\000\000\002\025\002\025\002\025\002\025\000\000\000\000\000\000\002\025\000\000\002\025\002\025\000\000\011\026\002\025\011\"\n\
         \226\002\025\002\025\000\000\000\000\002\025\011\002\002\025\000\000\000\000\000\000\000\000\002\025\002\025\011\n\
         \011\018\002\165\002\165\000\000\000\000\000\000\002\165\000\000\000\000\002\165\000\000\000\000\002\165\000\000\002\165\000\000\000\000\n\
         R\000\000\002\165\002\165\002\165\000\000\002\165\002\165\002\165\000\000\000\000\000\000\000\000\000\000\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\002\165\000\000\000\000\000\000\000\000\000\000\002\165\002\165\n\
         \186\n\
         \194\002\165\000\000\000\000\000\000\000\000\002\165\000\000\n\
         \202\002\165\000\000\000\000\000\000\000\000\002\165\002\165\000\238\000\000\000\000\000\000\000\000\000\000\000\000\002\165\002\165\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\002\165\002\165\000\000\000\000\002\165\000\000\002\165\n\
         \242\000\000\000\000\000\000\000\000\000\000\000\000\002\165\002\165\n\
         \250\000\000\002\165\002\165\002\165\002\165\000\000\000\000\000\000\002\165\000\000\002\165\002\165\000\000\011\026\002\165\011\"\n\
         \226\002\165\002\165\000\000\000\000\002\165\011\002\002\165\000\000\000\000\000\000\000\000\002\165\002\165\011\n\
         \011\018\002\r\002\r\000\000\000\000\000\000\002\r\000\000\000\000\002\r\000\000\000\000\002\r\000\000\002\r\000\000\000\000\002\r\000\000\002\r\002\r\002\r\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\000\000\002\r\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\000\000\000\000\000\000\000\000\002\r\000\000\002\r\002\r\000\000\000\000\000\000\000\000\002\r\002\r\002\r\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\002\r\000\000\000\000\002\r\000\000\002\r\002\r\000\000\000\000\000\000\000\000\000\000\000\000\002\r\002\r\002\r\000\000\002\r\002\r\002\r\002\r\000\000\000\000\000\000\002\r\000\000\002\r\002\r\000\000\002\r\002\r\002\r\002\r\002\r\002\r\000\000\000\000\002\r\002\r\014:\000\000\000\000\000\000\000\000\002\r\002\r\002\r\002\rn\
         \000\000\006f\000\000\002\150\000\000\006r\007!\000\000\001\210\003\142\007!\002\190\003\226\001\018\b\206\b\210\001\030\001\"\003b\000\000\000\000\002\254\000\000\003\150\bB\016\186\000\000\b\246\b\250\001\210\003\210\003\222\003\234\b\254\007\030\000\000\001:\000\000\002\178\000\000\000\000\003\230\000\000\000\000\000\000\bz\b~\b\138\b\158\000\000\005v\000\000\003\138\001>\001B\001F\001J\001N\000\000\002\178\t\018\001R\000\000\007\021\000\000\001V\000\000\t\030\t6\t\130\005\130\005\134\000\000\000\000\001Z\000\000\000\000\000\000\007!\000\000\001^\002\217\007\021\000\000\000\000\019N\007\021\0072\000\000\000\000\001\154\0062\000\000\t\202\005\138\b\146\t\214\001\158\000\000\014\130\004r\t\150\001\006\001\166\000\006\001\170\001\174\025\170\002\186\002\190\000\n\
         \002\234\002\138\000\000\000\000\000\000\000\000\002\246\001\n\
         \000\000\000\000\000\000\b\202\000\000\000\238\000\000\002\217\001\210\000\000\000\000\000\000\003\226\001\018\b\206\b\210\001\030\001\"\000\000\002\217\002\217\002\254\000\000\003\150\000\000\b\214\000\000\b\246\b\250\000\238\003\210\003\222\003\234\b\254\007\030\000\000\001:\000\000\002\178\006\249\000\000\003\230\000\000\000\000\000\000\bz\b~\b\138\b\158\006F\005v\000\000\005\234\001>\001B\001F\001J\001N\006\249\006f\t\018\001R\006\249\006r\000\000\001V\000\000\t\030\t6\t\130\005\130\005\134\000\000\006F\001Z\000\000\005\234\025\174\000\000\000\000\001^\000\000\000\000\006f\000\000\000\000\000\000\006r\000\000\000\000\001\154\006\134\000\000\000\000\005\138\b\146\012\217\001\158\000\000\014\130\004r\t\150\004}\001\166\000\006\001\170\001\174\000\246\002\186\002\190\002\194\002\234\002\138\000\000\000\000\000\000\012\217\002\246\000\000\002&\003j\000\000\002*\000\000\004}\000\000\003n\001\210\000\000\017\186\006\249\002\250\000\000\003r\003v\0026\000\000\000\000\003z\000\000\002\254\000\000\003\150\000\000\017N\000\000\003\202\003\206\004\026\003\210\003\222\003\234\003\242\007\030\000\000\000\000\017\178\002\178\000\000\000\000\003\230\017\202\002B\000\000\bz\b~\b\138\b\158\000\000\005v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\210\000\000\t\018\000\000\t%\000\000\000\000\000\000\000\000\t\030\t6\t\130\005\130\005\134\017\230\018\"\000\000\000\000\004}\004}\000\000\000\000\000\000\006\178\004\t\000\000\t%\000\000\000\000\002F\012\217\012\197\000\000\000\000\018^\022Z\005\138\b\146\016\166\000\173\000\000\b\170\004r\t\150\000\173\000\000\002\190\000\173\000\000\002\138\012\217\t\190\000\000\002&\002\246\000\000\002*\000\173\000\000\000\173\000\000\000\173\000\000\000\173\001\210\000\238\t\246\000\000\002\250\0026\000\000\000\000\002>\012\197\t\254\000\173\000\000\002\254\000\000\003\150\000\000\000\173\000\000\000\000\000\000\000\173\000\000\003\222\001\190\015\190\000\173\000\000\002\138\000\173\002\178\004\t\002B\003\230\000\173\000\173\000\173\bz\b~\b\138\000\000\012\166\005v\000\173\000\173\006F\022\002\000\000\005\234\tR\000\173\000\000\000\000\t%\000\173\006f\000\000\000\000\000\000\006r\000\000\000\000\005\130\005\134\000\173\000\173\015\194\000\000\000\173\000\173\000\000\000\000\000\000\000\000\000\000\000\000\002F\000\000\000\173\000\000\015\206\000\000\022&\000\000\000\173\000\173\005\138\b\146\000\000\000\000\000\197\b\170\004r\000\000\000\173\000\197\000\173\002\190\000\197\000\000\002\138\000\000\t\190\000\000\000\000\002\246\005\134\000\000\000\197\000\000\000\197\000\000\000\197\000\000\000\197\001\210\0222\t\246\000\000\002\250\000\000\000\000\000\000\000\000\000\000\t\254\000\197\000\000\002\254\000\000\003\150\000\000\000\197\021\198\000\000\000\000\000\197\000\000\003\222\001\190\000\000\000\197\000\000\000\000\000\197\002\178\000\000\000\000\003\230\000\197\000\197\000\197\bz\b~\b\138\000\000\012\166\005v\000\197\000\197\000\000\000\000\000\000\000\000\000\000\000\197\000\000\000\000\000\000\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\130\005\134\000\197\000\197\000\000\000\000\000\197\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\197\000\000\000\000\000\000\000\000\000\000\000\197\000\197\005\138\b\146\000\000\000\000\000\000\b\170\004r\000\000\000\197\000\000\000\197\000\014\000\018\000\022\000\026\000\030\000\000\000\"\000&\000*\000.\0002\000\000\0006\000:\000\000\000\000\000>\016\210\000\000\000\000\000B\000\000\015\190\000\000\002\014\002\138\000\000\000F\000\000\000\000\000\000\000\000\000\000\000J\002\018\000N\000R\000V\000Z\000^\000b\000f\001\210\000\000\000\000\000j\000n\000\000\000r\000\000\000v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003R\000\000\000\000\000\000\015\194\000z\007J\001\222\000~\000\130\000\000\000\000\000\000\002\178\000\000\000\134\000\138\000\142\015\206\000\000\022\006\000\000\000\000\000\146\000\150\000\154\000\158\000\000\000\162\000\166\000\170\000\000\001\r\000\000\000\174\000\178\000\182\001\r\000\000\000\000\000\186\007N\000\190\000\194\005\134\000\000\000\000\000\000\000\000\000\000\000\198\000\000\000\202\000\000\022\018\000\000\001\r\003\217\000\206\000\210\000\000\000\214\003\217\003\014\002\190\003\217\000\000\002\138\000\000\006\238\000\000\021\198\002\246\000\000\000\000\003\217\000\000\000\000\001\r\003\217\003\n\
         \003\217\001\210\007\193\007\014\000\000\001\r\000\000\000\000\003\018\000\000\001\r\tB\003\217\000\000\n\
         \217\000\000\000\000\000\000\003\217\001\r\001\r\003\030\000\000\000\000\0116\001\190\000\000\003\217\000\000\000\000\003\217\002\178\007\193\000\000\003\246\003\217\003\217\n\
         \213\003\250\000\000\004\002\000\000\011F\005v\n\
         \217\001\r\007\193\000\000\000\000\007\193\t\006\003\217\003\217\000\000\001\r\005z\007\193\000\000\n\
         \217\000\000\007\193\n\
         \217\011\194\005\130\005\134\003\217\003\217\011N\n\
         \217\003\217\003\217\000\000\n\
         \217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\
         \213\t\202\000\000\n\
         \213\011v\003\217\005\138\000\000\000\000\000\000\n\
         \213\000\000\004r\t\017\n\
         \213\000\006\003\217\000\000\000\246\002\186\002\190\002\194\002\234\002\138\000\000\000\000\000\000\000\000\002\246\000\000\000\000\004\157\000\000\t\017\000\000\t\017\t\017\003n\001\210\000\000\000\000\000\000\002\250\000\000\003r\003v\000\000\000\000\000\000\003z\000\000\002\254\000\000\003\150\000\000\017N\000\000\003\202\003\206\000\000\003\210\003\222\003\234\003\242\007\030\000\000\000\000\017\178\002\178\000\000\000\000\003\230\017\202\000\000\000\000\bz\b~\b\138\b\158\000\000\005v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\210\000\000\t\018\000\000\028n\000\000\000\000\000\000\000\000\t\030\t6\t\130\005\130\005\134\017\230\018\"\000\000\000\006\028\143\015\022\000\246\002\186\002\190\002\194\002\234\002\138\000\000\000\000\000\000\000\000\002\246\000\000\000\000\028\190\000\000\022Z\005\138\b\146\t\017\003n\001\210\b\170\004r\t\150\002\250\000\000\003r\003v\000\000\000\000\000\000\003z\000\000\002\254\000\000\003\150\000\000\017N\000\000\003\202\003\206\000\000\003\210\003\222\003\234\003\242\007\030\000\000\017\014\017\178\002\178\000\000\000\000\003\230\017\202\002\014\000\000\bz\b~\b\138\b\158\000\000\005v\000\000\000\000\002\018\000\000\000\000\000\000\000\000\017\210\000\000\t\018\001\210\028n\000\000\000\000\000\000\000\000\t\030\t6\t\130\005\130\005\134\017\230\018\"\000\000\000\000\004\165\000\000\003R\000\000\000\000\000\000\001\006\000\000\007J\001\222\000\000\000\000\003\014\002\190\006\014\002\178\002\138\022Z\005\138\b\146\014\150\002\246\001\n\
         \b\170\004r\t\150\002\150\000\000\000\000\000\000\000\000\001\210\000\000\000\000\000\000\001\014\001\018\001\022\003.\001\030\001\"\000\000\000\000\007N\000\000\000\000\002\217\000\000\0032\002\217\001.\006.\000\000\000\000\003*\001\190\0016\002\217\000\000\001:\000\000\002\178\000\000\000\000\003\246\000\000\000\000\002\217\003\250\000\000\004\002\005j\000\n\
         \005v\000\000\002\217\001>\001B\001F\001J\001N\000\000\000\000\000\n\
         \001R\005z\000\000\002\217\001V\000\000\000\000\000\000\002\217\005\130\005\134\000\000\005\202\001Z\002\217\002\217\002\217\002\217\000\000\001^\000\000\002\217\000\000\000\000\000\000\000\000\000\000\002\217\000\000\001\154\0062\000\000\000\000\005\138\000\000\000\000\001\158\000\000\001\162\004r\001\006\000\000\001\166\002\217\001\170\001\174\003\014\002\190\tr\002\217\002\138\000\000\000\000\000\000\000\000\002\246\001\n\
         \000\000\000\000\000\000\002\150\000\000\000\000\000\000\000\000\001\210\000\000\000\000\000\000\001\014\001\018\001\022\003.\001\030\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0032\000\000\001.\006.\000\000\000\000\003*\001\190\0016\000\000\000\000\001:\000\000\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\001>\001B\001F\001J\001N\000\000\000\000\000\000\001R\005z\000\000\000\000\001V\000\000\000\000\000\000\000\000\005\130\005\134\000\000\005\202\001Z\000\000\000\000\000\000\000\000\000\000\001^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\154\0062\000\000\000\000\005\138\000\000\000\000\001\158\000\000\001\162\004r\001\006\000\000\001\166\000\000\001\170\001\174\003\014\002\190\011:\000\000\002\138\000\000\000\000\000\000\000\000\002\246\001\n\
         \000\000\000\000\000\000\002\150\000\000\000\000\000\000\000\000\001\210\000\000\000\000\000\000\001\014\001\018\001\022\003.\001\030\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0032\000\000\001.\006.\000\000\000\000\003*\001\190\0016\000\000\000\000\001:\000\000\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\001>\001B\001F\001J\001N\000\000\000\000\000\000\001R\005z\000\000\000\000\001V\000\000\000\000\000\000\000\000\005\130\005\134\000\000\005\202\001Z\000\000\000\000\000\000\000\000\000\000\001^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\154\0062\000\000\000\000\005\138\000\000\000\000\001\158\000\000\001\162\004r\001\006\000\000\001\166\000\000\001\170\001\174\003\014\002\190\r\230\000\000\002\138\000\000\000\000\000\000\000\000\002\246\001\n\
         \000\000\000\000\000\000\002\150\000\000\000\000\000\000\000\000\001\210\000\000\000\000\000\000\001\014\001\018\001\022\003.\001\030\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0032\000\000\001.\006.\000\000\000\000\003*\001\190\0016\000\000\000\000\001:\000\000\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\001>\001B\001F\001J\001N\000\000\000\000\000\000\001R\005z\000\000\000\000\001V\000\000\000\000\000\000\000\000\005\130\005\134\000\000\005\202\001Z\000\000\000\000\000\000\000\000\000\000\001^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\154\0062\000\000\000\000\005\138\000\000\000\000\001\158\000\000\001\162\004r\000\000\005\r\001\166\000\000\001\170\001\174\005\r\005\r\005\r\005\r\001\197\005\r\000\000\005\r\005\r\001\197\000\000\005\r\000\000\005\r\000\000\005\r\005\r\005\r\005\r\005\r\005\r\000\000\005\r\005\r\005\r\000\000\000\000\000\000\001\197\000\000\000\000\005\r\000\000\000\000\000\000\000\000\005\r\005\r\005\r\000\000\000\000\000\000\005\r\005\r\005\r\000\000\005\r\000\000\000\000\005\r\001\197\005\r\000\000\000\000\005\r\005\r\005\r\000\000\001\197\005\r\005\r\005\r\000\000\001\197\001\197\000\238\000\000\000\000\005\r\005\r\005\r\000\000\001\197\001\197\005\r\005\r\000\000\000\000\000\000\005\r\000\000\000\000\005\r\000\000\005\r\005\r\005\r\000\000\005\r\005\r\005\r\005\r\000\000\005\r\005\r\000\000\000\000\000\000\001\197\000\000\000\000\t2\000\000\005\r\020\214\005\r\005\r\001\197\000\000\002\158\005\r\000\000\000\000\000\000\000\000\005\r\005\r\n\
         \241\000\000\005\r\n\
         \241\005\r\005\r\n\
         \241\n\
         \241\012\217\012\197\n\
         \241\000\000\n\
         \241\000\000\000\000\n\
         \241\000\000\000\000\000\000\n\
         \241\n\
         \241\000\000\n\
         \241\n\
         \241\014&\n\
         \241\000\000\n\
         \241\012\217\017\030\000\000\002&\n\
         \241\000\000\002*\n\
         \241\002\014\000\000\000\000\000\000\000\000\0022\000\238\n\
         \241\000\000\n\
         \241\002\018\0026\n\
         \241\n\
         \241\002>\012\197\000\000\000\000\001\210\n\
         \241\000\000\000\000\n\
         \241\000\000\000\000\n\
         \241\n\
         \241\000\000\n\
         \241\000\000\n\
         \241\n\
         \241\000\000\000\000\000\000\003R\000\000\000\000\002B\000\000\000\000\007J\001\222\n\
         \241\000\000\000\000\000\000\000\000\002\178\000\000\006F\n\
         \241\n\
         \241\005\234\000\000\n\
         \241\000\000\n\
         \241\000\000\000\000\006f\000\000\005\166\000\000\006r\000\000\000\000\001\202\001\206\n\
         \241\n\
         \241\000\000\n\
         \241\n\
         \241\000\000\n\
         \241\007N\n\
         \241\000\000\n\
         \241\000\000\n\
         \241\002F\n\
         \241\b\253\b\253\001\210\001\250\001\230\b\253\000\000\001\206\b\253\000\000\000\000\000\000\001\242\000\000\000\000\019z\b\253\000\000\b\253\b\253\b\253\000\000\b\253\b\253\b\253\001\246\020\210\000\000\019\242\000\000\002\166\000\000\002\178\004\030\004*\000\000\b\253\000\000\000\000\020\226\000\000\000\000\b\253\b\253\000\000\000\000\b\253\000\000\000\000\002\162\000\000\b\253\000\000\000\000\b\253\000\000\004:\000\000\000\000\b\253\b\253\b\253\000\000\000\000\000\000\000\000\000\000\000\000\b\253\b\253\000\000\000\000\000\000\000\000\000\000\b\253\000\000\000\000\000\000\004\154\000\000\000\000\b\253\000\000\000\000\000\000\000\000\000\000\000\000\b\253\b\253\b\253\000\000\b\253\b\253\000\000\004i\000\000\000\000\000\000\000\000\004i\000\000\b\253\004i\b\253\b\253\000\000\000\000\000\000\b\253\000\000\000\000\000\000\004i\b\253\000\000\000\000\004i\b\253\004i\b\253\b\253\012\153\012\153\000\000\000\000\004i\012\153\000\000\001\206\012\153\004i\000\000\000\000\000\000\000\000\000\000\004i\004\186\000\000\012\153\012\153\012\153\004B\012\153\012\153\012\153\000\000\000\000\004i\004i\000\000\000\000\000\000\004i\002\226\000\000\000\000\012\153\000\000\000\000\000\000\000\000\000\000\012\153\012\153\000\000\000\000\012\153\000\000\004i\002\162\004i\012\153\000\000\000\000\012\153\000\000\000\000\000\000\004i\012\153\012\153\012\153\004i\004i\002\226\000\238\004i\004i\012\153\012\153\000\000\000\000\004R\004i\000\000\012\153\000\000\000\000\000\000\004\154\000\000\000\000\012\153\004i\000\000\000\000\000\000\000\000\021\218\012\153\012\153\012\153\000\000\012\153\012\153\000\000\007\t\000\000\004i\000\000\000\000\007\t\000\000\012\153\007\t\012\153\012\153\004i\000\000\000\000\012\153\000\000\000\000\000\000\007\t\012\153\000\000\000\000\007\t\012\153\007\t\012\153\012\153\t\001\t\001\000\000\000\000\000\000\t\001\000\000\001\206\t\001\007\t\000\000\000\000\000\000\000\000\000\000\007\t\t\001\000\000\t\001\t\001\t\001\000\000\t\001\t\001\t\001\000\000\000\000\007\t\000\000\000\000\000\000\000\000\007\t\007\t\000\000\000\000\t\001\000\000\000\000\000\000\000\000\000\000\t\001\t\001\000\000\000\000\t\001\000\000\007\t\002\162\000\000\t\001\000\000\000\000\t\001\000\000\000\000\000\000\000\000\t\001\t\001\t\001\007\t\007\t\017b\000\000\007\t\007\t\t\001\t\001\002\217\000\000\000\000\000\000\000\000\t\001\000\000\002\217\000\000\004\154\018\162\000\000\t\001\007\t\000\000\000\000\000\000\000\000\002\217\t\001\t\001\t\001\000\000\t\001\t\001\000\000\000\n\
         \000\000\002\217\002\217\000\000\000\000\002\217\t\001\002\217\t\001\t\001\002\217\002\217\002\217\t\001\002\217\002\217\002\217\002\217\t\001\000\000\002\217\002\217\t\001\002\217\t\001\t\001\002\217\002\217\000\n\
         \000\000\002\217\002\217\002\217\000\000\002\217\000\n\
         \002\217\002\217\000\n\
         \000\000\002\217\007\"\000\n\
         \002\217\002\217\002\217\000\000\015v\002\217\002\217\002\217\000\000\002\217\002\217\002\217\002\217\002\217\002\217\000\000\002\217\002\217\002\217\002\217\002\217\002\217\000\000\002\217\002\217\002\217\002\217\002\217\002\217\002\217\000\000\002\217\005=\r\025\002\217\000\000\000\000\000\000\000\000\002\217\002\217\002\217\002\217\000\000\000\000\000\000\002\217\002\217\002\217\002\217\002\217\005=\015\178\002\217\000\000\005=\002\217\002\217\000\000\000\000\000\000\000\000\002\217\002\217\000\000\000\n\
         \000\000\002\217\000\000\002\217\000\000\000\000\000\246\002\217\002\217\002\026\000Y\000\000\002\217\002\217\002\217\000Y\003~\000Y\000Y\018b\000\000\002\217\000\000\000\000\000\000\003n\000Y\002\217\000Y\000Y\000\000\000\000\000Y\000Y\000Y\000\000\b\169\018f\000\000\000\000\000\000\000\000\000\000\018\142\r\025\r\025\000Y\000\000\000\000\002\217\000\000\000\000\000Y\000Y\000\000\017\178\000Y\005=\000\000\000Y\017\202\000Y\000\000\r\025\000Y\r\025\000\000\000\000\000\000\000Y\000Y\000Y\005=\000\000\000\000\005=\019&\000\000\000Y\000Y\000\000\000\000\007&\000\000\000\000\000Y\000Y\000\000\000\000\000Y\017\230\019:\000Y\000\000\004q\000\000\000\000\000\000\000\000\000Y\000Y\000Y\000\000\000Y\000Y\000\000\000\000\000\000\006\161\ba\000\000\000\000\000\000\012a\012a\000\000\012a\012a\002F\000\000\000\000\000\000\012a\000\000\000\000\000\000\000\000\006\173\0005\0005\000\000\000\000\012a\0005\0005\0005\012a\000\000\012a\012a\000\000\000\000\000\000\000\000\000\000\012a\000\000\012a\000\000\000\000\000\000\012a\012a\001*\012a\012a\012a\012a\012a\000\000\002\217\000\000\012a\000\000\000\000\012a\000\000\002\217\000\000\012a\012a\012a\012a\000\000\012a\000\000\000\000\000\000\002\217\000\000\000\000\000\000\000\000\000\000\012a\000\000\000\n\
         \000\000\000\000\000\000\000\000\012a\012a\012a\012a\012a\000\000\006\169\000\000\012]\000\000\002\217\000\000\012]\012]\000\000\012]\012]\002\217\000\000\000\000\000\000\012]\000\000\002\217\000\000\000\000\006\169\012a\012a\000\000\000\000\012]\012a\012a\012ar\003v\000\000\000\000\000\000\000\000\000\000\002\254\000\000\003\150\000\000\000\000\000\000\003\202\003\206\006\241\003\210\003\222\003\234\003\242\007\030\000\000\000\000\006\241\002\178\000\000\000\000\003\230\006\241\006\241\000\238\bz\b~\b\138\b\158\000\000\005v\006\241\006\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\018\000\000\000\000\000\000\000\000\000\000\000\000\t\030\t6\t\130\005\130\005\134\000\000\000\000\000\000\000\000\000\000\006\241\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\006\241\002\186\002\190\000\000\002\234\002\138\000\000\000\000\005\138\b\146\002\246\000\000\000\000\b\170\004r\t\150\024z\014\170\000\000\000\000\001\210\000\000\000\000\000\000\002\250\000\000\003r\003v\000\000\000\000\000\000\r%\000\000\002\254\000\000\003\150\r%\000\000\000\000\003\202\003\206\000\000\003\210\003\222\003\234\003\242\007\030\000\000\000\000\000\000\002\178\000\000\000\000\003\230\000\000\r%\000\000\bz\b~\b\138\b\158\000\000\005v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005A\r\025\t\018\000\000\000\000\000\000\000\000\r%\000\000\t\030\t6\t\130\005\130\005\134\000\000\r%\000\000\000\000\000\000\005A\r%\r%\000\238\005A\000\000\000\000\003\021\003\021\000\000\r%\r%\003\021\000\000\000\000\003\021\000\000\005\138\b\146\000\000\000\000\000\000\b\170\004r\t\150\003\021\003\021\003\021\000\000\003\021\003\021\003\021\000\000\000\000\000\000\000\000\r%\000\000\000\000\000\000\000\000\000\000\000\000\003\021\000\000\r%\000\000\000\000\000\000\003\021\004\130\000\000\000\000\003\021\000\000\000\000\000\000\000\000\003\021\r\025\r\025\003\021\000\000\000\000\000\000\000\000\003\021\003\021\003\021\000\000\000\000\000\000\005A\000\000\000\000\003\021\003\021\000\000\r\025\000\000\r\025\000\000\003\021\000\000\000\000\000\000\003\021\005A\000\000\003\021\005A\000\000\000\000\000\000\000\000\000\000\003\021\003\021\003\021\004\141\003\021\003\021\000\000\000\000\019\146\000\000\000\000\000\000\000\000\000\000\003\021\000\000\003\021\003\021\000\000\000\000\000\000\003\021\000\000\000\000\000\000\000\000\003\021\003n\n\
         \253\000\000\003\021\n\
         \253\003\021\003\021\003\014\002\190\000\000\000\000\002\138\000\000\006\238\000\000\000\000\002\246\000\000\000\000\000\000\n\
         \253\n\
         \253\019\190\n\
         \253\n\
         \253\000\000\001\210\000\000\007\014\000\000\017\178\000\000\000\000\003\018\000\000\017\202\tB\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\
         \253\019\234\003\030\000\000\000\000\003*\001\190\000\000\000\000\000\000\000\000\000\000\002\178\000\000\000\000\003\246\000\000\000\000\n\
         \253\003\250\000\000\004\002\005j\011F\005v\000\000\004\141\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020N\005z\001\202\001\206\000\000\000\000\000\000\000\000\000\000\005\130\005\134\000\000\005\202\n\
         \253\000\000\n\
         \253\000\000\000\000\000\000\000\000\000\000\001\210\001\250\000\000\000\000\000\000\000\000\n\
         \253\000\000\000\000\n\
         \253\n\
         \253\000\000\005\138\000\000\n\
         \253\000\000\n\
         \253\000\000\004r\n\
         \249\n\
         \253\000\000\n\
         \249\001\246\002\170\003\014\002\190\000\000\002\166\002\138\002\178\004\030\004*\000\000\002\246\000\000\000\000\0046\n\
         \249\n\
         \249\000\000\n\
         \249\n\
         \249\000\000\001\210\000\000\000\000\000\000\000\000\000\000\000\000\003\018\000\000\000\000\004:\000\000\000\000\026\138\000\000\000\000\000\000\000\000\n\
         \249\000\000\003\030\000\000\000\000\006\n\
         \001\190\000\000\000\000\000\000\000\000\026v\002\178\000\000\000\000\003\246\000\000\000\000\n\
         \249\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005z\000\000\012}\000\000\000\000\012}\000\000\000\000\005\130\005\134\000\000\005\202\n\
         \249\000\000\n\
         \249\012}\000\000\000\000\000\000\000\000\000\000\012}\000\000\001\221\001\221\000\000\n\
         \249\000\000\001\221\n\
         \249\n\
         \249\001\221\005\138\012}\n\
         \249\000\000\n\
         \249\000\000\004r\012}\n\
         \249\001\221\001\221\001\221\000\000\001\221\001\221\001\221\012}\000\000\000\000\012}\000\000\000\000\000\000\000\000\012}\000\000\000\000\001\221\000\000\000\000\000\000\000\000\000\000\001\221\001\221\000\000\000\000\001\221\000\000\000\000\012}\000\000\001\221\000\000\012}\001\221\000\000\000\000\000\000\000\000\001\221\001\221\001\221\000\000\012}\012}\000\000\000\000\012}\001\221\001\221\000\000\000\000\000\000\028f\000\000\001\221\004\149\000\000\000\000\001\221\000\000\022\130\001\221\000\000\012}\000\000\000\000\000\000\000\000\001\221\001\221\001\221\000\000\001\221\001\221\000\000\000\000\000\000\000\000\000\000\003n\000\000\000\000\001\221\000\000\001\221\001\221\003\014\002\190\000\000\001\221\002\138\000\000\006\238\000\000\001\221\002\246\000\000\000\000\004\254\000\000\001\221\022\242\000\000\000\000\000\000\001\210\000\000\007\014\000\000\017\178\000\000\000\000\003\018\000\000\017\202\tB\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\150\023\166\003\030\000\000\000\000\0116\001\190\000\000\000\000\000\000\000\000\000\000\002\178\000\000\000\000\003\246\000\000\000\000\n\
         \213\003\250\000\000\004\002\000\000\011F\005v\000\000\004\149\000\000\000\000\000\000\000\000\000\000\000\000\004\021\000\000\024\154\005z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\130\005\134\000\000\000\000\011N\005\141\005\141\000\000\000\000\000\000\005\141\000\000\000\000\005\141\000\000\000\000\000\000\000\000\n\
         \213\000\000\000\000\n\
         \213\n\
         \213\005\141\005\138\005\141\000\000\005\141\n\
         \213\005\141\004r\000\000\n\
         \213\004\021\000\000\000\000\000\000\000\000\000\000\000\246\000\000\005\141\002\194\000\000\000\000\000\000\000\000\005\141\005\141\000\000\000\000\000\000\028\190\005\141\000\000\000\000\005\141\000\000\003n\005\141\000\000\000\000\000\000\000\000\005\141\005\141\005\141\000\000\000\000\000\000\003z\000\000\000\000\000\000\000\000\000\000\017N\000\000\000\000\000\000\005\141\005\141\000\000\000\000\005\141\025\026\000\000\001\006\017\178\000\000\000\000\000\000\000\000\017\202\005\141\005\141\005\141\000\000\005\141\005\141\000\000\000\000\000\000\001\n\
         \007\246\000\000\000\000\002\150\000\000\017\210\000\000\005\141\000\000\028nb>\000\000\000\000\005\129\000\000\000\000\005\129\000\000\000\000\000\000\000\000\005\129\005\129\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\129\005\129\000\000\000\000\005\129\000\000\t\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\129\005\129\005\129\000\000\005\129\005\129\000\000\000\000\n\
         R\000\000\000\000\012z\t\r\000\000\t\r\t\r\000\000\005\129\000\000\000\000\005\129\005\129\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\000\000\001\202\002\134\000\000\005\129\002\138\000\000\000\000\n\
         \186\n\
         \194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\
         \202\000\000\000\000\001\210\001\250\001\230\002\142\000\000\000\238\000\000\000\000\000\000\000\000\001\242\001\006\000\000\000\000\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\000\000\000\000\000\000\000\000\002\146\002\154\000\000\n\
         \242\001\n\
         \002\166\000\000\002\178\004\030\004*\000\000\000\000\n\
         \250\000\000\021\178\000\000\021\182\001\014\001\018\001\022\001\026\001\030\001\"\000\000\000\000\000\000\011\026\000\000\011\"\n\
         \226\001&\004:\001.\0012\t\r\011\002\000\000\000\000\0016\000\000\005\134\001:\000\000\011\n\
         \011\018\000\000\000\000\000\000\000\000\000\000\021\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001>\001B\001F\001J\001N\000\000\b\137\b\137\001R\021\198\000\000\b\137\001V\000\000\b\137\000\000\000\000\000\000\000\000\000\000\000\000\001Z\000\000\000\000\b\137\000\000\b\137\001^\b\137\000\000\b\137\000\000\000\000\000\000\000\000\000\000\000\000\001\154\027\190\000\000\000\000\000\000\b\137\000\000\001\158\000\000\001\162\000\000\b\137\b\137\001\166\000\000\001\170\001\174\000\000\000\000\000\000\b\137\000\000\000\000\b\137\000\000\000\000\000\000\000\000\b\137\b\137\b\137\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\137\000\000\000\000\000\000\b\137\re\re\000\000\000\000\000\000\re\000\000\000\000\re\b\137\b\137\b\137\000\000\b\137\b\137\000\000\000\000\000\000\re\000\000\re\000\000\re\b\137\re\000\000\b\137\001\202\001\206\000\000\b\137\000\000\000\000\000\000\000\000\000\000\re\000\000\000\000\004\254\000\000\b\137\re\re\ri\ri\001\210\001\250\004B\ri\000\000\re\ri\000\000\re\000\000\000\000\000\000\000\000\re\re\re\ri\000\000\ri\000\000\ri\000\000\ri\001\246\002\162\000\000\000\000\000\000\002\166\re\002\178\004\030\004*\re\ri\000\000\000\000\0046\000\000\015\218\ri\ri\000\000\re\re\re\004B\re\re\ri\000\000\000\000\ri\004R\004:\000\000\000\000\ri\ri\ri\re\000\000\000\000\000\000\re\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\ri\000\000\re\000\000\ri\001\205\000\000\000\000\000\000\000\000\001\205\000\000\001\206\001\205\ri\ri\ri\000\000\ri\ri\000\000\b\233\000\000\001\205\004R\000\000\000\000\001\205\004i\001\205\000\000\ri\000\000\004i\000\000\ri\000\000\000\000\000\000\000\000\000\000\001\205\000\000\000\000\000\000\000\000\ri\001\205\001\205\000\000\000\000\000\000\004i\000\000\002\162\000\000\001\205\000\000\000\000\001\205\000\000\000\000\000\000\000\000\001\205\001\205\001\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004i\000\000\000\000\000\000\000\000\000\000\001\205\001\205\004i\000\000\004\154\003A\000\000\004i\002\226\000\000\003A\000\000\001\206\003A\001\205\001\205\004i\004i\001\205\001\205\000\000\b\229\000\000\003A\000\000\000\000\000\000\003A\001\205\003A\000\000\000\000\000\000\000\000\000\000\001\205\000\000\000\000\000\000\000\000\001\205\003A\004i\000\000\000\000\000\000\001\205\003A\001\201\000\000\000\000\004i\000\000\000\000\002\162\000\000\003A\000\000\000\000\003A\000\000\000\000\000\000\000\000\003A\003A\003A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003A\003A\000\000\000\000\004\154\003=\000\000\000\000\000\000\000\000\003=\000\000\001\206\003=\003A\003A\000\000\000\000\003A\003A\000\000\bra\ra\000\000\000\000\000\000\ra\000\000\000\000\ra\001\169\001\169\000\000\000\000\001\169\001\169\000\000\001\210\001\214\ra\005\021\ra\000\000\ra\001\169\ra\000\000\000\000\000\000\000\000\001\169\001\169\000\000\000\000\000\000\000\000\001\169\ra\000\000\000\000\001\246\002\162\001\169\ra\ra\002\166\000\000\002\178\004\030\004*\000\000\000\000\ra\000\000\0046\ra\015\218\000\000\000\000\000\000\ra\ra\ra\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004:\000\000\000\000\000\000\000\000\ra\000\000\000\000\000\000\ra\r]\r]\000\000\000\000\000\000\r]\000\000\000\000\r]\ra\ra\ra\000\000\ra\ra\000\000\000\000\000\000\r]\000\000\r]\000\000\r]\000\000\r]\000\000\ra\000\000\000\000\000\000\ra\000\000\000\000\000\000\000\000\000\000\r]\000\000\000\000\004\254\000\000\ra\r]\r]\000\000\000\000\000\000\000\000\000\000\000\000\004q\r]\000\000\000\000\r]\000\246\000\000\000\000\002\026\r]\r]\r]\000\000\000\000\000\000\000\000\000\000\000\000\018b\000\000\000\000\000\000\004q\000\000\003n\r]\000\000\b\141\b\141\r]\000\000\000\000\b\141\000\000\000\000\b\141\018f\000\000\000\000\r]\r]\r]\018\142\r]\r]\b\141\000\000\b\141\000\000\b\141\000\000\b\141\000\000\007\146\017\178\000\000\r]\000\000\000\000\017\202\r]\000\000\000\000\b\141\000\000\000\000\000\000\000\000\000\000\b\141\b\141\r]\000\000\000\000\000\000\019&\000\000\000\000\b\141\000\000\000\000\b\141\000\000\000\000\000\000\000\000\b\141\b\141\000\238\017\230\019:\000\000\000\000\004q\004q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\141\000\000\000\000\000\000\b\141\000\000\007\005\000\000\019J\000\000\000\000\000\000\000\000\000\000\b\141\b\141\b\141\000\000\b\141\b\141\000\000\000\000\n\
         R\000\000\000\000\007\005\000\000\000\000\b\141\007\005\000\000\b\141\000\000\000\000\000\000\b\141\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\000\000\000\000\000\000\000\000\000\000\b\141\001\201\000\000\000\000\n\
         \186\n\
         \194\001\201\000\000\001\206\001\201\000\000\000\000\000\000\n\
         \202\000\000\000\000\000\000\b\229\000\000\001\201\000\000\000\238\000\000\001\201\000\000\001\201\000\000\000\000\000\000\000\000\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\000\000\000\000\001\201\000\000\000\000\000\000\007\005\n\
         \242\001\201\000\000\000\000\000\000\000\000\000\000\000\000\002\162\n\
         \250\001\201\000\000\000\000\001\201\000\000\000\000\000\000\000\000\001\201\001\201\001\201\000\000\000\000\011\026\000\000\011\"\n\
         \226\000\000\000\000\000\000\000\000\000\000\011\002\000\000\001\201\001\201\000\000\000\000\004\154\000\000\011\n\
         \011\018\000\000\000\000\000\000\017\002\000\000\000\000\001\201\001\201\000\000\000\000\001\201\001\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\
         R\001\201\000\000\000\000\017\006\000\000\000\000\000\000\001\201\000\000\000\000\000\000\000\000\001\201\n\
         \138\n\
         \162\n\
         \170\n\
         \146\n\
         \178\001\201\000\000\000\000\000\000\000\000\000\000\006V\000\000\000\000\n\
         \186\n\
         \194\000\246\001\202\001\206\002\026\000\000\000\000\000\000\n\
         \202\000\000\000\000\000\000\000\000\000\000\018b\000\000\000\238\000\000\004q\000\000\003n\001\210\001\250\001\230\000\000\n\
         Z\n\
         \154\n\
         \210\n\
         \218\n\
         \234\000\000\001\242\018f\000\000\000\000\000\000\000\000\n\
         \242\018\142\000\000\000\000\000\000\000\000\000\000\001\246\002\154\n\
         \250\000\000\000\000\002\166\017\178\002\178\004\030\004*\000\000\017\202\000\000\000\000\0046\000\000\011\026\017\n\
         \011\"\n\
         \226\017\026\000\000\000\000\000\000\000\000\011\002\000\000\019&\000\000\000\000\000\000\004:\000\000\011\n\
         \011\018\005\185\005\185\000\000\000\000\000\000\005\185\017\230\019:\005\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\185\000\000\005\185\000\000\005\185\000\000\005\185\000\000\000\000\019J\000\000\000\000\000\000\000\000\004n\000\000\004r\000\000\005\185\000\000\000\000\000\000\000\000\000\000\005\185\005\185\005\181\007f\000\000\000\000\brm\rm\000\000\000\000\000\000\rm\000\000\000\000\rm\005\181\005\181\005\181\000\000\005\181\005\181\000\000\000\000\000\000\rm\000\000\rm\t\218\rm\000\000\rm\000\000\005\181\001\202\001\206\011z\005\181\000\000\000\000\000\000\000\000\000\000\rm\000\000\000\000\000\000\000\000\005\181\rm\rm\rq\rq\001\210\001\214\001\230\rq\000\000\rm\rq\000\000\rm\000\000\001\242\000\000\000\000\rm\rm\000\238\rq\000\000\rq\000\000\rq\000\000\rq\001\246\002\154\000\000\000\000\000\000\002\166\rm\002\178\004\030\004*\rm\rq\000\000\000\000\0046\000\000\000\000\rq\007\226\000\000\rm\rm\rm\000\000\rm\rm\rq\000\000\000\000\rq\000\000\004:\000\000\000\000\rq\rq\000\238\rm\000\000\000\000\000\000\rm\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rq\000\000\rm\000\000\rq\005\205\007f\000\000\000\000\000\000\005\205\000\000\000\000\005\205\rq\rq\rq\000\000\rq\rq\000\000\000\000\000\000\005\205\000\000\005\205\000\000\005\205\000\000\005\205\000\000\rq\006\221\006\221\000\000\rq\000\000\000\000\000\000\000\000\000\000\005\205\000\000\000\000\000\000\000\000\rqn\001\210\000\000\007\014\000\000\000\000\000\000\b\n\
         \003\018\000\000\000\000\tB\003z\000\000\000\000\000\000\000\000\000\000\017N\000\000\000\000\003\030\000\000\000\000\0116\001\190\000\000\025\026\000\000\000\000\017\178\002\178\000\000\000\000\003\246\017\202\000\000\000\000\003\250\000\000\004\002\000\000\011F\005v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\210\0039\000\000\000\000\005z\000\000\0039\000\000\001\206\0039\000\000\000\000\005\130\005\134\017\230\018\"\011N\000\000\000\000\0039\000\000\000\000\000\000\0039\000\000\0039\000\000\000\000\000\000\000\000\000\000\t\202\000\000\000\000\t\214\022Z\005\138\0039\000\000\000\000\000\000\000\000\004rtB\000\000\000\000\000\000\004i\001\213\000\000\000\000\t~\004i\003\030\000\000\004i\r\226\001\190\000\000\001\213\000\000\000\000\000\000\002\178\000\000\004i\003\246\000\000\000\000\004i\003\250\004i\004\002\000\000\011F\005v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004i\000\000\000\000\000\000\005z\000\000\004i\000\000\000\000\000\000\004i\000\000\005\130\005\134\000\000\004i\000\000\000\000\004i\000\000\000\000\000\000\000\000\004i\002\226\000\238\000\000\000\000\000\000\000\000\000\000\000\000\004i\004i\r\242\000\000\005\138\000\000\000\000\004i\004i\b\025\004r\004i\000\000\000\000\b\025\000\000\000\000\b\025\000\000\000\000\000\000\004i\004i\000\000\000\000\004i\004i\b\025\000\000\000\000\000\000\b\025\000\000\b\025\000\000\004i\000\000\000\000\000\000\000\000\000\000\000\000\004i\000\000\000\000\b\025\000\000\025\242\000\000\000\000\000\000\b\025\000\000\004i\000\000\b\025\000\000\000\000\000\000\000\000\b\025\000\000\000\000\b\025\000\000\000\000\000\000\000\000\b\025\b\025\000\238\b\021\000\000\000\000\000\000\000\000\b\021\b\025\b\025\b\021\000\000\000\000\000\000\000\000\b\025\000\000\000\000\000\000\b\025\b\021\000\000\000\000\000\000\b\021\000\000\b\021\000\000\000\000\b\025\b\025\b\025\000\000\b\025\b\025\000\000\000\000\000\000\b\021\000\000\000\000\000\000\000\000\b\025\b\021\000\000\000\000\000\000\b\021\000\000\b\025\000\000\000\000\b\021\000\000\000\000\b\021\000\000\000\000\000\000\000\000\b\021\b\021\000\238\003-\000\000\000\000\000\000\000\000\003-\b\021\b\021\003-\000\000\000\000\000\000\000\000\b\021\000\000\000\000\000\000\b\021\003-\000\000\000\000\000\000\003-\000\000\003-\000\000\000\000\b\021\b\021\b\021\000\000\b\021\b\021\000\000\000\000\000\000\003-\015\214\000\000\000\000\000\000\b\021\003-\000\000\000\000\000\000\000\000\000\000\b\021\000\000\000\000\003-\000\000\000\000\003-\000\000\000\000\000\000\000\000\003-\003-\003-\003\014\002\190\000\000\000\000\002\138\000\000\006\238\000\000\000\000\002\246\000\000\000\000\000\000\003-\000\000\000\000\000\000\003-\000\000\001\210\000\000\007\014\000\000\000\000\000\000\000\000\003\018\003-\003-\tB\000\000\003-\003-\000\000\000\000\000\000\000\000\024\002\000\000\003\030\000\000\003-\003*\001\190\000\000\000\000\000\000\0166\003-\002\178\000\000\000\000\003\246\003-\000\000\000\000\003\250\000\000\004\002\003-\011F\005v\000\000\000\000\000\000\003\014\002\190\000\000\000\000\002\138\000\000\006\238\000\000\005z\002\246\000\000\000\000\000\000\000\000\000\000\000\000\005\130\005\134\000\000\001\210\022r\007\014\000\000\000\000\000\000\000\000\003\018\000\000\000\000\tB\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\206\003\030\005\138\000\000\0116\001\190\000\000\000\000\004r\000\000\000\000\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\000\000\011F\005v\000\000\000\000\000\000\003\014\002\190\000\000\000\000\002\138\000\000\006\238\000\000\005z\002\246\000\000\000\000\000\000\000\000\000\000\000\000\005\130\005\134\000\000\001\210\011N\007\014\000\000\000\000\000\000\000\000\003\018\000\000\000\000\tB\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\n\
         \003\030\005\138\000\000\0116\001\190\000\000\000\000\004r\000\000\000\000\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\005\194\011F\005v\000\000\000\000\000\000\003\014\002\190\000\000\000\000\002\138\000\000\000\000\000\000\005z\002\246\000\000\000\000\000\000\000\000\005\198\000\000\005\130\005\134\000\000\001\210\011N\000\000\000\000\000\000\000\000\000\000\003\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023j\003\030\005\138\000\000\003*\001\190\000\000\000\000\004r\000\000\000\000\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\t)\000\000\000\000\000\000\000\000\000\000\003\014\002\190\000\000\005z\002\138\000\000\000\000\000\000\000\000\002\246\000\000\005\130\005\134\000\000\005\202\000\000\t)\000\000\000\000\001\210\000\000\000\000\000\000\000\000\000\000\000\000\003\018\000\000\000\000\000\000\000\000\000\000\006\134\000\000\000\000\005\138\004Q\004Q\000\000\003\030\004Q\004r\003*\001\190\000\000\004Q\000\000\000\000\000\000\002\178\000\000\004Q\003\246\000\000\000\000\004Q\003\250\000\000\004\002\005j\000\000\005v\004Q\023\186\000\000\000\000\023\210\000\000\000\000\000\000\000\000\000\000\000\000\005z\000\000\004Q\000\000\000\000\004Q\004Q\000\000\005\130\005\134\000\000\005\202\004Q\000\000\000\000\004Q\000\000\000\000\000\238\004Q\000\000\004Q\004Q\000\000\004Q\003-\000\000\000\000\000\000\000\000\003-\000\000\005\138\003-\t)\003-\004Q\000\000\004rrbz\b~\b\138\000\000\000\000\005v\000\000\000\000\000\000\003\014\002\190\000\000\000\000\002\138\000\000\006\238\000\000\000\000\002\246\000\000\000\000\000\000\000\000\000\000\000\000\005\130\005\134\000\000\001\210\000\000\007\014\000\000\000\000\000\000\000\000\003\018\000\000\000\000\tB\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\030\005\138\b\146\tn\001\190\000\000\b\170\004r\000\000\000\000\002\178\000\000\000\000\003\246\000\000\000\000\006\133\003\250\000\000\004\002\000\000\011F\005v\002\190\000\000\000\000\002\138\000\000\000\000\000\000\000\000\002\246\000\000\000\000\005z\000\000\006\133\000\000\000\000\000\000\000\000\001\210\005\130\005\134\000\000\002\250\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\254\000\000\003\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\222\001\190\005\138\000\000\000\000\000\000\000\000\002\178\004r\000\000\003\230\000\000\000\000\000\000\bz\b~\b\138\000\000\000\000\005v\000\000\000\000\000\000\005e\000\000\000\000\000\000\000\000\005e\000\000\000\000\005e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\130\005\134\005e\000\000\000\000\000\000\005e\000\000\005e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005e\000\000\000\000\000\000\005\138\b\146\005e\000\000\005i\b\170\004r\000\000\b>\005i\000\000\005e\005i\000\000\005e\000\000\000\000\000\000\000\000\005e\005e\000\238\005i\000\000\000\000\000\000\005i\000\000\005i\000\000\000\000\000\000\000\000\000\000\000\000\005e\005e\000\000\000\000\005e\005i\000\000\000\000\000\000\000\000\000\000\005i\000\000\000\000\005e\005e\000\000\b>\005e\005e\005i\000\000\000\000\005i\000\000\000\000\000\000\000\000\005i\005i\000\238\000\000\003-\000\000\000\000\005e\000\000\003-\000\000\000\000\003-\000\000\000\000\000\000\005i\005i\005e\000\000\005i\000\000\003-\000\000\000\000\000\000\003-\000\000\003-\000\000\005i\005i\000\000\000\000\005i\005i\000\000\000\000\000\000\000\000\003-\015\214\000\000\000\000\000\000\000\000\003-\000\000\006\021\000\000\000\000\005i\000\000\006\021\000\000\003-\006\021\000\000\003-\000\000\000\000\000\000\005ij\000\000\005v\000\000\005\r\000\000\000\000\000\000\000\000\000\000\012\181\000\000\000\000\000\000\005z\000\000\012\181\000\000\000\000\000\000\000\000\000\000\005\130\005\134\000\000\005\202\000\000\000\000\012\181\000\000\000\000\000\000\000\000\012\181\012\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\138\000\000\006\218\012\181\t*\005\238\004rj\000\000\005v\003\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005z\000\000\003\030\000\000\000\000\003*\001\190\000\000\005\130\005\134\000\000\005\202\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\006j\000\000\000\000\000\000\000\000\005\138\003\014\002\190\000\000\005z\002\138\004r\000\000\000\000\000\000\002\246\000\000\005\130\005\134\000\000\005\202\000\000\006\158\000\000\000\000\001\210\000\000\000\000\000\000\000\000\000\000\000\000\003\018\000\000\000\000\000\000\006a\000\000\000\000\000\000\000\000\005\138\003\014\002\190\000\000\003\030\002\138\004r\003*\001\190\000\000\002\246\000\000\000\000\000\000\002\178\006a\000\000\003\246\000\000\000\000\001\210\003\250\000\000\004\002\005j\000\000\005v\003\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005z\000\000\003\030\000\000\000\000\003*\001\190\000\000\005\130\005\134\000\000\005\202\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\011\226\000\000\000\000\000\000\000\000\005\138\003\014\002\190\000\000\005z\002\138\004r\000\000\000\000\000\000\002\246\000\000\005\130\005\134\000\000\000\000\000\000\000\000\000\000\000\000\001\210\000\000\000\000\000\000\000\000\000\000\000\000\003\018\000\000\000\000\000\000\011\238\000\000\000\000\000\000\000\000\005\138\003\014\002\190\000\000\003\030\002\138\004r\003*\001\190\000\000\002\246\000\000\000\000\000\000\002\178\000\000\000\000\003\246\000\000\000\000\001\210\003\250\000\000\004\002\005j\000\000\005v\003\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005z\000\000\003\030\000\000\000\000\003*\001\190\000\000\005\130\005\134\000\000\005\202\002\178\000\000\000\000\003\246\000\000\000\000\000\000\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\011\250\000\000\000\000\000\000\000\000\005\138\003\014\002\190\000\000\005z\002\138\004r\000\000\000\000\000\000\002\246\000\000\005\130\005\134\000\000\005\202\000\000\000\000\000\000\000\000\001\210\000\000\000\000\000\000\000\000\000\000\000\000\003\018\000\000\000\000\007\r\007f\000\000\000\000\000\000\007\r\005\138\000\000\007\r\000\000\003\030\000\000\004r\003*\001\190\000\000\000\000\000\000\007\r\000\000\002\178\000\000\007\r\003\246\007\r\000\000\000\000\003\250\000\000\004\002\005j\000\000\005v\000\000\000\000\000\000\007\r\000\000\000\000\000\000\000\000\000\000\007\r\007\226\005z\000\000\000\000\000\000\000\000\000\000\000\000\007\r\005\130\005\134\007\r\005\202\000\000\000\000\000\000\007\r\007\r\000\238\001\181\000\000\000\000\000\000\000\000\001\181\000\000\000\000\001\181\000\000\000\000\000\000\000\000\007\r\005\138\000\000\000\000\007\r\001\181\000\000\004r\000\000\001\181\000\000\001\181\000\000\000\000\007\r\007\r\000\000\000\000\007\r\007\r\000\000\000\000\000\000\001\181\000\000\000\000\000\000\000\000\000\000\001\181\000\000\001\217\000\000\000\000\000\000\007\rr\000\000\000\000\006\025\000\000\000\000\012\181\000\000\000\000\000\000\000\000\000\000\012\181\000\000\006\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\181\000\000\000\000\000\000\000\000\012\181\012\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012m\000\000\002\190\012m\000\000\028v\000\000\012\181\000\000\000\000\028z\000\000\000\000\012m\000\000\000\000\000\000\000\000\000\000\012m\000\000\012\181\012\181\002\130\000\000\012\181\012\181\000\000\000\000\000\000\000\000\012m\000\000\004i\007f\012\181\000\000\012m\004i\027\"\000\000\004i\012\181\001\002\001\190\000\000\012m\000\000\000\000\012m\000\000\004i\000\000\012\181\012m\004i\000\000\004i\000\000\000\000\004i\000\000\028~\004i\000\000\000\000\000\000\000\000\000\000\004i\012m\000\000\000\000\004i\012m\004i\007\226\004i\000\000\004i\000\000\000\000\000\000\028\130\012m\012m\000\000\004i\012m\000\000\000\000\004i\004i\002\226\000\238\000\000\000\000\004i\bI\bI\000\000\000\000\bI\b>\000\000\012m\004i\bI\004i\004i\000\000\000\000\000\000\016~\004i\002\226\000\238\bI\000\000\000\000\000\000\000\000\004i\004i\bI\000\000\004i\004i\007f\000\000\004i\000\000\004i\000\000\004i\004i\000\000\bI\000\000\000\000\bI\bI\000\000\004i\004i\004i\000\000\bI\004i\004i\bI\004i\000\000\000\000\bI\000\000\bI\bI\007\146\bI\000\000\000\000\000\000\004i\000\000\004i\000\000\000\000\000\000\004i\007\226\bI\000\000\000\000\000\000\000\000\004i\000\000\000\000\bI\bI\004i\000\000\000\000\000\000\000\000\004i\002\226\000\238\000\000\001q\000\000\000\000\000\000\000\000\001q\000\000\000\000\001q\000\000\000\000\000\000\004i\bI\000\000\000\000\000\000\000\000\001q\bI\001q\000\000\001q\000\000\001q\000\000\004i\004i\000\000\000\000\004i\004i\000\000\000\000\000\000\000\000\001q\000\000\000\000\000\000\000\000\000\000\001q\000\000\000\237\000\000\000\000\004i\000\000\000\237\000\000\000\000\000\237\000\000\001q\000\000\000\000\000\000\004i\001q\001q\000\238\000\237\000\000\000\000\000\000\000\237\000\000\000\237\000\000\000\000\000\000\000\000\000\000\000\000\001q\000\000\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\000\000\000\000\237\000\000\000\000\001q\001q\001q\000\000\001q\001q\000\237\000\000\000\000\000\237\000\000\000\000\000\000\000\000\000\237\000\237\000\238\000\000\000\241\000\000\000\000\001q\000\000\000\241\000\000\000\000\000\241\000\000\000\000\000\000\000\237\000\000\001q\000\000\000\237\000\000\000\241\000\000\000\000\000\000\000\241\000\000\000\241\000\000\000\237\000\237\000\000\000\000\000\237\000\237\000\000\000\000\000\000\000\000\000\241\000\000\000\000\000\000\000\000\000\000\000\241\000\000\007\t\000\000\000\000\000\237\000\000\007\t\000\000\000\241\007\t\000\000\000\241\000\000\000\000\000\000\000\237\000\241\000\241\000\238\007\t\000\000\000\000\000\000\007\t\000\000\007\t\000\000\000\000\000\000\000\000\000\000\000\000\000\241\000\000\000\000\000\000\000\241\007\t\000\000\000\000\000\000\000\000\000\000\007\t\000\000\000\000\000\241\000\241\000\000\000\000\000\241\000\241\007\t\000\000\000\000\007\t\000\000\000\000\000\000\000\000\007\t\007\t\000\000\000\000\006\r\000\000\000\000\000\241\000\000\006\r\000\000\000\000\006\r\000\000\000\000\000\000\007\t\000\000\000\241\018\014\007\t\000\000\006\r\000\000\000\000\000\000\006\r\000\000\006\r\000\000\007\t\007\t\017b\000\000\007\t\007\t\000\000\000\000\000\000\000\000\006\r\000\000\000\000\000\000\000\000\000\000\006\r\000\000\005q\007f\000\000\007\t\000\000\005q\000\000\006\r\005q\000\000\006\r\000\000\000\000\000\000\000\000\006\r\006\r\000\000\005q\000\000\000\000\000\000\005q\000\000\005q\000\000\000\000\000\000\000\000\012\029\000\000\006\r\000\000\000\000\012\029\006\r\005q\012\029\000\000\000\000\000\000\000\000\005q\007\226\000\000\006\r\006\r\012\029\000\000\006\r\006\r\012\029\000\000\012\029\005q\000\000\000\000\000\000\000\000\005q\005q\000\238\000\000\000\000\000\000\012\029\006\r\000\000\000\000\000\000\000\000\012\029\000\000\000\000\000\000\005q\000\000\000\000\001\202\002\134\012\029\000\000\002\138\012\029\000\000\000\000\000\000\000\000\012\029\005q\005q\000\000\000\000\005q\005q\000\000\000\000\001\210\001\250\001\230\000\000\000\000\000\000\000\000\012\029\n\
         F\000\000\001\242\012\029\000\000\005qi\000\000\000\000\020\146\004)\004i\004Y\000\000\004i\004Y\000\000\000\000\000\000\004)\004Y\000\000\004)\000\000\004i\000\000\000\000\004)\004i\000\000\004i\000\000\000\000\000\000\000\000\000\000\004Y\000\000\000\000\000\000\004Y\000\000\004i\004)\000\000\000\000\000\000\004)\004i\000\000\004Y\004Y\000\000\000\000\004Y\004Y\000\000\004)\004)\000\000\004i\004)\004)\000\000\000\000\004i\002\226\000\000\000\000\000\000\000\000\004Y\001\202\001\206\000\000\000\000\000\000\000\000\004)\000\000\000\000\004i\021v\000\000\000\000\000\000\002\150\000\000\000\000\024\238\000\000\001\210\001\250\001\230\000\000\004i\004i\000\000\000\000\004i\004i\001\242\000\000\000\000\000\000\007\246\000\000\000\000\002\002\000\000\006\225\006\225\000\000\000\000\001\246\002\154\004ia\000\000\000\000\000\000\0041\004a\000\000\000\000\004a\004I\000\000\004\"\000\000\006\225\004I\000\000\0041\000\000\004a\000\000\000\000\0041\004a\000\000\004a\000\000\000\000\000\000\000\000\000\000\004I\000\000\000\000\000\000\000\000\000\000\004a\0041\000\000\000\000\000\000\000\000\004a\000\000\004I\004I\000\000\000\000\004I\004I\000\000\0041\0041\000\000\004a\0041\0041\000\000\000\000\004a\t\206\000\000\000\000\000\000\000\000\004I\001\202\001\206\000\000\000\000\000\000\000\000\0041\000\000\000\000\004a\018\222\000\000\000\000\000\000\000\000\000\000\003\254\021\030\000\000\001\210\001\250\001\230\000\000\004a\004a\000\000\000\000\004a\004a\001\242\004}\000\000\000\000\000\000\000\000\000\246\000\000\000\000\002\194\000\000\000\000\000\000\001\246\002\154\004a\000\000\000\000\002\166\003j\002\178\004\030\004*\004}\000\000\003n\021\158\0046\007\149\000\000\000\000\007\149\000\000\000\000\000\000\000\000\000\000\003z\000\000\000\000\000\000\000\000\000\000\017N\004:\000\000\000\000\007\149\007\149\000\000\007\149\007\149\025\026\000\000\000\000\017\178\000\000\000\000\000\000\000\000\017\202\000\000\000\000\000\000\007\169\000\000\000\000\007\169\000\000\000\000\000\000\007\149\000\000\000\000\000\000\000\000\017\210\000\000\000\000\000\000\004n\000\000\004r\007\169\007\169\000\000\007\169\007\169\000\000\007\149\017\230\018\"\000\000\000\000\004}\004}ru\ru\007\129\000\000\007\129\000\000\000\000\000\000\007\129\000\000\007\157\000\000\000\000\007\173\000\000\007\173\000\000\000\000\000\000\ru\ru\ru\007z\000\000\000\000\000\000\000\000\007\173\000\238\ru\005\234\007\173\000\000\000\000\000\000\007\173\000\000\007\173\000\000\t\218\000\000\007\173\ru\ru\000\000\001\202\001\206\ru\000\000\ru\ru\ru\000\000\000\000\000\000\000\000\ru\000\000\007\157\000\000\007\157\000\000\000\000\000\000\001\210\001\250\001\230\000\000\000\000\000\000\000\000\000\000\006F\ru\001\242\005\234\007\157\000\000\000\000\000\000\007\157\000\000\007\157\001\202\001\206\023\014\007\157\001\246\002\154\000\000\000\000\000\000\002\166\000\000\002\178\004\030\004*\000\000\000\000\000\000\000\000\0046\001\210\001\214\001\230\000\000\000\000\000\000\001\202\001\206\023nv\002\178\004\030\004*\000\000\000\000\000\000\000\000\0046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004:\000\000\000\000\004\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026v"
      ) )

  and lhs =
    ( 8,
      "\012\011\n\
       \t\b~~~}}|||||||||{{zzyyyyyyyyyyyxwvuutttttsrrqqppppppppppppppoonnmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmllkkjjiihhggffeeddccbbaaaaaaaaaaa`_^]\\[ZYXWWWWWWWWWWVVVUUUTTTTTSSSSSSSSSRRQQQQQPPOONMLLKKKKKJJIIHHHGGGGGGFFFEEDDCCBBAA@@@??>>==<<;;::9988776655544433322211110/...................-----,,,,,,,+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++**))))))))))))))))))))))(((((((((((((((((((((((((((((((((((((((((((((((((((''&&&%%$$$$$$$$$$$$$$$$##\"\"!!!!!!!    \
       \031\031\030\030\030\030\030\029\029\028\027\026\026\026\025\025\024\024\024\024\024\024\024\024\024\024\023\023\022\022\022\022\021\021\020\019\019\019\019\019\018\017\017\016\016\016\015\015\015\014\014\014\014\014\014\r\r"
    )

  and goto =
    ( ( 16,
        "\000%\001kd\000\000\000\000\000\000\000\159\000\000\000\000\000\000\000\000\000\000\000\000\000\000&\230\000\139\000\000\0001\000&\000\217\000\000\000\234\002\132\000 \
         \000\250\000\025\000\000\000\000\000\000\000|\000\000\000\000\002\132\000\000\000\000\000\000\000\000\001\234\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000H\000\000\002\234\002$\b\"\000\000\000\000\n\
         \226&\230\000\000\000\000\000)\000\000\002z\000\000<\146\000\250\001~\000\000\000\000\000\240\001B\002\188\003\254\004\200\002$\001\236\000\139\002\188\001\200\001\018\002,\011\160\000\0003\178\002 \
         \002p\002\0142\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000#:\000\000\002F\003\234\002\210\000\000\000\000\000\000\000\000\0068\000\000\000\000\004\132\000#\004\252\006d\b\006\000\000\000\000\000\000\002\144\003\000\005\012\001\128\002\224\005\016\001H\003$\005@\000\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\146\000\000\000\000\000\000\003:\005\226\011\208\t\0223\178\012<\000\000\002\234\012\136#\208#\242\000\000\000u\000\000\000\000\000\000\000\000\004P=\166\004f\000\000\007\020\004\146\000\000\026`7\022\000\129\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0002\030\004\174\000\000\000\000\000\000\018\144\000\000\000\234\000\000\000\000\004\218\002(\000\000\000\000\007\158\000\000\031\024\000\000\004\218\000\254\004\218\000\000\000\000\000\000\000\000\000\0007\178\000\000\006f\005\\\000\000\023\252\006\158\028\242\000\000\000\000\000\000\004\236\000\000\000\000\000\000\000\000\004\180\000\000\000\000\000\000\000\000\000\0002p\000\000\000\000\000\000\000\000\000\000\000\000\000@\005~\000\000\000\000\000\000\004\180\005\2022\186\005R\006\188:\218\000\000\005T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\006\1363\026\000\000\000\000\005\142\007.3b\000\000\000\000\000\0003\210\005~42\000\000\005~\000\0004h\005~\000\0004\158#:\006R\006j\000\000\000\000<\226\000\000\000\000\000\000\000\000\000\000\000\000\005~\000\000\000\0004\168\000\000\005~=\198\000\000\004\180\000\000\000\0005\\\000\000\005~\004\014\000\000\000\000\005~\005~\000\000\000\000\005~\000\000\000\000#\242\000\000\000\000\000\000\000\000\005~$\136\000\000\000\000\005~\000\000\001P\006\194\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\004\000\000\006P\000\000>\020\004\180\000\000\000\000\000\000\000\000\006\136\007@\012\144\006\154\006\174\006\190\007\214\004\246\t6\000\015\007`\000\000\000\000\t \
         \tl\t\140\000&\007R\n\
         \210\000\000\004\200\004\174\005\014\000\222\b\190\000\000\000\000,\130\000\0009t\b`\000\000>(\004\180>b\004\180\000\000\000\188\003>\000\000\011\"\004\200\000\000\000\000\007\162\000\000\000\000\000\000\000\000\000\000\012\224\004\200\r\188\004\200\000\000\002\230\000\000\000\000\003\148\000\000\000\000\000\000\b\234\000\000\000\000\000\000\004\200\000\000\000\000\004\200\000\000\007R\0060\000\000\000>\002\224\000\000\000>\000\000\000\000\r\244\004\200\000\000\000\000\000\000\000\000\000\000\000\000\000>\012\210\r&\b\176\bN\004\1404\222\000\000\007\168\t\144\014\004\b$\t\172>\178>\186\000\000\000\000\000\000\000\000\000\000\004T\t\192\000\000\000\000\000\000\bd\t\250\006\198\000>\015j\000\000\004\200\000\000\000\000\000\000\012\136\000\000?\018\004\180\014\012\bz\n\
         \024\014`\b\166\n\
         4\014@$\190\005~\014\246\b\182\n\
         D;,\t\146\000\000\021\014\005~?&\004\180\t\134\000\000\000\000\000\000\000\000#:\t\130\000\0008\018\015\182\t\012\n\
         p5\164\005~\015\214\t:\n\
         v?\164\000\000?\196\000\000\000\000\015\248\006.\007F\000\000\000\000\n\
         \128?\192\000\000\004\180\027\136\000\000\004\180?\236\004\180\000\000\000\000\000\000\000\000\000\000@ \
         \000\000\000\000\000\000\000\252\016\024\000\000\000\000\000\000\000\000$\216@\138\000\000\000\000\000\000\000\000\000\000\t,\016\150\000\000\t^$\226\t^%\194\t^\000\000@\186\000\000&\020\t^\016\216\004T\016\248\000\000\000\000&^\t^&\130\t^&\178\t^'|\t^'\216\t^'\250\t^(\026\t^(z\t^(\196\t^(\228\t^)B\t^)\168\t^*\012\t^*h\t^*\138\t^*\170\t^+T\t^+t\t^+\210\t^,8\t^\n\
         \142\017\\1\172#:\n\
         &\000\000,\218<\236\000\000\017\194\000\000\000\000\018@\000\000\000\000\000\000-\020\000\000\000\000\027\136\n\
         :\000\000@\214\004\180\018\138\000\000\000\000\t\206\000\000@\238\004\180\018\172\000\000\000\000\019\n\
         \000\000\000\000\000\000A\014\004\180\019l\000\000\t\134\019\210\000\0005\230\000\000\005~6\026\000\000\005~6L\000\000\005~\b\022\000\000\000\000\000\000\000\000\000\0006Z\005~\000\000\004,\005\254\000\000\000\000\000\000\t^\020\004\000\000\000\000\000\000\020p\000\000\000\000\000\000\000\000\000\000\020\196\000\000\000\000\000\000\t^\020\234\000\000\021\136\000\000\000\000\000\000\021\170\000\000\000\000\000\000\000\000AL\000\000\000\000\021\220\000\000\000\000\000\000-p\t^\022z\000\000\000\000\000\000-\144\t^\022\160\000\000\000\000\000\000-\198\t^\002\252\022\208\000\000\000\000.2\t^\023j\000\000\000\000.\142\t^\023\156\000\000\000\000.\178\t^\000\000\000\000\023\206\000\000\000\000/,\t^\024:\000\000\000\000/\156\t^\024l\000\000\000\000/\166\t^\000\0000\n\
         \t^\000\000=4\000\000\000\000\t^\000\000\000\000\024\214\000\000\000\000\0254\000\000\000\000\t\192\000\000\000\000\025\180\000\000\026\004\000\000\000\000\000\000#:\n\
         j\000\0008r\002\160\004\218\026\154\000\0008\202\000\000\000\000\000\0009\b\000\000\000\000\026\238\000\000\026\246\000\000\000\000\000\000\000\0000\148\000\000\000\000\000\0000\206\t^1,\t^\000\000\t\134\027Z\000\000\000\000\027\184\000\0001L\000\000\000\000>\186\000\000\000\000\000\000\027\216\000\000\000\000\000\000\000\000\028\152\000\000\000\000\000\000\000\000\n\
         \238\000\000\000\000\000\0006\252\000\000\001\216\000\000\004F\000\000\n\
         \178\000\000\002(\000\000\000\000\000\000\000\000\000\000\000\000\004T\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t^\000\000\011\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\
         \172\006\250\000>\028\162\000\000\n\
         ,\n\
         \182\n\
         \178\004\180\007\182\000>\015\152\004\200\007\214\000>\000\000\028\246\000\000\006~\000\000\n\
         6\n\
         \200\007:\000\000\000\000\000\000\000\000\000\000\n\
         N\000\016\001\178\000\000\000\000\000\000=\022\000\000Dr\000\000\n\
         \224\000\000\n\
         \226\000\000\000\000\000\000\000\000\006\014\000\000\000\000\000\000\004\150\004\218\000\000\004\218\000\025\000\000\002P\000\000\bd\004\218\004\218\000\000\b\214\004\218\004\218\011\028\000\000\029L\000\000\000\000\011\"\011.\000\000\029\234\b\158\000\000\000\000\000\000\000\000\000\000\000\000\t^\000\000\000\000\000\000\000\000\000\000\n\
         N\011(\bp\000>\000\000\016l\000\000\004\200\000\000\011\148\000\000\000\000\000\000\000\000\000\000\030\012\000\000\t^\000\000\000\000\017L\000\000\004\200\000\000\018\n\
         \000\000\004\200\000\000\018\230\004\200\000\000\001\b\000\000\0110\t\n\
         \001\244\000\000\n\
         |\n\
         \140\011L\n\
         \192\011h\019r\004\200\b\202\000\000\011Z\011B\011`\007b\b\248\011b\011\186\011\180\007\146\t$\011\128\000\000\000\000\007\180\tn\000\000\004\252\003 \
         7\\\005~\030\182\000\000\006\000\003j\011P\011\204\t\220\003\184\000\000\011T\011\226\b\230\000\0002\192\000\000A\150\004\180\000\000\012\006\012\b\000\000\t\206\000\000\004\180\011t\011\250\bn\011\138\006\248\000\000\000\000\000\000\000\000\012\012\n\
         \028\000\000\012\018\011\140\000\000\bH \
         \174\011\142\011\144\0124\004\248\012T\000\000\012p\005\238\012\\\000\000\011\156\011\166\012z\011\198\011h\019\180\004\200\000\000\012~\012B\000\000\bN\000\000\012\252\000\000\012N\000\000\0214\005\026\012\028\012\154\012b\000\000\022L\005Z\012V\000\000\000\000\002h\003^\rR\000\000\024B\004\200\r\\\000\000\004\\\000\000\012(\012\184\024\154\005\168\000\000\0122\012\192\tb\011\138\0128\012R\012\210\r\188\000\000\012x\003N\000\000\000\000\000\000\000\000\007\136\012\218\012ZA\184\004\180\000\000\000i\r\022\r\026\000\000\000\000\000\000\000\000\000\000\000\000A\212\006\026\000\000\r&\r\232\000\000\000\000\000\000\000\000\000\000\000\000;n\r\162\000\000\r*\b\196\000\000\rt\r\128\t\000\000\000\012d\029\178\000\000\006\n\
         \000\000B$\004\180\004\180\000\000\000\000\006@\000\000\tF\000\000\r\150\006@\006@\000\000\r\142/\016\004\180B@\004\180\r\212\000\000\000\000\000\000\000\000\r\244\000\000\000\000\0072\000\000\006\170\rT\r\144\014l\rF\000\000\000\000\014\154\t\002\r\156\000\000\000\000\r\160\014\180\rp\000\000\000\000\014\164\000\000\b\188\000\000%t7*\004\180\000\000B\146\n\
         \000\000\000B\180\000\000\000\000\000\000\006@\000\000\000\000\0148\r\248\r\174\015L\014\b\000\000\000\000B\216\014H\014N\000\000\000\000\000\000,\184\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014T\000\000\014\\\r\204\005\236\000\000\015p\0150\014h\014\160\000\000\000\000\014\190\014\004\b>\000\000\000\000\tp7\022\006\182\000\000\000\000\000\000\n\
         \012\014\142\014\006\000\000\014\242\n\
         \012\000\000\015\238\014x\015X\000\000\000\000\000\000\004\180\000O\000\208\007\144\000\000\000\000\000\000\000\000\0152\014\022\000\000\bf\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\180\015\"\014&\016|\0158\000\0009\020\000\165\014(\015\018\003\214\0000\0140\015\204\000\000\016\138\030\220\000\000\000\000\031\012\000\000\014~\000\000\004\246\000\000\000\000\000\000\000\000\000\000\000\000B\238\004\180\000\000\016\140\031v\000\000\000\000\031\166\000\000\000\248\014F\0166\000\000\000\0009h;\128\016\000\000\000C\000\004\180\031\216\000\000\000\000 \
         r\000\000\000\000\014\152\000\000\002\162\000\000\000\000\000\000\000\000\000\000\000\000;\252\000\000\000\0009\200<Z\016\002\000\000CL\004\180 \
         \162\000\000\000\000!\016\000\000\000\000\014H!f\014\158\000\000\014^\014j\003\136\003\210\014v\b\228\014\170\016V!\138\014\196\000\000\014\204\014\222\t\170\000\000\005*=N\000\000\007\234\000\000\014\2289\214:~\005t\015@\005\224\000\000;\156=4\000\000\002\154\000\000\000\000\002\154\000\000\000\000\002\154\t\248\000\000\011\002\002\154\016v\"(\014\224\000\000\002\154\000\000\000\000C\144\000\000\000\000\000\000\002\154\000\000\000\000\015\024\000\000\012b\005\184\015(\000\000\014\236=\134\0156\000\000\000\000\000\000\000\000\015n\000\000\000\000\007\214\000\000\002\154C\184\000\000\012\168\002\154:\182\000\000\015\142\015\220\015\004\016\240\015\186\000\000:\208\015\172\016\000\000\000\000\000\000\000\n\
         \222\006\154\000\000\000\000\000\000\000\000\000\000\000\000\t,\015\174\000\000\016\028\000\000\000\000\000\000\000\000\015\196\012,\000\000\000\000\000\000\000\000\t,\000\000\000\000\015\202\021|\000\000\000\000\000\000\000\000\000\000\000>\004\200\000\000\000\000\005~\000\000C\228\004\180\000\000\t\216\000\000\000\000\000\000\000\000\"\202\000\000\000\000\000\000\000\000\000\000\000\000\016\174\004\020\011\018\014\142\t&\015.\000\000\003\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0152\n\
         \154\015:\000\000\tV\017\016\016\218\015\244\000\000\000\000\016\206\004Z\004\\\000\000\000\000\000\000\015d\000\000\015~\003\014\000\000\000\000\004\218\006j\000\000\000\000\000\000\000\000\000\000$\138\000\000\000\000\011r\bR\000\000\000\000D$\004\180\004\180\000\000DH\004\180\011r\000\000\000\000\000\000\004\180\000\000\000\000\n\
         \004\016\230\016\006\000\000\000\000\016\222\004\"\000R\000\000\000\000\000\000\000\000\012\004\017\016\n\
         \b\016\240\016\020\000\000\000\000\016\232\t\208\003\b\000\000\000\000\000\000\000\000\004\200\000\000\016.\000\000\000\000\000\000\"J\000\000#\n\
         \000\000\000\000\000\000\000\000\000\000\000\226\000\000\000\000\000\000\007\016\000\151\000\000\000\000\000\000\000\000\000\000\000\020\000\151\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rt\000\000\000\000\000\000#\172\000\000\004\180\000\000\n\
         ^\000\000\000\000\000\000\002\016\000\000\000\000\000\000\003T\000\000\000\000\000\000\000C\000\000\000\000\000\0001\n\
         \005~\000\000\000\000\000|\000\000\000\000\000\000\000\000\004T\004\194\0162\004\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000<\144\000\000\0160\000\000\000\000\000\000\000\000\005\012\006\174\000\170\002L\000\000\000\000\016l\003\238\000\000\000\000\000\000\016\150\005\144\000\000\000\000\000\000\000\000"
      ),
      ( 16,
        "\006E\0007\002,\002-\001e\000q\001e\000;\001\031\003\011\001\216\006\166\000\149\006\213\006\199\001\233\001\031\002n\006F\006\224\001\240\006H\001\019\000?\001\244\002o\001\023\006\219\001\023\000@\006I\006V\006\242\005v\000m\001\"\001\031\006E\002\137\002,\002-\001e\0007\005\171\001k\000\234\004\t\000\234\000\238\000\239\000\238\000\239\000\\\004\015\002n\006F\006U\007\014\006H\006J\000\149\002\012\002o\000\158\001\016\001\245\004\t\006I\006V\000\234\001\023\001\026\000\238\001\002\000`\002\137\006\002\006y\000d\001\246\002\014\001\003\007\022\002-\001e\007\015\000\149\001\214\000\159\001\233\000\241\005\027\000\241\006K\000y\001\240\006J\002\139\001T\001\244\006\217\001\023\006L\006E\000\128\006\004\001\006\006f\001\016\0020\002\027\002\141\000\238\000\238\001\023\001$\001\016\005\030\0071\003\011\006\005\0072\001\023\001$\006H\006\007\006[\000\240\002\025\0063\006K\005R\005 \
         \006I\002\139\001\027\001\016\005}\005~\006L\001\245\006\\\001\023\001$\0007\001\031\0020\001W\002\141\000\238\007\024\006O\005!\005\142\006\226\001\031\006Q\005\135\004\029\005S\006\228\005T\006J\006[\000\130\0007\006S\001%\000\131\002\142\002\028\002\148\002\006\005\173\000:\001%\005v\002\154\006\\\001\139\002\144\004\021\006T\006\243\002,\002-\001e\006\195\006O\007\025\005U\002\141\000\238\006Q\001.\001%\006K\001l\002\006\002n\002\156\004\012\004\024\006S\000\136\006L\002\142\002o\002\148\006E\003\011\002,\002-\001e\002\154\0009\001\139\002\144\006\196\006T\002\137\001\251\004\r\005V\000\238\0074\002n\006F\006U\002\025\006H\000\241\005W\005X\002o\005Y\000\241\002\156\000\234\006I\006V\000\238\001\002\002\026\006N\001\016\006E\002\137\002,\002-\001e\001\023\001$\003\024\006O\001\016\000\238\001\002\005\149\006Q\005\206\001\023\001$\002n\006F\006U\000\134\006H\006J\006S\000\153\002o\006\152\005\208\000\137\001\221\006I\006V\004O\002\139\005}\005~\005[\006\230\002\137\006T\003\182\005]\005g\002\014\003)\0020\000\152\002\141\000\238\000\234\005\134\005\145\000\238\001\002\005\135\004\029\006K\000\183\001%\006J\002\139\001\182\000\178\006w\000\179\006L\006E\005\146\001%\000\184\004N\000=\0020\002\027\002\141\000\238\000\238\002\145\001\031\000\188\003\188\0071\003\011\000\241\0072\001&\001\006\006H\003\249\006[\000\241\000\241\000\174\006K\005R\0010\006I\002\139\002\026\001\031\000\149\002\025\006L\000\154\006\\\002\142\005\213\004@\004\t\0020\007\006\002\141\000\238\002\154\006O\001\139\002\144\000\234\001\031\006Q\000\238\001\002\005S\006\210\005T\006J\006[\000\241\000\149\006S\006\142\001\233\002\142\002\028\002\148\000\155\002\156\004\004\004\006\004\b\002\154\006\\\001\139\002\144\0007\006T\007\007\002,\002-\001e\004S\006O\001\023\005U\003\183\006\191\006Q\000\234\001\016\006K\000\238\001\002\002n\002\156\001\023\001\026\006S\005\217\006L\002\142\002o\002\148\006E\001\031\002,\002-\001e\002\154\001\016\001\139\002\144\000\189\006T\002\137\001\023\001$\005V\004\198\0073\002n\006F\006U\006!\006H\003\183\005W\005X\002o\005Y\001\016\002\156\000\149\006I\006V\000\154\001\023\001$\006N\006\164\006E\002\137\002,\002-\001e\000\193\000\194\002\026\006O\001\016\002\014\003\011\005\149\006Q\006o\001\023\001$\002n\006F\006U\001(\006H\006J\006S\000\206\002o\006]\004\218\001%\000\210\006I\006V\004\200\002\139\004\017\000\241\005[\002\018\002\137\006T\002\027\005]\005g\000\238\001\253\0020\001\016\002\141\000\238\001%\001\023\005\145\001\023\001$\003O\004\020\006K\000\238\001\002\006J\002\139\004P\007\n\
         \006Y\001\016\006L\006E\005\146\001%\000\241\001\023\001$\0020\006\159\002\141\000\238\006\160\002\145\001\236\006\209\000\149\0071\000\181\001\233\0072\001\159\001e\006H\001\240\006[\006\t\003`\001\244\006K\001\023\003~\006I\002\139\007\011\003\011\002\028\000\238\006L\004\194\006\\\002\142\000\238\004)\000\186\0020\006\196\002\141\000\238\002\154\006O\001\139\002\144\000\225\002\025\006Q\003\196\001e\003\184\001%\000\234\006J\006[\000\238\000\239\006S\003\011\002\000\002\142\001\245\002\148\000\231\002\156\001\023\006\130\0007\002\154\006\\\001\139\002\144\006\194\006T\000\246\002,\002-\001e\006\160\006O\007\"\002-\001e\006\002\006Q\003\011\002\001\006K\001\031\000\234\002n\002\156\000\238\000\239\006S\004y\006L\002\142\002o\002\148\006E\006\150\002,\002-\001e\002\154\006+\001\139\002\144\003\011\006T\002\137\006\004\006z\007%\007&\0077\002n\007(\003\185\006\002\006H\001)\000\207\005\178\002o\006\131\006\005\002\156\001Y\006I\007*\006\007\006.\002\002\006N\006\030\006E\002\137\002,\002-\001e\0079\001\n\
         \000\149\006O\001\220\001\233\0060\006\004\006Q\0007\0071\003\r\002n\0072\004\201\006\132\006H\006J\006S\002\026\002o\003\011\006\005\001\r\006\133\006I\007:\006\007\002\139\006\134\006\135\006\023\0061\002\137\006T\006\151\006\197\006\198\006\136\006\137\0020\001``\001\233\007>\000\218\000\234\006J\000\241\000\238\000\239\006S\001;\000\226\002\142\000\229\002\148\004\183\002\156\004\011\003\011\001B\002\154\006\\\001\139\002\144\0007\006T\001\016\002,\002-\001e\001G\006O\001\023\001$\001V\006\002\006Q\000\232\002\028\006K\001\239\000\234\002n\002\156\000\238\000\239\006S\004\189\006L\002\142\002o\002\148\006E\006%\002,\002-\001e\002\154\001\177\001\139\002\144\003\011\006T\002\137\006\004\001\031\000\241\004n\007<\002n\006F\006c\006\002\006H\000\241\003\011\000\241\002o\000\242\006\005\002\156\001\239\006I\006V\006\007\001\\\004\206\006N\006\014\006E\002\137\002,\002-\001e\003\011\000\234\001\175\006O\000\238\000\239\000\241\006\004\006Q\004\162\0071\002\014\002n\0072\003\249\001\023\006H\006J\006S\001\239\002o\001t\006\005\001\016\000\247\006I\0075\006\007\002\139\001\023\001\026\006\011\006\002\002\137\006T\003\012\001\216\001~\002\015\006g\0020\002\027\002\141\000\238\000\238\001\135\001\240\000\241\006\235\004\239\001\244\006K\001\023\003\011\006J\002\139\001\031\001\134\001\239\001 \
         \006L\006\004\0012\004\007\004\006\004\b\006\t\0020\005\019\002\141\000\238\001\016\002\145\002,\002-\001e\006\005\001\023\001$\003\236\006\162\006\007\0013\001\"\006[\006\b\002\014\000\241\006K\001Q\001E\001\245\002\139\001\181\005\006\001\193\003c\006L\003\249\006\\\002\142\002\028\003g\004t\0020\001\246\002\141\000\238\002\154\006O\001\139\002\144\002\014\0029\006Q\001G\002\027\0078\001C\000\238\003d\005$\006\236\001\198\006S\001\031\001*\002\142\001+\002\148\001%\002\156\003\235\001]\005\r\002\154\006\\\001\139\002\144\003\219\006T\004\143\002\027\0018\000\238\000\238\006O\005o\004\006\004\b\004%\006Q\001\"\000\241\006\237\004\030\001\016\006\160\002\156\006\244\001\023\006S\001\023\001$\002\142\003\217\002\148\006E\002/\002,\002-\001e\002\154\001\203\001\139\002\144\002\028\006T\003\003\001e\0020\000\241\002\141\000\238\002n\006F\005\"\005\r\006H\001\209\001u\001\031\002o\004a\001 \
         \002\156\000\241\006I\006_\006\245\005R\000\149\002\028\005j\001\233\002\137\002\014\003\249\001>\004\146\001\031\001\139\005\030\001 \
         \001\016\001%\003f\004f\001\"\001F\001\023\001\026\002\014\006\246\001\031\001\016\006J\005 \
         \005S\005\148\005T\001\023\001$\003\227\004k\005v\002\027\001\"\002\005\000\238\002\142\006\247\001.\003\245\004\029\001H\003\235\005!\002\143\003\231\001\139\002\144\002\027\000\241\001\226\000\238\005\131\004\006\004\b\005U\006K\001*\000\234\001\228\002\139\000\238\000\239\0062\001\031\006L\003\235\0057\001\243\005\n\
         \001\204\006\186\0020\002\004\002\141\000\238\001*\001\031\004}\001e\001%\005\011\003\210\003\235\003\206\005#\002&\001\016\005V\006b\006.\001\"\002\028\001\023\001$\002\014\0007\005W\005X\003\011\005Y\002,\002-\001e\006\\\0060\001\016\001.\002\028\004\177\003\249\001\016\001\023\001$\006O\001\023\002n\001\023\001\026\006Q\001\016\003\011\0042\005\149\002o\002\027\001\023\001$\000\238\006S\0048\0061\002\142\000\241\002\148\005}\005~\002\137\005\253\001>\002\154\006\147\001\139\002\144\003\011\006T\001%\005[\002)\003\011\005\127\005\143\005]\005g\001\031\005\135\004\029\001 \
         \001>\005\139\004\006\004\b\005\145\002\156\001\016\001%\003\011\004#\001\016\005\150\001\023\001$\002\014\001.\001\023\001\026\001H\001\016\005\146\001%\0027\001\"\006\172\001\023\001$\002\028\002,\002-\001e\004\\\000m\002F\001.\004\140\004\029\001H\002\139\005\001\005v\004R\000\238\002n\002\027\003\011\001\216\000\238\004\019\002\n\
         \0020\002o\002\141\000\238\004b\002I\001\240\003\162\004\143\005,\001\244\000\238\001\023\002O\002\137\001%\001*\002[\001\031\005\n\
         \001\031\005>\001\031\001 \005\015\001 \
         \004g\000\238\001%\002X\005y\005\011\002\145\001\016\001\216\005\018\006\208\002\007\001\206\001\023\001$\002^\001.\003\011\001\240\001\"\001\016\001\"\001\244\001\"\001\023\001\245\001\023\001$\002\028\004\023\002b\002,\002-\001e\002\142\005\240\002\148\004l\005v\001\246\005v\000m\002\154\002\014\001\139\002\144\002n\002\139\005\248\005\r\006\128\000\238\001\139\002g\002o\001\213\003\011\002'\002{\0020\007\002\002\141\000\238\001\245\001*\002\156\001*\002\137\005}\005~\004x\002*\001>\002\027\003\014\000\241\000\238\001\246\006\188\001%\006\202\004\210\004\029\005\127\005\143\004\135\006p\006\016\005\135\004\029\000\238\002\145\001\016\006E\001\016\002\153\001\016\002\208\001\023\001$\001\023\001$\001\023\001$\007\004\001\031\001.\002\224\001 \
         \001H\0028\006F\002\231\006.\006H\003\004\006\197\006\198\000\241\002\142\000\241\002\148\003s\006I\004\148\002G\002\139\002\154\0060\001\139\002\144\003{\001\"\002\028\000\241\003\176\005\135\004\029\0020\002J\002\141\000\238\005}\005~\005}\005~\001>\002P\001>\005v\002\156\001%\006J\001%\0061\001%\003\186\005\127\005\143\005\127\005\143\003\208\005\135\004\029\005\135\004\029\005s\004\029\004\143\002c\002\145\000\238\002h\000\241\003\223\001*\003\225\006\173\001.\003\238\001.\004\025\001.\001H\002\204\001H\006K\001\216\000\241\004!\001\217\0040\002,\002-\001e\006L\004;\001\240\002\142\003\218\002\148\001\244\000\241\001\023\003\224\001\016\002\154\002n\001\139\002\144\000\241\001\023\001$\003\239\004]\002o\002,\002-\001e\006M\000\234\006s\004V\000\238\000\239\004\000\004\002\001\216\002\137\002\156\001\238\002n\000\241\004X\006N\000\241\006\140\001\240\001\139\002o\003\011\001\244\001\245\001\023\006O\004=\004[\000\241\004j\006Q\006\205\006\002\002\137\005}\005~\004\026\001\246\001>\004\031\006S\006E\0041\000\241\004`\001%\004Q\003\249\000\241\006\184\006\185\002,\002-\001e\005\135\004\029\006T\000\241\001\016\006F\004W\006\004\006H\001\245\001\023\001$\002n\004^\002\139\000\241\000\241\006I\001.\004i\002o\001H\006\005\001\246\006~\004\029\0020\006\007\002\141\000\238\004+\006\018\004e\002\137\004h\004\151\001\187\001e\002\139\002,\002-\001e\006\181\004\006\004\b\000\241\006J\004v\000\241\004{\0020\000\241\002\141\000\238\002n\000\241\001f\002A\002\145\001h\001i\004d\002o\004\134\004\133\004\138\004\149\003\011\004$\000\241\004w\003\011\002,\002-\001e\002\137\000\241\001\016\004\160\004\156\006K\004|\002\145\001\023\001$\004\172\002\142\002n\002\148\006L\004\166\004\168\002\139\004\139\002\154\002o\001\139\002\144\003\152\003\005\003\006\003\216\004\147\004\192\0020\004\150\002\141\000\238\002\137\004\180\002\142\004\191\002\148\006X\002,\002-\001e\002\156\002\154\004\186\001\139\002\144\004\157\000\234\000\241\001\016\000\238\000\239\006N\002n\001\127\001\023\001\026\000\241\002\139\004\159\002\145\002o\006O\004\163\004\190\002\156\001n\006Q\000\241\000\238\0020\003\213\002\141\000\238\002\137\003\011\004\161\006S\006\002\004\203\000\241\004\167\000\234\004\173\004\208\000\238\000\239\005/\002\142\000\241\003\030\002\139\000\241\006T\003\155\003\160\002\154\004\185\001\139\002\144\004\213\001\216\002\145\0020\001\248\002\141\000\238\006\004\005\n\
         \000\241\004\216\001\240\004\204\006\002\004\220\001\244\004\209\001\023\003\011\002\156\005\011\004\228\006\005\003\011\005\012\004\214\001\129\006\007\004\235\004\224\002\142\006$\002\148\002\139\001\130\002\145\001\139\001l\002\154\000\241\001\139\002\144\006\004\004\178\000\241\0020\000\241\002\141\000\238\002,\002-\001e\006\250\002,\002-\001e\001\245\006\005\003\011\004\230\000\241\002\156\006\007\002\142\002n\002\148\0067\004\241\002n\004\252\001\246\002\154\002o\001\139\002\144\000\241\002o\002\145\003\199\000\241\001d\001e\003\151\003\011\004\143\002\137\004\195\000\238\000\241\002\137\004\246\004\199\000\241\005.\002\156\002,\002-\001e\005'\003\011\001f\001v\001\016\001h\001i\002\142\005\014\003\030\001\023\001\026\002n\001\216\005\000\002\154\001\250\001\139\002\144\005(\002o\005\021\005&\001\240\000\241\003\142\003\146\001\244\004\250\001\023\0050\005-\000\241\002\137\000\241\003\011\0051\005I\002\156\001\031\0052\001\216\005;\003\011\002\022\001w\002\139\001x\002L\003\011\002\139\001\240\005_\005\026\006\251\001\244\001\139\001\023\0020\003\011\002\141\000\238\0020\005\n\
         \002\141\000\238\001\"\003\011\001\245\005\031\003\011\000\241\002,\002-\001e\005\011\001\127\000\241\005Q\005\017\005i\005u\001\246\003\011\000\241\000\241\003\011\002n\001n\005\137\002\145\000\238\002\139\000\241\002\145\002o\001\245\005\153\005\159\003\145\000\241\003\135\005\163\005G\0020\003\011\002\141\000\238\002\137\005=\001\246\005O\005J\005\191\005\231\000\241\005K\005\\\002\142\003\011\002\148\005P\002\142\005f\002\148\006#\002\154\005d\001\139\002\144\002\154\005\236\001\139\002\144\001\016\005{\002\145\006\019\005\172\001\016\001\023\001\026\005b\000\241\000\241\001\023\005@\003\011\001\129\002\156\005c\005\207\000\241\002\156\005\233\003\011\001\130\005e\001\139\001l\000\241\000\241\003\011\005\241\002\142\000\241\002\148\002\139\002,\002-\001e\005\144\002\154\005\244\001\139\002\144\000\241\000\241\005t\0020\006\015\002\141\000\238\002n\002,\002-\001e\006\022\000\241\005\247\003\011\002o\005\255\005\n\
         \000\241\002\156\006(\003x\005A\002n\000\241\002,\002-\001e\002\137\005\011\003\011\002o\006=\005+\005\011\002\145\005F\003p\005C\006\"\002n\002,\002-\001e\002\137\003\011\003\011\006&\002o\001.\000\241\005x\001\216\006\129\006*\002<\002n\003\011\003h\006\141\003\011\002\137\001\240\002\142\002o\002\148\001\244\000\241\001\023\005z\002\134\002\154\005|\001\139\002\144\001\216\000\241\002\137\003\229\000\241\006\155\003\011\006/\000\241\005\136\001\240\005\152\002\139\005\154\001\244\003\011\001\023\005\155\006\157\002\156\000\241\005\160\003\011\006;\0020\005\164\002\141\000\238\002\139\002,\002-\001e\001\245\005\168\005\186\003\011\003\011\005\193\006B\006P\0020\000\241\002\141\000\238\002n\002\139\001\246\000\241\005\197\005\221\006W\005\242\002o\006`\006\n\
         \001\245\002\145\0020\002\147\002\141\000\238\002\139\002,\002-\001e\002\137\003\011\006\020\000\241\001\246\006D\006>\002\145\0020\006\146\002\141\000\238\002n\002,\002-\001e\000\241\006?\006\190\002\142\002o\002\148\003\011\006C\002\145\006\204\002\162\002\154\002n\001\139\002\144\006R\006|\002\137\006\144\002\142\002o\002\148\006\216\007+\002\145\001\216\002\161\002\154\0046\001\139\002\144\006\145\006\149\002\137\002\156\001\240\002\142\006\189\003\030\001\244\006\193\001\023\006\203\002\139\002\154\006\207\001\139\002\144\002\205\001e\002\156\007\029\002\142\0076\002\148\0020\000\000\002\141\000\238\000\000\002\154\000\000\001\139\002\144\000\000\000\000\000\000\002\156\002\240\001v\000\000\001h\001i\000\000\007;\000\000\002\139\000\000\000\000\000\000\001\245\000\000\000\000\002\156\000\000\000\000\000\000\002\145\0020\000\000\002\141\000\238\002\139\000\000\001\246\000\000\000\000\000\000\002,\002-\001e\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\002\245\003\005\003\006\002n\000\000\002\142\000\000\002\148\000\000\000\000\002\145\002o\000\000\002\154\000\000\001\139\002\144\002\213\000\000\000\000\000\000\000\000\000\000\000\000\002\137\000\000\002\145\001\216\000\000\000\000\004E\000\000\001\127\000\000\000\000\000\000\002\156\001\240\002\142\000\000\002\148\001\244\000\000\001\023\001n\000\000\002\154\000\238\001\139\002\144\000\000\002,\002-\001e\002\142\000\000\002\148\000\000\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\002n\000\000\000\000\002\156\000\000\000\000\000\000\000\000\002o\000\000\000\000\003\t\003\n\
         \000\000\002\216\000\000\001\245\002\139\000\000\002\156\000\000\002\137\002,\002-\001e\000\000\000\000\000\000\000\000\0020\001\246\002\141\000\238\001\031\000\000\000\000\001 \
         \002n\001\129\002,\002-\001e\000\000\000\000\000\000\002o\001\130\000\000\001\139\001l\000\000\002\228\000\000\000\000\002n\000\000\001\216\000\000\002\137\004I\001\"\002\145\002o\000\000\000\000\000\000\001\240\000\000\002\235\000\000\001\244\000\000\001\023\000\000\000\000\002\137\000\000\000\000\000\000\000\000\002\139\000\000\000\000\000\000\000\000\000\000\002,\002-\001e\002\142\000\000\002\148\0020\000\000\002\141\000\238\000\000\002\154\000\000\001\139\002\144\002n\000\000\001*\000\000\000\000\000\000\000\000\000\000\002o\000\000\001\245\000\000\000\000\000\000\002\238\000\000\002\139\000\000\000\000\002\156\000\000\002\137\000\000\002\145\001\246\000\000\000\000\000\000\0020\000\000\002\141\000\238\001\016\002\139\002,\002-\001e\000\000\001\023\001$\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\002n\000\000\002\142\000\000\002\148\000\000\000\000\000\000\002o\000\000\002\154\002\145\001\139\002\144\002\244\000\000\001\216\000\000\000\000\004L\000\000\002\137\000\000\000\000\000\000\000\000\001\240\000\000\002\145\000\000\001\244\002\139\001\023\002\156\000\000\0011\002,\002-\001e\002\142\000\000\002\148\001%\0020\000\000\002\141\000\238\002\154\000\000\001\139\002\144\002n\000\000\000\000\000\000\000\000\002\142\000\000\002\148\002o\000\000\002,\002-\001e\002\154\002\247\001\139\002\144\000\000\001.\002\156\001\245\002\137\000\000\000\000\002\145\002n\000\000\000\000\000\000\002\139\000\000\000\000\000\000\002o\001\246\001\216\002\156\000\000\004Z\003\017\000\000\0020\000\000\002\141\000\238\001\240\002\137\000\000\000\000\001\244\000\000\001\023\002\142\000\000\002\148\000\000\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\002,\002-\001e\000\000\001\216\000\000\000\000\004\170\000\000\002\145\000\000\000\000\000\000\000\000\001\240\002n\002\139\000\000\001\244\002\156\001\023\000\000\000\000\002o\000\000\000\000\001\245\000\000\0020\003\021\002\141\000\238\000\000\000\000\000\000\000\000\002\137\002\142\000\000\002\148\001\246\002\139\002,\002-\001e\002\154\000\000\001\139\002\144\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\002n\000\000\001\245\002\145\002,\002-\001e\000\000\002o\000\000\000\000\002\156\000\000\000\000\000\000\000\000\001\246\000\000\003\027\002n\000\000\002\137\000\000\001d\001e\000\000\000\000\002o\002\145\000\000\000\000\002\142\000\000\002\148\000\000\000\000\000\000\003 \
         \002\139\002\154\002\137\001\139\002\144\001f\001v\000\000\001h\001i\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\002\142\000\000\002\148\000\000\000\000\000\000\002\156\000\000\002\154\000\000\001\139\002\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006E\000\000\000\000\000\000\000\000\002\139\000\000\002\145\002,\002-\001e\001w\002\156\001x\002T\000\000\000\000\0020\006F\002\141\000\238\006H\000\000\002n\002\139\002,\002-\001e\000\000\000\000\006I\002o\000\000\000\000\000\000\002\142\0020\002\148\002\141\000\238\002n\003\"\001\127\002\154\002\137\001\139\002\144\000\000\002o\002\145\002,\002-\001e\000\000\001n\000\000\000\000\000\238\003&\006J\000\000\002\137\000\000\000\000\001\216\002n\002\156\004\182\002\145\000\000\000\000\000\000\000\000\002o\001\240\000\000\000\000\002\142\001\244\003\030\001\023\000\000\000\000\003.\002W\002\154\002\137\001\139\002\144\000\000\000\000\000\000\000\000\006K\000\000\000\000\002\142\000\000\003\030\000\000\000\000\000\000\006L\002\139\002\154\000\000\001\139\002\144\002\156\000\000\000\000\000\000\000\000\000\000\001\129\0020\000\000\002\141\000\238\001\245\002\139\000\000\001\130\000\000\001\139\001l\006a\002\156\000\000\002,\002-\001e\0020\001\246\002\141\000\238\000\000\000\000\000\000\000\000\000\000\006N\000\000\000\000\002n\002\139\000\000\002\145\002,\002-\001e\006O\002o\000\000\000\000\000\000\006Q\0020\000\000\002\141\000\238\000\000\0034\002n\002\145\002\137\006S\000\000\000\000\000\000\000\000\002o\002,\002-\001e\002\142\000\000\003\030\000\000\000\000\000\000\003:\006T\002\154\002\137\001\139\002\144\002n\000\000\002\145\000\000\000\000\002\142\000\000\003\030\002o\000\000\000\000\000\000\000\000\002\154\003A\001\139\002\144\001\216\000\000\002\156\004\188\002\137\000\000\000\000\000\000\000\000\000\000\001\240\000\000\000\000\002\142\001\244\003\030\001\023\000\000\000\000\002\156\002\139\002\154\000\000\001\139\002\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\000\000\002\139\000\000\000\000\000\000\000\000\002\156\002,\002-\001e\000\000\000\000\000\000\0020\000\000\002\141\000\238\001\245\000\000\000\000\000\000\000\000\002n\000\000\000\000\002\139\002\145\000\000\000\000\000\000\002o\001\246\002,\002-\001e\000\000\003F\0020\000\000\002\141\000\238\000\000\000\000\002\137\000\000\002\145\000\000\002n\000\000\000\000\000\000\000\000\000\000\000\000\002\142\002o\003\030\002,\002-\001e\000\000\003K\002\154\000\000\001\139\002\144\000\000\000\000\002\137\002\145\000\000\000\000\002n\002\142\000\000\003\030\000\000\000\000\000\000\000\000\002o\002\154\000\000\001\139\002\144\002\156\000\000\000\000\001\031\000\000\003R\001 \
         \000\000\002\137\000\000\000\000\000\000\002\142\000\000\002\148\000\000\000\000\002\139\000\000\002\156\002\154\000\000\001\139\002\144\000\000\000\000\002,\002-\001e\0020\001\"\002\141\000\238\000\000\000\000\000\000\000\000\000\000\001<\000\000\000\000\002n\002\139\002\156\000\000\000\000\000\000\000\000\000\000\002o\000\000\002,\002-\001e\0020\000\000\002\141\000\238\000\000\003W\000\000\002\145\002\137\000\000\000\000\000\000\002n\002\139\000\000\000\000\000\000\000\000\000\000\001*\002o\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\003\\\000\000\002\145\002\137\000\000\002\142\000\000\002\148\000\000\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\000\000\000\000\001\016\002,\002-\001e\000\000\000\000\001\023\001$\002\145\000\000\000\000\002\142\000\000\002\148\000\000\000\000\002n\002\156\002\139\002\154\000\000\001\139\002\144\000\000\002o\001\216\000\000\000\000\004\197\000\000\0020\000\000\002\141\000\238\003k\001\240\002\142\002\137\003\030\001\244\000\000\001\023\002\156\002\139\002\154\000\000\001\139\002\144\002,\002-\001e\000\000\001>\000\000\000\000\0020\000\000\002\141\000\238\001%\000\000\000\000\002\145\002n\000\000\000\000\000\000\002\156\000\000\001\216\000\000\002o\004\205\000\000\000\000\000\000\000\000\000\000\000\000\001\240\001\245\003n\000\000\001\244\002\137\001\023\001.\002\145\000\000\001D\002\142\000\000\003\030\000\000\001\246\000\000\002\139\000\000\002\154\000\000\001\139\002\144\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\002,\002-\001e\002\142\000\000\003\030\000\000\000\000\000\000\002\156\000\000\002\154\001\245\001\139\002\144\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002o\000\000\000\000\001\246\000\000\002\145\003t\000\000\002\139\000\000\000\000\002\156\000\000\002\137\000\000\000\000\000\000\002,\002-\001e\0020\000\000\002\141\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002n\002\142\000\000\003\030\000\000\000\000\000\000\000\000\002o\002\154\000\000\001\139\002\144\000\000\003v\000\000\000\000\000\000\000\000\000\000\002\145\002\137\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\156\000\000\000\000\000\000\000\000\000\000\000\000\001\031\002\139\000\000\001 \
         \000\000\000\000\0012\000\000\000\000\002\142\000\000\003\030\000\000\0020\000\000\002\141\000\238\002\154\000\000\001\139\002\144\002,\002-\001e\000\000\000\000\0013\001\"\000\000\000\000\000\000\000\000\000\000\001O\000\000\000\000\002n\000\000\000\000\000\000\002\156\002\139\000\000\000\000\002o\002\145\000\000\000\000\000\000\000\000\003\128\000\000\000\000\0020\000\000\002\141\000\238\002\137\000\000\000\000\000\000\000\000\000\000\002,\002-\001e\000\000\002,\002-\001e\001*\000\000\000\000\002\142\000\000\002\148\000\000\000\000\002n\000\000\000\000\002\154\002n\001\139\002\144\002\145\002o\0018\000\000\000\000\002o\000\000\003\137\000\000\000\000\000\000\003\140\000\000\000\000\002\137\001\016\000\000\000\000\002\137\002\156\000\000\001\023\001$\000\000\000\000\000\000\000\000\000\000\002\142\000\000\002\148\002\139\002,\002-\001e\000\000\002\154\000\000\001\139\002\144\000\000\000\000\000\000\0020\000\000\002\141\000\238\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002o\000\000\000\000\000\000\002\156\000\000\003\154\000\000\001\031\000\000\000\000\001 \
         \001>\002\137\000\000\000\000\000\000\000\000\002\139\001%\002\145\000\000\002\139\001F\002,\002-\001e\000\000\000\000\000\000\0020\000\000\002\141\000\238\0020\001\"\002\141\000\238\000\000\002n\002,\002-\001e\000\000\000\000\002\229\001.\002o\002\142\001H\002\148\000\000\000\000\003\157\000\000\002n\002\154\000\000\001\139\002\144\002\137\000\000\002\145\002oe\000\000\000\000\002,\002-\001e\002\142\000\000\002\148\0020\000\000\002\141\000\238\002n\002\154\000\000\001\139\002\144\002n\000\000\000\000\002o\001>\000\000\000\000\002\145\002o\000\000\000\000\001%\000\000\003\172\003\221\002x\002\137\000\000\000\000\002\156\000\000\002\137\000\000\002\145\000\000\000\000\000\000\002,\002-\001e\000\000\000\000\000\000\001\031\000\000\002\142\001 \
         \002\148\001.\000\000\000\000\001H\002n\002\154\000\000\001\139\002\144\000\000\000\000\000\000\002o\002\142\000\000\003\030\000\000\000\000\003\234\000\000\000\000\002\154\001\"\001\139\002\144\002\137\000\000\000\000\002\156\000\000\000\000\000\000\002,\002-\001e\000\000\000\000\002\139\000\000\000\000\000\000\000\000\002\139\000\000\002\156\000\000\000\000\002n\000\000\0020\000\000\002\141\000\238\000\000\0020\002o\002\141\000\238\000\000\000\000\000\000\004\028\000\000\000\000\000\000\001*\000\000\000\000\002\137\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\000\000\002\139\000\000\002\145\000\000\000\000\000\000\000\000\001\031\000\000\000\000\001 \
         \001\016\0020\000\000\002\141\000\238\000\000\001\023\001$\000\000\000\000\000\000\000\000\000\000\000\000\002\142\000\000\003\030\002\205\001e\002\142\000\000\002\148\002\154\001\"\001\139\002\144\000\000\002\154\005\004\001\139\002\144\000\000\002\139\002\145\001d\001e\000\000\002\240\001v\000\000\001h\001i\000\000\000\000\0020\002\156\002\141\000\238\000\000\000\000\002\156\000\000\001>\000\000\001f\001v\000\000\001h\001i\001%\000\000\002\142\000\000\002\148\000\000\000\000\001*\000\000\000\000\002\154\000\000\001\139\002\144\000\000\000\000\000\000\002\145\004?\000\000\002\245\003\005\003\006\000\000\000\000\000\000\000\000\001.\000\000\000\000\001?\000\000\000\000\002\156\000\000\000\000\000\000\001\016\001w\000\000\001x\002L\000\000\001\023\001$\002\142\000\000\002\148\000\000\000\000\000\000\000\000\001\127\002\154\000\000\001\139\002\144\000\000\000\000\002,\002-\001e\000\000\000\000\001n\000\000\000\000\000\238\000\000\001\127\000\000\000\000\000\000\000\000\002n\000\000\002\156\000\000\002,\002-\001e\001n\002o\000\000\000\238\000\000\000\000\000\000\004r\001>\000\000\000\000\003\145\002n\000\000\002\137\001%\003\t\004\"\000\000\005\t\002o\002,\002-\001e\000\000\000\000\005\167\000\000\000\000\000\000\000\000\000\000\000\000\002\137\000\000\001\031\002n\000\000\001 \
         \000\000\000\000\000\000\001.\001\129\002o\001H\000\000\000\000\000\000\000\000\005\170\001\130\000\000\001\139\001l\000\000\000\000\002\137\000\000\000\000\001\129\000\000\001\"\000\000\000\000\000\000\000\000\000\000\001\130\000\000\001\139\001l\000\000\002\139\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\002n\000\000\000\000\002\139\000\000\000\000\000\000\000\000\002o\002,\002-\001e\000\000\000\000\005\185\0020\001*\002\141\000\238\000\000\000\000\002\137\000\000\000\000\002n\000\000\000\000\002\139\002\145\000\000\000\000\000\000\002o\000\000\002,\002-\001e\000\000\005\188\0020\000\000\002\141\000\238\000\000\000\000\002\137\001\016\002\145\000\000\002n\000\000\000\000\001\023\001$\000\000\000\000\002\142\002o\002\148\000\000\000\000\000\000\000\000\005\201\002\154\000\000\001\139\002\144\000\000\000\000\002\137\002\145\000\000\000\000\000\000\002\142\000\000\002\148\000\000\000\000\002\139\000\000\000\000\002\154\000\000\001\139\002\144\002\156\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\001-\002\142\000\000\002\148\000\000\000\000\002\139\001%\002\156\002\154\000\000\001\139\002\144\002,\002-\001e\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\000\000\000\000\002\145\000\000\002n\000\000\000\000\002\139\002\156\000\000\001.\000\000\002o\002,\002-\001e\000\000\005R\005\204\0020\000\000\002\141\000\238\000\000\000\000\002\137\002\145\000\000\002n\000\000\002\142\000\000\002\148\000\000\000\000\000\000\002o\000\000\002\154\000\000\001\139\002\144\005\225\000\000\000\000\005S\000\000\005T\000\000\002\137\000\000\002\145\000\000\000\000\002\142\000\000\002\148\000\000\000\000\000\000\000\000\002\156\002\154\000\000\001\139\002\144\000\000\000\000\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\005U\000\000\000\000\002\142\000\000\002\148\000\000\002n\002\139\002\156\000\000\002\154\000\000\001\139\002\144\002o\000\000\000\000\000\000\000\000\0020\005\228\002\141\000\238\000\000\000\000\000\000\000\000\002\137\000\000\000\000\000\000\002\139\005V\002\156\002,\002-\001e\000\000\000\000\000\000\000\000\005W\005X\0020\005Y\002\141\000\238\000\000\000\000\002n\000\000\002\145\000\000\002\205\001e\000\000\000\000\002o\000\000\000\000\000\000\000\000\000\000\005\232\000\000\000\000\000\000\005\147\000\000\000\000\002\137\000\000\000\000\002\240\001v\002\145\001h\001i\000\000\002\142\000\000\002\148\000\000\000\000\000\000\000\000\002\139\002\154\000\000\001\139\002\144\005[\000\000\000\000\000\000\000\000\005]\005g\0020\000\000\002\141\000\238\000\000\002\142\000\000\002\148\005\145\000\000\000\000\000\000\002\156\002\154\000\000\001\139\002\144\002\245\003\005\003\006\000\000\000\000\000\000\000\000\005\146\000\000\000\000\000\000\000\000\000\000\000\000\002\139\002\145\000\000\002\205\001e\002\156\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\001\127\002,\002-\001e\000\000\002\240\001v\000\000\001h\001i\000\000\002\142\001n\002\148\000\000\000\238\002n\000\000\000\000\002\154\000\000\001\139\002\144\000\000\002o\000\000\002\145\000\000\000\000\000\000\006\220\000\000\000\000\000\000\000\000\000\000\000\000\002\137\000\000\000\000\000\000\000\000\002\156\000\000\000\000\003\t\005\243\002\245\003\005\003\006\000\000\000\000\000\000\000\000\002\142\000\000\002\148\000\000\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\001d\001e\000\000\000\000\000\000\000\000\001\129\000\000\000\000\000\000\000\000\000\000\000\000\001\127\001\130\000\000\001\139\001l\000\000\002\156\001f\001v\000\000\001h\001i\001n\000\000\000\000\000\238\000\000\002\139\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0020\006v\002\141\000\238\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002o\000\000\001d\001e\003\t\006\021\006\222\000\000\000\000\001w\000\000\001x\002L\002\137\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\001f\001v\000\000\001h\001i\000\000\000\000\000\000\000\000\001\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\130\001\127\001\139\001l\000\000\000\000\000\000\000\000\000\000\002\142\000\000\002\148\000\000\001n\000\000\000\000\000\238\002\154\000\000\001\139\002\144\000\000\000\000\000\000\003\145\000\000\001w\001\031\001x\001\143\001 \
         \000\000\000\000\002\139\000\000\000\000\000\000\000\000\001d\001e\002\156\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\000m\000\000\000\000\001\"\001d\001e\001\127\001f\001v\000\000\001h\001i\000\000\000\000\000\000\000\000\000\000\001\184\001n\000\000\000\000\000\238\001\129\000\000\001f\001v\002\145\001h\001i\000\000\001\130\000\000\001\139\001l\001\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\254\000\000\000\000\000\000\001*\000\000\000\000\000\000\001w\000\000\001x\001\172\002\142\000\000\002\148\000\000\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\000\000\001w\000\000\001x\001\172\000\000\000\000\000\000\000\000\000\000\001\016\000\000\001\129\001d\001e\001\127\001\023\001$\000\000\002\156\001\130\001\031\001\139\001l\001 \
         \000\000\000\000\001n\000\000\000\000\000\238\000\000\001\127\001f\001v\000\000\001h\001i\000\000\000\000\001d\001e\000\000\001\174\001n\000\000\000\000\000\238\001\"\000\000\000\000\000\000\002,\002-\001e\000\000\000\000\002,\002-\001e\001f\001v\001>\001h\001i\000\000\000\000\002n\000\000\001%\000\000\000\000\002n\006\255\000\000\002o\001w\000\000\001x\001\172\002o\000\000\000\000\000\000\000\000\000\000\000\000\001\129\002\137\000\000\000\000\001*\000\000\002\137\000\000\001\130\001.\001\139\001l\001H\000\000\000\000\000\000\001w\001\129\001x\002L\001\127\000\000\000\000\000\000\000\000\001\130\000\000\001\139\001l\000\000\000\000\000\000\001n\000\000\001\016\000\238\000\000\000\000\000\000\000\000\001\023\001$\000\000\000\000\000\000\000\000\000\000\001\127\000\000\000\000\000\000\001\031\000\000\000\000\005;\000\000\000\000\000\000\000\000\001n\002\139\000\000\000\238\000\000\000\000\002\139\000\000\000\000\000\000\000\000\003\141\000\000\0020\000\000\002\141\000\238\000\000\0020\001\"\002\141\000\238\000\000\002,\002-\001e\000\000\006\168\000\000\000\000\000\000\000\000\000\000\001\129\001%\000\000\000\000\000\000\002n\000\000\000\000\001\130\000\000\001\139\001l\002\145\002o\000\000\000\000\000\000\002\145\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\137\001\129\001.\005=\000\000\002,\002-\001e\000\000\001\130\000\000\001\139\001l\000\000\002\142\000\000\003\015\000\000\000\000\002\142\002n\002\150\002\154\000\000\001\139\002\144\000\000\002\154\002o\001\139\002\144\000\000\000\000\001\016\000\000\000\000\000\000\000\000\000\000\001\023\005@\002\137\002,\002-\001e\002\156\000\000\000\000\000\000\000\000\002\156\000\000\000\000\001\031\000\000\000\000\001 \
         \002n\000\000\002\139\002,\002-\001e\000\000\000\000\002o\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\002n\000\000\000\000\002\137\000\000\001\"\000\000\000\000\002o\002,\002-\001e\000\000\000\000\000\000\004\127\000\000\005A\000\000\000\000\000\000\002\137\000\000\000\000\002n\002\139\000\000\000\000\002\145\005\011\006\215\005E\002o\005C\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\001\031\001.\002\137\001 \
e\001*\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\000\000\000\000\002\145\002n\000\000\000\000\002\156\000\000\001>\000\000\000\000\002o\002\142\000\000\002\164\001%\000\000\000\000\000\000\004\136\002\154\001\016\001\139\002\144\002\137\000\000\002\145\001\023\001$\000\000\002\142\000\000\002\166\000\000\002,\002-\001e\000\000\002\154\000\000\001\139\002\144\001.\002\156\000\000\001H\000\000\000\000\000\000\002n\000\000\002,\002-\001e\002\142\000\000\002\168\002o\000\000\000\000\000\000\002\156\002\154\000\000\001\139\002\144\002n\002,\002-\001e\002\137\000\000\000\000\001>\002o\000\000\000\000\000\000\000\000\000\000\001%\000\000\002n\002\139\006\176\002\156\000\000\002\137\000\000\000\000\002o\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\000\000\000\000\002\137\000\000\000\000\000\000\001.\000\000\000\000\001H\000\000\000\000\000\000\000\000\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\139\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002o\000\000\000\000\0020\000\000\002\141\000\238\000\000\002\139\000\000\000\000\000\000\000\000\002\137\002,\002-\001e\002\142\000\000\002\170\0020\000\000\002\141\000\238\002\139\002\154\000\000\001\139\002\144\002n\002,\002-\001e\000\000\000\000\002\145\0020\002o\002\141\000\238\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\002\156\000\000\002\137\000\000\002\145\002o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\142\000\000\002\172\002\137\000\000\002\145\000\000\000\000\002\154\002\139\001\139\002\144\000\000\000\000\002,\002-\001e\002\142\000\000\002\174\000\000\0020\000\000\002\141\000\238\002\154\000\000\001\139\002\144\002n\000\000\002\156\000\000\002\142\000\000\002\176\000\000\002o\000\000\000\000\000\000\002\154\000\000\001\139\002\144\000\000\002\139\000\000\002\156\000\000\002\137\000\000\000\000\002\145\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\002\139\000\000\002\156\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\002n\002\142\000\000\002\178\000\000\000\000\000\000\000\000\002o\002\154\002\145\001\139\002\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\137\000\000\000\000\000\000\000\000\002\145\000\000\000\000\002\139\000\000\000\000\002\156\000\000\000\000\002,\002-\001e\002\142\000\000\002\180\0020\000\000\002\141\000\238\000\000\002\154\000\000\001\139\002\144\002n\000\000\000\000\000\000\002\142\000\000\002\182\000\000\002o\000\000\000\000\000\000\002\154\000\000\001\139\002\144\000\000\000\000\000\000\002\156\000\000\002\137\000\000\002\145\000\000\000\000\000\000\000\000\000\000\000\000\002\139\002,\002-\001e\000\000\002\156\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\002n\000\000\002,\002-\001e\002\142\000\000\002\184\002o\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\002n\002,\002-\001e\002\137\000\000\000\000\000\000\002o\000\000\000\000\002\145\000\000\000\000\000\000\000\000\002n\002\139\000\000\002\156\000\000\002\137\000\000\000\000\002o\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\000\000\000\000\002\137\000\000\002\142\000\000\002\186\000\000\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\139\000\000\000\000\000\000\000\000\000\000\000\000\002\156\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\002\139\000\000\000\000\000\000\000\000\000\000\002,\002-\001e\002\142\000\000\002\188\0020\000\000\002\141\000\238\002\139\002\154\000\000\001\139\002\144\002n\002,\002-\001e\000\000\000\000\002\145\0020\002o\002\141\000\238\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\002\156\000\000\002\137\000\000\002\145\002o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\142\000\000\002\190\002\137\000\000\002\145\000\000\000\000\002\154\000\000\001\139\002\144\000\000\000\000\002,\002-\001e\002\142\000\000\002\192\000\000\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\002n\000\000\002\156\000\000\002\142\000\000\002\194\000\000\002o\000\000\000\000\000\000\002\154\000\000\001\139\002\144\000\000\002\139\000\000\002\156\000\000\002\137\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\002\139\000\000\002\156\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002o\000\000\002\145\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\137\000\000\000\000\000\000\000\000\002\145\000\000\000\000\002\139\001\031\000\000\000\000\001 \
         \000\000\000\000\000\000\000\000\002\142\000\000\002\196\0020\000\000\002\141\000\238\000\000\002\154\005R\001\139\002\144\000\000\000\000\000\000\000\000\002\142\000\000\002\198\001\"\000\000\000\000\000\000\000\000\002\154\000\000\001\139\002\144\000\000\001d\001e\002\156\000\000\000\000\000\000\002\145\000\000\005S\002\214\005T\000\000\000\000\002\139\000\000\000\000\000\000\002\217\002\156\000\000\001f\002\218\000\000\001h\001i\0020\000\000\002\141\000\238\001d\001e\000\000\000\000\001*\002\142\000\000\002\200\000\000\002\214\005U\000\000\000\000\002\154\000\000\001\139\002\144\002\217\000\000\000\000\001f\002\218\000\000\001h\001i\000\000\000\000\000\000\002\145\000\000\000\000\000\000\000\000\000\000\001\016\000\000\002\156\000\000\000\000\000\000\001\023\001$\000\000\005V\000\000\002,\002-\001e\000\000\000\000\000\000\000\000\005W\005X\000\000\005Y\002\142\000\000\002\202\000\000\002n\002,\002-\001e\002\154\001m\001\139\002\144\002o\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002n\001n\005Z\000\000\000\238\002\137\000\000\000\000\002o\000\000\001>\002\156\002,\002-\001e\000\000\000\000\001%\001m\000\000\000\000\002\137\000\000\000\000\000\000\000\000\005[\002n\000\000\000\000\001n\005]\005g\000\238\000\000\002o\002\219\000\000\000\000\000\000\000\000\005\145\000\000\000\000\001.\000\000\000\000\001\225\002\137\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\221\005\146\000\000\000\000\000\000\001\129\000\000\000\000\002\139\002\219\002,\002-\001e\001\138\000\000\001\139\001l\000\000\000\000\000\000\0020\000\000\002\141\000\238\002\139\002n\000\000\000\000\000\000\002\220\000\000\000\000\000\000\002o\001\129\000\000\0020\000\000\002\141\000\238\000\000\000\000\001\138\000\000\001\139\001l\002\137\000\000\000\000\000\000\000\000\002\139\002\145\000\000\000\000\000\000\002,\002-\001e\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\002\145\000\000\000\000\002n\000\000\000\000\002,\002-\001e\000\000\000\000\002o\002\142\000\000\0032\000\000\000\000\000\000\000\000\000\000\002\154\002n\001\139\002\144\002\137\000\000\000\000\002\145\002\142\002o\0038\000\000\000\000\000\000\000\000\000\000\002\154\002\139\001\139\002\144\000\000\000\000\002\137\002\156\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\002\142\000\000\003>\000\000\002\156\000\000\001\031\000\000\002\154\001 \
         \001\139\002\144\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\002n\002\139\000\000\000\000\002\156\000\000\001\"\000\000\002o\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\002\139\000\000\002\137\000\000\000\000\000\000\000\000\000\000\002\142\000\000\003D\000\000\0020\000\000\002\141\000\238\002\154\000\000\001\139\002\144\000\000\000\000\002,\002-\001e\000\000\002\145\002,\002-\001e\001*\000\000\000\000\000\000\000\000\000\000\000\000\002n\000\000\002\156\000\000\000\000\002n\000\000\002\145\002o\000\000\000\000\000\000\000\000\002o\000\000\000\000\000\000\002\142\000\000\003I\000\000\002\137\000\000\001\016\002\139\002\154\002\137\001\139\002\144\001\023\001$\000\000\000\000\000\000\000\000\002\142\0020\003N\002\141\000\238\002,\002-\001e\002\154\000\000\001\139\002\144\000\000\002\156\000\000\000\000\000\000\000\000\000\000\000\000\002n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002o\000\000\000\000\002\156\000\000\002\145\000\000\000\000\000\000\000\000\000\000\000\000\001>\002\137\000\000\000\000\000\000\002\139\000\000\001%\000\000\000\000\002\139\005\022\000\000\000\000\005\025\000\000\000\000\0020\000\000\002\141\000\238\002\142\0020\003U\002\141\000\238\000\000\000\000\000\000\002\154\000\000\001\139\002\144\000\000\001.\001d\001e\001H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\145\000\000\000\000\002\156\000\000\002\145\001f\001v\000\000\001h\001i\002\139\000\000\000\000\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\002\142\002n\003Z\000\000\000\000\002\142\000\000\003_\002\154\002o\001\139\002\144\000\000\002\154\000\000\001\139\002\144\001d\001e\000\000\000\000\001w\002\137\001x\002L\000\000\000\000\002\145\000\000\000\000\000\000\002\156\000\000\002,\002-\001e\002\156\001f\001v\000\000\001h\001i\000\000\000\000\000\000\000\000\000\000\000\000\002n\000\000\001\187\001e\001\127\000\000\000\000\002\142\002o\003b\000\000\000\000\000\000\000\000\000\000\002\154\001n\001\139\002\144\000\238\000\000\002\137\001f\002A\000\000\001h\001i\003\144\000\000\000\000\000\000\000\000\001w\002\139\001x\007\018\000\000\007\020\002\156\000\000\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\001d\001e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\236\000\000\000\000\000\000\001\127\003\152\003\005\003\006\002\239\000\000\000\000\001f\002\218\000\000\001h\001i\001n\001\129\002\145\000\238\000\000\002\139\000\000\000\000\000\000\001\130\000\000\001\139\001l\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\001\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\142\000\000\003\148\001n\001d\001e\000\238\000\000\002\154\001\031\001\139\002\144\001 \
         \000\000\000\000\0012\000\000\000\000\000\000\002\145\000\000\000\000\000\000\000\000\001f\001v\000\000\001h\001i\000\000\001\129\002\156\003\159\000\000\000\000\0013\001\"\000\000\001\130\001m\001\139\001l\0014\000\000\000\000\000\000\000\000\002\142\000\000\003\150\001\031\001n\000\000\001 \
         \000\238\002\154\0012\001\139\002\144\000\000\000\000\000\000\000\000\001\129\000\000\000\000\000\000\001w\000\000\001x\006j\001\130\000\000\001\139\001l\000\000\0013\001\"\002\156\001*\001d\001e\000\000\001M\000\000\000\000\002\219\000\000\000\000\000\000\001\031\000\000\000\000\001 \
         \000\000\000\000\0018\000\000\001\127\000\000\001f\001v\000\000\001h\001i\000\000\000\000\000\000\000\000\001\016\001n\001\129\000\000\000\238\000\000\001\023\001$\001\"\000\000\001\138\001*\001\139\001l\000\000\000\000\000\000\000\000\004\127\001d\001e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0018\000\000\000\000\000\000\000\000\004\130\001w\000\000\001x\001\176\000\000\001f\001v\001\016\001h\001i\000\000\000\000\000\000\001\023\001$\000\000\000\000\001*\001>\000\000\000\000\001d\001e\000\000\000\000\001%\000\000\001\129\000\000\001F\000\000\001\127\000\000\000\000\000\000\001\130\000\000\001\139\001l\000\000\000\000\001f\001v\001n\001h\001i\000\238\001\016\001w\000\000\001x\001\164\001.\001\023\001$\001H\000\000\000\000\000\000\001>\002,\002-\001e\000\000\000\000\000\000\001%\000\000\000\000\000\000\001F\000\000\000\000\000\000\000\000\000\000\000\000\001d\001e\001\127\000\000\000\000\000\000\004.\001w\000\000\001x\001\161\000\000\000\000\000\000\001n\000\000\001.\000\238\000\000\001H\001f\001v\001>\001h\001i\000\000\001\129\000\000\000\000\001%\000\000\000\000\000\000\004\136\001\130\000\000\001\139\001l\001\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001d\001e\001n\000\000\000\000\000\238\000\000\000\000\001.\000\000\000\000\001H\000\000\000\000\000\000\001w\000\000\001x\001z\000\000\001f\001v\000\000\001h\001i\000\000\001\129\001d\001e\000\000\002/\000\000\000\000\000\000\001\130\000\000\001\139\001l\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\001\127\001f\001v\000\000\001h\001i\000\000\000\000\001d\001e\000\000\000\000\001n\001d\001e\000\238\001\129\001w\000\000\001x\001}\000\000\000\000\000\000\001\130\000\000\001\139\001l\001f\001v\000\000\001h\001i\001f\001v\000\000\001h\001i\000\000\002,\002-\001e\000\000\000\000\001w\000\000\001x\001\128\001\127\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\142\000\000\000\000\000\000\001n\000\000\003\180\000\238\002\143\000\000\001\139\002\144\000\000\003\189\000\000\001w\001\129\001x\001\160\001\127\001w\000\000\001x\001\148\001\130\000\000\001\139\001l\000\000\000\000\000\000\001n\000\000\000\000\000\238\000\000\003\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\127\001d\001e\000\000\000\000\001\127\000\000\000\000\000\000\000\000\000\000\000\000\001n\000\000\000\000\000\238\000\000\001n\001\129\000\000\000\238\001f\001v\000\000\001h\001i\001\130\000\000\001\139\001l\000\000\000\000\002/\000\000\000\000\000\000\000\000\001d\001e\000\000\000\000\000\000\000\000\000\000\003\193\001\129\002\141\000\238\001\002\000\000\000\000\000\000\000\000\001\130\000\000\001\139\001l\001f\001v\000\000\001h\001i\000\000\000\000\001w\000\000\001x\001\156\000\000\000\000\001d\001e\001\129\000\000\000\000\000\000\000\000\001\129\000\000\000\000\001\130\003\183\001\139\001l\000\000\001\130\000\000\001\139\001l\000\000\001f\001v\000\000\001h\001i\001\127\001d\001e\000\000\000\000\001w\000\000\001x\002d\002\142\000\000\000\000\001n\000\000\000\000\000\238\000\000\002\143\000\000\001\139\002\144\001f\001v\000\000\001h\001i\001d\001e\000\000\000\000\000\000\000\000\000\000\001d\001e\000\000\001\127\000\000\001w\000\000\001x\002\250\000\000\000\000\000\000\000\000\001f\001v\001n\001h\001i\000\238\000\000\001f\001v\000\000\001h\001i\000\000\000\000\000\000\000\000\000\000\000\000\001w\000\000\001x\002\253\000\000\001\127\000\000\000\000\001\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\130\001n\001\139\001l\000\238\000\000\000\000\000\000\000\000\001w\000\000\001x\003\000\000\000\000\000\001\127\001w\000\000\001x\003\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001n\001\129\000\000\000\238\000\000\000\000\002,\002-\001e\001\130\000\000\001\139\001l\001\127\000\000\000\000\000\000\000\000\000\000\000\000\001\127\000\000\000\000\000\000\000\000\001n\000\000\001\031\000\238\003\180\001 \
         \000\000\001n\001I\001\129\000\238\003\189\001\031\000\000\000\000\001 \
         \000\000\001\130\001I\001\139\001l\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001K\001\"\001d\001e\000\000\000\000\003\190\001\129\000\000\000\000\001K\001\"\000\000\000\000\000\000\001\130\005\004\001\139\001l\000\000\000\000\000\000\001f\001v\000\000\001h\001i\000\000\000\000\000\000\000\000\000\000\001\129\000\000\000\000\000\000\000\000\000\000\000\000\001\129\001\130\000\000\001\139\001l\001*\000\000\000\000\001\130\002/\001\139\001l\000\000\001\031\000\000\001*\001 \
         \000\000\000\000\0012\000\000\003\193\0018\002\141\000\238\001\002\001w\000\000\001x\004p\000\000\000\000\0018\000\000\000\000\001\016\000\000\000\000\000\000\0017\001\"\001\023\001$\000\000\000\000\001\016\000\000\001d\001e\000\000\000\000\001\023\001$\000\000\001d\001e\000\000\001\127\003\183\000\000\000\000\000\000\000\000\000\000\004(\000\000\000\000\001f\002\218\001n\001h\001i\000\238\000\000\001f\002\218\000\000\001h\001i\000\000\000\000\002\142\000\000\001*\000\000\000\000\000\000\001>\000\000\002\143\000\000\001\139\002\144\000\000\001%\000\000\000\000\001>\001F\000\000\0018\000\000\001d\001e\001%\000\000\000\000\000\000\005:\000\000\000\000\000\000\000\000\001\016\000\000\000\000\000\000\000\000\000\000\001\023\001$\001.\001f\002\218\001H\001h\001i\000\000\000\000\001\129\000\000\001.\000\000\000\000\001H\000\000\000\000\001\130\000\000\001\139\001l\001m\000\000\000\000\000\000\000\000\001d\001e\001m\000\000\000\000\000\000\000\000\001n\000\000\000\000\000\238\000\000\000\000\000\000\001n\000\000\000\000\000\238\000\000\001>\001f\002\218\000\000\001h\001i\000\000\001%\000\000\000\000\000\000\001F\001d\001e\000\000\000\000\000\000\000\000\001d\001e\000\000\000\000\000\000\002\219\000\000\000\000\000\000\000\000\000\000\000\000\003\129\001m\001f\002\218\001.\001h\001i\001H\001f\002\218\000\000\001h\001i\001n\000\000\000\000\000\238\000\000\001\129\003\132\000\000\000\000\000\000\000\000\000\000\001\129\001\138\000\000\001\139\001l\001d\001e\000\000\001\138\000\000\001\139\001l\000\000\000\000\000\000\000\000\000\000\000\000\001\031\000\000\001m\001 \
         \005\205\003\129\000\000\001f\002\218\000\000\001h\001i\000\000\000\000\001n\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\003\131\000\000\000\000\001\"\000\000\000\000\001\129\000\000\000\000\001m\000\000\001d\001e\000\000\001\138\001m\001\139\001l\001d\001e\000\000\001n\000\000\000\000\000\238\003\129\000\000\001n\005\229\000\000\000\238\001f\002\218\000\000\001h\001i\000\000\000\000\001f\002\218\000\000\001h\001i\000\000\003\130\000\000\001*\000\000\000\000\000\000\001\129\000\000\000\000\000\000\000\000\000\000\003\129\001m\001\138\000\000\001\139\001l\0068\000\000\000\000\000\000\000\000\000\000\000\000\001n\000\000\000\000\000\238\000\000\000\000\003\134\001\016\000\000\000\000\000\000\000\000\001\129\001\023\001$\000\000\000\000\000\000\001\129\000\000\001\138\000\000\001\139\001l\000\000\000\000\001\138\000\000\001\139\001l\000\000\000\000\000\000\001d\001e\002\219\001m\000\000\000\000\000\000\006:\000\000\000\000\001m\000\000\000\000\000\000\000\000\001n\000\000\000\000\000\238\000\000\001f\002\218\001n\001h\001i\000\238\001>\001\129\001d\001e\000\000\000\000\000\000\001%\000\000\001\138\000\000\001\139\001l\000\000\000\000\001d\001e\000\000\000\000\000\000\001d\001e\001f\002\218\002\219\001h\001i\000\000\000\000\000\000\000\000\006\000\000\000\000\000\001.\001f\002\218\001\227\001h\001i\001f\001g\000\000\001h\001i\000\000\000\000\000\000\000\000\001\129\000\000\000\000\000\000\000\000\000\000\000\000\001\129\001\138\000\000\001\139\001l\001d\001e\000\000\001\138\000\000\001\139\001l\001m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\r\000\000\000\000\001n\001f\002\218\000\238\001h\001i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001m\000\000\000\000\000\000\000\000\001\031\000\000\000\000\001 \
         \000\000\000\000\000\000\001n\001m\001\031\000\238\000\000\001 \
         \001m\006\000\002,\002-\001e\000\000\000\000\001n\000\000\000\000\000\238\000\000\001n\000\000\001\"\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\"\004\127\003c\001\129\000\000\000\000\0068\000\000\000\000\000\000\004\127\001\138\000\000\001\139\001l\000\000\004\249\000\000\001m\0068\000\000\000\000\000\000\000\000\006\012\005\202\006\006\000\000\000\000\000\000\001n\001\129\000\000\000\238\001*\001\031\000\000\000\000\001 \
         \001\138\000\000\001\139\001l\001*\001\129\000\000\000\000\000\000\000\000\001\129\000\000\000\000\001\138\0069\001\139\001l\000\000\001\138\000\000\001\139\001l\000\000\001\"\000\000\001\016\003\133\006A\000\000\000\000\000\000\001\023\001$\004\127\001\016\002/\000\000\000\000\000\000\000\000\001\023\001$\000\000\001\031\000\000\000\000\001 \
         \0020\005\216\002\141\000\238\001\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\138\006E\001\139\001l\000\000\000\000\000\000\001*\000\000\000\000\000\000\001\"\001\031\000\000\000\000\001 \
         \000\000\000\000\001>\007(\000\000\004\127\006H\000\000\003f\001%\000\000\001>\000\000\004\136\000\000\006I\000\000\000\000\001%\000\000\005\226\001\016\004\136\001\"\000\000\000\000\000\000\001\023\001$\001d\001e\000\000\002\142\003\252\001d\001e\001.\000\000\001*\001H\002\143\000\000\001\139\002\144\006J\001.\000\000\006\154\001H\001f\001\137\000\000\001h\001i\001f\002\211\000\000\001h\001i\000\000\000\000\000\000\001\031\000\000\000\000\001 \
         \001*\000\000\001\016\002,\002-\001e\000\000\001>\001\023\001$\000\000\000\000\006K\000\000\001%\000\000\000\000\000\000\004\136\000\000\000\000\006L\000\000\001\"\001\031\000\000\003c\001 \
         \000\000\000\000\001\016\000\000\000\000\003\252\000\000\000\000\001\023\001$\000\000\000\000\000\000\001.\007)\000\000\001H\000\000\000\000\003\255\000\000\000\000\000\000\001\"\001\031\000\000\001>\001 \
         \005\251\001m\000\000\000\000\006N\001%\001m\000\000\000\000\004\136\001*\000\000\001\031\001n\006O\001 \
         \000\238\000\000\001n\006Q\000\000\000\238\000\000\001\"\000\000\000\000\001>\000\000\001\031\006S\000\000\001 \
         \001.\001%\000\000\001H\000\000\000\000\001*\001\"\001\016\000\000\002/\000\000\000\000\006T\001\023\001$\000\000\000\000\000\000\000\000\000\000\000\000\0020\001\"\002\141\000\238\000\000\000\000\001.\000\000\000\000\004\003\000\000\000\000\001*\001\031\001\016\000\000\001 \
         \000\000\000\000\001\129\001\023\001$\000\000\001\031\001\129\000\000\001 \
         \001\138\001*\001\139\001l\000\000\001\138\000\000\001\139\001l\003e\000\000\001>\000\000\001\"\000\000\001\016\000\000\001*\001%\000\000\000\000\001\023\001$\001\"\000\000\001\031\000\000\000\000\001 \
         \000\000\000\000\001\016\000\000\002\142\000\000\000\000\000\000\001\023\001$\001>\000\000\002\143\000\000\001\139\002\144\001.\001%\001\016\004\003\000\000\005\t\000\000\001\"\001\023\001$\000\000\001*\002,\002-\001e\000\000\002,\002-\001e\000\000\000\000\001*\001>\000\000\000\000\000\000\000\000\000\000\001.\001%\000\000\001H\000\000\005\022\000\000\003\197\006)\000\000\001>\002.\000\000\001\016\000\000\000\000\000\000\001%\000\000\001\023\001$\001X\001*\001\016\000\000\000\000\001>\000\000\001.\001\023\001$\001H\000\000\001%\000\000\000\000\000\000\001\151\000\000\000\000\001\031\000\000\000\000\001 \
         \001.\000\000\000\000\001H\000\000\000\000\001\031\000\000\001\016\001 \
         \000\000\000\000\000\000\000\000\001\023\001$\001.\000\000\000\000\001H\000\000\001>\000\000\001\"\000\000\000\000\000\000\000\000\001%\000\000\000\000\001>\001\192\001\"\000\000\002/\000\000\000\000\001%\002/\000\000\000\000\001\230\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\0020\000\000\002\141\000\238\001.\000\000\000\000\001H\000\000\001>\002,\002-\001e\000\000\001.\001*\001%\001H\000\000\000\000\001\232\000\000\000\000\000\000\000\000\001*\002,\002-\001e\000\000\000\000\000\000\001\031\002i\000\000\001 \
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\001.\000\000\001\016\001H\000\000\000\000\002k\000\000\001\023\001$\000\000\001\031\001\016\002\142\001 \
         \000\000\001\"\002\142\001\023\001$\000\000\002\143\000\000\001\139\002\144\002\143\000\000\001\139\002\144\002,\002-\001e\000\000\000\000\000\000\000\000\000\000\000\000\001\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\129\000\000\001>\000\000\000\000\000\000\000\000\001*\000\000\001%\002/\000\000\001>\002C\000\000\000\000\000\000\000\000\000\000\001%\000\000\000\000\0020\002V\002\141\000\238\002/\000\000\000\000\001*\002,\002-\001e\000\000\000\000\000\000\001.\001\016\0020\001H\002\141\000\238\000\000\001\023\001$\000\000\001.\000\000\000\000\001H\000\000\000\000\000\000\002\140\002,\002-\001e\000\000\000\000\001\016\000\000\000\000\000\000\000\000\000\000\001\023\001$\000\000\000\000\000\000\000\000\000\000\002/\000\000\000\000\000\000\001\031\002\155\000\000\001 \
         \000\000\000\000\002\142\000\000\0020\000\000\002\141\000\238\001\031\001>\002\143\001 \
         \001\139\002\144\000\000\000\000\001%\000\000\002\142\000\000\002u\000\000\000\000\001\"\001\031\000\000\002\143\001 \
         \001\139\002\144\000\000\001>\000\000\000\000\000\000\001\"\000\000\000\000\001%\000\000\000\000\000\000\002z\001.\000\000\002/\001H\002,\002-\001e\000\000\001\"\000\000\000\000\000\000\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\000\000\002\142\001.\001*\000\000\001H\002/\003+\000\000\002\143\000\000\001\139\002\144\000\000\000\000\001*\000\000\000\000\0020\000\000\002\141\000\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\031\000\000\001*\001 \
         \001\016\000\000\000\000\000\000\000\000\000\000\001\023\001$\000\000\000\000\000\000\000\000\001\016\001\031\000\000\000\000\001 \
         \000\000\001\023\001$\000\000\002\142\000\000\001\"\000\000\000\000\000\000\001\031\001\016\002\143\001 \
         \001\139\002\144\000\000\001\023\001$\000\000\000\000\000\000\000\000\001\"\000\000\000\000\000\000\000\000\002\142\002/\000\000\000\000\000\000\000\000\000\000\001>\002\143\001\"\001\139\002\144\000\000\0020\001%\002\141\000\238\000\000\002\226\001>\000\000\001*\001\031\000\000\000\000\001 \
         \001%\000\000\000\000\000\000\002\233\000\000\000\000\000\000\000\000\001>\001\031\000\000\001*\001 \

         \001%\001\023\001$\000\000\004\226\001\031\000\000\001>\001 \
         \001\016\001.\000\000\001\"\001H\001%\001\023\001$\000\000\004\238\000\000\005=\000\000\000\000\001\"\000\000\000\000\000\000\001.\000\000\000\000\001H\000\000\001\"\000\000\000\000\000\000\000\000\005=\000\000\000\000\000\000\001.\000\000\001\031\001H\000\000\001 \
         \001>\000\000\000\000\001\016\000\000\000\000\000\000\001%\005=\001\023\005@\005\b\000\000\000\000\001>\000\000\000\000\000\000\000\000\001*\001\016\001%\000\000\001\"\000\000\005\024\001\023\005@\001*\000\000\001\031\000\000\000\000\005;\001.\000\000\000\000\001H\001\016\000\000\000\000\000\000\000\000\000\000\001\023\005@\000\000\000\000\001.\001\016\001\031\001H\000\000\005;\000\000\001\023\001$\001\"\001\016\000\000\000\000\000\000\005A\000\000\001\023\001$\001*\000\000\000\000\000\000\000\000\000\000\001\031\000\000\005\011\001 \
         \005D\001\"\005C\005A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001.\000\000\005\011\000\000\005B\000\000\005C\001\016\005A\000\000\001\"\005=\001>\001\023\001$\001\031\000\000\001.\001 \
         \001%\005\011\001>\005N\005\181\005C\000\000\000\000\000\000\001%\000\000\000\000\005=\005\199\001\031\000\000\001.\001 \
         \000\000\000\000\000\000\000\000\001\016\001\"\000\000\000\000\000\000\001.\001\023\005@\001H\000\000\000\000\000\000\001*\001\031\001.\000\000\001 \
m
      ) )

  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "+" in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "+." in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = ty;
                      MenhirLib.EngineTypes.startp = _startpos_ty_;
                      MenhirLib.EngineTypes.endp = _endpos_ty_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let tyvar : Asttypes.label = Obj.magic tyvar in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tyvar_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_alias (ty, tyvar) in
            let _endpos__1_, _startpos__1_ = (_endpos_tyvar_, _startpos_ty_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let body : Parsetree.pattern * Parsetree.expression * bool =
          Obj.magic body
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : let_binding =
          let attrs2 = let _1 = _1_inlined2 in

                       _1 in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 = let _1 = _1_inlined1 in

                       _1 in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in

          let attrs = attrs1 @ attrs2 in
          mklb ~loc:_sloc false body attrs
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = Lident _1 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.core_type = _2 in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : Parsetree.module_type = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.core_type =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in

            let lid, cstrs, attrs = package_type_of_module_type _1 in
            let descr = Ptyp_package (lid, cstrs) in
            mktyp ~loc:_sloc ~attrs descr
          in
          let _3 =
            let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
            let _2 = let _1 = _1_inlined1 in

                     _1 in

            (_1, _2)
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in

          wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Asttypes.label = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_var _2 in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_any in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let tid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys = [] in

              Ptyp_constr (tid, tys)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let tid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys = [ ty ] in

              Ptyp_constr (tid, tys)
            in
            let _startpos__1_ = _startpos_ty_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let tid =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys = let tys = let xs = List.rev xs in

                                  xs in

                        tys in

              Ptyp_constr (tid, tys)
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.object_field list * Asttypes.closed_flag =
          Obj.magic _2
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let f, c = _2 in
              Ptyp_object (f, c)
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_object ([], Closed) in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys = [] in

              Ptyp_class (cid, tys)
            in
            let _startpos__1_ = _startpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ty;
                  MenhirLib.EngineTypes.startp = _startpos_ty_;
                  MenhirLib.EngineTypes.endp = _endpos_ty_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys = [ ty ] in

              Ptyp_class (cid, tys)
            in
            let _startpos__1_ = _startpos_ty_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = xs;
                      MenhirLib.EngineTypes.startp = _startpos_xs_;
                      MenhirLib.EngineTypes.endp = _endpos_xs_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _3 : unit = Obj.magic _3 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let cid =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys = let tys = let xs = List.rev xs in

                                  xs in

                        tys in

              Ptyp_class (cid, tys)
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.row_field = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_variant ([ _2 ], Closed, None) in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xs : Parsetree.row_field list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let _3 = let _1 = let xs = List.rev xs in

                                xs in

                       _1 in

              Ptyp_variant (_3, Closed, None)
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let xs : Parsetree.row_field list = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.row_field = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let _4 = let _1 = let xs = List.rev xs in

                                xs in

                       _1 in

              Ptyp_variant (_2 :: _4, Closed, None)
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xs : Parsetree.row_field list = Obj.magic xs in
        let _2 : unit option = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let _3 = let _1 = let xs = List.rev xs in

                                xs in

                       _1 in

              Ptyp_variant (_3, Open, None)
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_variant ([], Open, None) in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xs : Parsetree.row_field list = Obj.magic xs in
        let _2 : unit option = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let _3 = let _1 = let xs = List.rev xs in

                                xs in

                       _1 in

              Ptyp_variant (_3, Closed, Some [])
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = xs;
                      MenhirLib.EngineTypes.startp = _startpos_xs_;
                      MenhirLib.EngineTypes.endp = _endpos_xs_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let xs_inlined1 : Asttypes.label list = Obj.magic xs_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let xs : Parsetree.row_field list = Obj.magic xs in
        let _2 : unit option = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let _5 =
                let xs = xs_inlined1 in
                let _1 = let xs = List.rev xs in

                         xs in

                _1
              in
              let _3 = let _1 = let xs = List.rev xs in

                                xs in

                       _1 in

              Ptyp_variant (_3, Closed, Some _5)
            in
            let _endpos__1_ = _endpos__6_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_extension _1 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string Asttypes.loc =
          let _1 =
            let _1 = _1 in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkloc _1 (make_loc _sloc)
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : string Asttypes.loc = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : string Asttypes.loc =
          let _1 =
            let _1 = _1 ^ "." ^ _3.txt in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkloc _1 (make_loc _sloc)
          in

          _1
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.payload = Obj.magic _3 in
        let _2 : string Asttypes.loc = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.attribute =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in

          Attr.mk ~loc:(make_loc _sloc) _2 _3
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.class_expr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.class_expr = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.class_expr = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.class_expr =
          let _2 = let _1 = _1_inlined1 in

                   _1 in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          wrap_class_attrs ~loc:_sloc _3 _2
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.class_expr = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : let_bindings = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.class_expr =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          class_of_let_bindings ~loc:_sloc _1 _3
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.class_expr = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.class_expr =
          let _5 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos__5_ = _endpos__1_inlined2_ in
          let _4 = let _1 = _1_inlined1 in

                   _1 in
          let _3 = Fresh in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let loc = (_startpos__2_, _endpos__5_) in
          let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
          mkclass ~loc:_sloc ~attrs:_4 (Pcl_open (od, _7))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.class_expr = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.class_expr =
          let _5 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 = let _1 = _1_inlined2 in

                   _1 in
          let _3 = Override in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let loc = (_startpos__2_, _endpos__5_) in
          let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
          mkclass ~loc:_sloc ~attrs:_4 (Pcl_open (od, _7))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.attribute = Obj.magic _2 in
        let _1 : Parsetree.class_expr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.class_expr = Cl.attr _1 _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : (Asttypes.arg_label * Parsetree.expression) list =
          Obj.magic xs
        in
        let _1 : Parsetree.class_expr = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 =
              let _2 = let xs = List.rev xs in

                       xs in

              Pcl_apply (_1, _2)
            in

            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 = Pcl_extension _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = self;
              MenhirLib.EngineTypes.startp = _startpos_self_;
              MenhirLib.EngineTypes.endp = _endpos_self_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let self : string Asttypes.loc option = Obj.magic self in
        let _4 : Parsetree.class_expr = Obj.magic _4 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.class_field =
          let _6 = let _1 = _1_inlined2 in

                   _1 in
          let _endpos__6_ = _endpos__1_inlined2_ in
          let _3 = let _1 = _1_inlined1 in

                   _1 in
          let _2 = Fresh in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3 @ _6) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = self;
              MenhirLib.EngineTypes.startp = _startpos_self_;
              MenhirLib.EngineTypes.endp = _endpos_self_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let self : string Asttypes.loc option = Obj.magic self in
        let _4 : Parsetree.class_expr = Obj.magic _4 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.class_field =
          let _6 = let _1 = _1_inlined3 in

                   _1 in
          let _endpos__6_ = _endpos__1_inlined3_ in
          let _3 = let _1 = _1_inlined2 in

                   _1 in
          let _2 = Override in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3 @ _6) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 :
            (Asttypes.label Asttypes.loc
            * Asttypes.mutable_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          Obj.magic _2
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.class_field =
          let _3 = let _1 = _1_inlined1 in

                   _1 in
          let _endpos__3_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let v, attrs = _2 in
          let docs = symbol_docs _sloc in
          mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs @ _3) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 :
            (Asttypes.label Asttypes.loc
            * Asttypes.private_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          Obj.magic _2
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.class_field =
          let _3 = let _1 = _1_inlined1 in

                   _1 in
          let _endpos__3_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let meth, attrs = _2 in
          let docs = symbol_docs _sloc in
          mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs @ _3) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _3 : Parsetree.core_type * Parsetree.core_type = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.class_field =
          let _4 =
            let _1 = _1_inlined2 in
            _1
          in

          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2 @ _4) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.class_field =
          let _4 =
            let _1 = _1_inlined2 in
            _1
          in

          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2 @ _4) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.class_field =
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.attribute = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.class_field =
          let _1 =
            let _1 = Pcf_attribute _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkcf ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.class_expr = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.class_expr = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Parsetree.class_expr = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.class_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 = Pcl_constraint (_4, _2) in

            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.class_expr = Obj.magic _2 in
        let _1 :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 =
              let l, o, p = _1 in
              Pcl_fun (l, o, p, _2)
            in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e : Parsetree.class_expr = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let _1 :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 =
              let l, o, p = _1 in
              Pcl_fun (l, o, p, e)
            in

            let _endpos__1_ = _endpos_e_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let e : Parsetree.class_expr = Obj.magic e in
        let _1 :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 =
              let l, o, p = _1 in
              Pcl_fun (l, o, p, e)
            in

            let _endpos__1_ = _endpos_e_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          reloc_pat ~loc:_sloc _2
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.core_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_constraint (_2, _4) in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.pattern =
          let _endpos = _endpos__0_ in
          let _symbolstartpos = _endpos in
          let _sloc = (_symbolstartpos, _endpos) in
          ghpat ~loc:_sloc Ppat_any
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.core_type = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_any in

            let _endpos__1_ = _endpos__0_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _endpos in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _3 : Parsetree.class_type = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.class_type_field =
          let _4 =
            let _1 = _1_inlined2 in
            _1
          in

          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2 @ _4) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = flags;
                          MenhirLib.EngineTypes.startp = _startpos_flags_;
                          MenhirLib.EngineTypes.endp = _endpos_flags_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let flags : Asttypes.mutable_flag * Asttypes.virtual_flag =
          Obj.magic flags
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.class_type_field =
          let _4 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos__4_ = _endpos__1_inlined3_ in
          let _3 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let label =
              let _1 = _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let mut, virt = flags in
            (label, mut, virt, ty)
          in

          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2 @ _4) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let _1_inlined3 : Parsetree.core_type = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let _3 : Asttypes.private_flag * Asttypes.virtual_flag = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : Parsetree.class_type_field =
          let _7 =
            let _1 = _1_inlined4 in
            _1
          in

          let _endpos__7_ = _endpos__1_inlined4_ in
          let _6 =
            let _1 = _1_inlined3 in
            _1
          in

          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let p, v = _3 in
          let docs = symbol_docs _sloc in
          mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2 @ _7) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _3 : Parsetree.core_type * Parsetree.core_type = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.class_type_field =
          let _4 =
            let _1 = _1_inlined2 in
            _1
          in

          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2 @ _4) ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.class_type_field =
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.attribute = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.class_type_field =
          let _1 =
            let _1 = Pctf_attribute _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkctf ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.class_type =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys = let tys = [] in

                        tys in

              Pcty_constr (cid, tys)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkcty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.class_type =
          let _1 =
            let _1 =
              let cid =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys =
                let tys = let params = let xs = List.rev xs in

                                       xs in

                          params in

                tys
              in

              Pcty_constr (cid, tys)
            in

            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkcty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.class_type =
          let _1 =
            let _1 = Pcty_extension _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkcty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xss : Parsetree.class_type_field list list = Obj.magic xss in
        let _1_inlined2 : Parsetree.core_type = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.class_type =
          let _3 =
            let _1 = _1_inlined2 in
            let _2 =
              let _1 = let _1 = List.flatten xss in

                       _1 in

              let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              extra_csig _startpos _endpos _1
            in

            Csig.mk _1 _2
          in

          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xss : Parsetree.class_type_field list list = Obj.magic xss in
        let _1_inlined2 : Parsetree.core_type = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.class_type =
          let _3 =
            let _1 = _1_inlined2 in
            let _2 =
              let _1 = let _1 = List.flatten xss in

                       _1 in

              let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              extra_csig _startpos _endpos _1
            in

            Csig.mk _1 _2
          in

          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "object" _loc__1_ "end" _loc__4_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.attribute = Obj.magic _2 in
        let _1 : Parsetree.class_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.class_type = Cty.attr _1 _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.class_type = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.class_type =
          let _5 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos__5_ = _endpos__1_inlined2_ in
          let _4 =
            let _1 = _1_inlined1 in
            _1
          in

          let _3 = Fresh in

          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let loc = (_startpos__2_, _endpos__5_) in
          let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
          mkcty ~loc:_sloc ~attrs:_4 (Pcty_open (od, _7))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.class_type = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.class_type =
          let _5 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            _1
          in

          let _3 = Override in

          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let loc = (_startpos__2_, _endpos__5_) in
          let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
          mkcty ~loc:_sloc ~attrs:_4 (Pcty_open (od, _7))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.class_expr = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.class_expr = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.class_expr = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.class_expr =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__3_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys = let tys = [] in

                        tys in

              Pcl_constr (cid, tys)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 =
              let cid =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let tys =
                let tys = let params = let xs = List.rev xs in

                                       xs in

                          params in

                tys
              in

              Pcl_constr (cid, tys)
            in

            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xss : Parsetree.class_field list list = Obj.magic xss in
        let _1_inlined2 : Parsetree.pattern = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 =
              let _3 =
                let _1 = _1_inlined2 in
                let _2 =
                  let _1 = let _1 = List.flatten xss in

                           _1 in

                  let _endpos__1_, _startpos__1_ =
                    (_endpos_xss_, _startpos_xss_)
                  in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  extra_cstr _startpos _endpos _1
                in

                Cstr.mk _1 _2
              in

              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              let _loc__4_ = (_startpos__4_, _endpos__4_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "object" _loc__1_ "end" _loc__4_
            in

            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.class_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.class_expr = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 = Pcl_constraint (_2, _4) in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.class_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.class_expr = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.class_expr =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "(" _loc__1_ ")" _loc__5_
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkclass ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xss : Parsetree.class_field list list = Obj.magic xss in
        let _1_inlined2 : Parsetree.pattern = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.class_expr =
          let _3 =
            let _1 = _1_inlined2 in
            let _2 =
              let _1 = let _1 = List.flatten xss in

                       _1 in

              let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              extra_cstr _startpos _endpos _1
            in

            Cstr.mk _1 _2
          in

          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.class_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.class_type = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = domain;
                  MenhirLib.EngineTypes.startp = _startpos_domain_;
                  MenhirLib.EngineTypes.endp = _endpos_domain_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let codomain : Parsetree.class_type = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : Parsetree.core_type = Obj.magic domain in
        let label : string = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : Parsetree.class_type =
          let _1 =
            let _1 =
              let label = Optional label in

              Pcty_arrow (label, domain, codomain)
            in

            let _endpos__1_, _startpos__1_ =
              (_endpos_codomain_, _startpos_label_)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkcty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = domain;
                  MenhirLib.EngineTypes.startp = _startpos_domain_;
                  MenhirLib.EngineTypes.endp = _endpos_domain_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let codomain : Parsetree.class_type = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : Parsetree.core_type = Obj.magic domain in
        let _2 : unit = Obj.magic _2 in
        let label : string = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : Parsetree.class_type =
          let _1 =
            let _1 =
              let label = Labelled label in

              Pcty_arrow (label, domain, codomain)
            in

            let _endpos__1_, _startpos__1_ =
              (_endpos_codomain_, _startpos_label_)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkcty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = domain;
                  MenhirLib.EngineTypes.startp = _startpos_domain_;
                  MenhirLib.EngineTypes.endp = _endpos_domain_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let codomain : Parsetree.class_type = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : Parsetree.core_type = Obj.magic domain in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_domain_ in
        let _endpos = _endpos_codomain_ in
        let _v : Parsetree.class_type =
          let _1 =
            let _1 =
              let label = Nolabel in

              Pcty_arrow (label, domain, codomain)
            in

            let _endpos__1_, _startpos__1_ =
              (_endpos_codomain_, _startpos_domain_)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkcty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = csig;
                  MenhirLib.EngineTypes.startp = _startpos_csig_;
                  MenhirLib.EngineTypes.endp = _endpos_csig_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _8;
                      MenhirLib.EngineTypes.startp = _startpos__8_;
                      MenhirLib.EngineTypes.endp = _endpos__8_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = virt;
                                  MenhirLib.EngineTypes.startp = _startpos_virt_;
                                  MenhirLib.EngineTypes.endp = _endpos_virt_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = ext;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_ext_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_ext_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state = _;
                                              MenhirLib.EngineTypes.semv = _2;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__2_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__2_;
                                              MenhirLib.EngineTypes.next =
                                                {
                                                  MenhirLib.EngineTypes.state =
                                                    _menhir_s;
                                                  MenhirLib.EngineTypes.semv =
                                                    _1;
                                                  MenhirLib.EngineTypes.startp =
                                                    _startpos__1_;
                                                  MenhirLib.EngineTypes.endp =
                                                    _endpos__1_;
                                                  MenhirLib.EngineTypes.next =
                                                    _menhir_stack;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let bs : Parsetree.class_type_declaration list = Obj.magic bs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let csig : Parsetree.class_type = Obj.magic csig in
        let _8 : unit = Obj.magic _8 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let virt : Asttypes.virtual_flag = Obj.magic virt in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v :
            string Asttypes.loc option * Parsetree.class_type_declaration list =
          let _1 =
            let a =
              let attrs2 =
                let _1 = _1_inlined3 in
                _1
              in

              let _endpos_attrs2_ = _endpos__1_inlined3_ in
              let id =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let attrs1 =
                let _1 = _1_inlined1 in
                _1
              in

              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let attrs = attrs1 @ attrs2 in
              let loc = make_loc _sloc in
              let docs = symbol_docs _sloc in
              (ext, Ci.mk id csig ~virt ~params ~attrs ~loc ~docs)
            in

            let x, b = a in
            (x, b :: bs)
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string * char option = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.constant =
          let n, m = _1 in
          Pconst_integer (n, m)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : char = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.constant = Pconst_char _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string * Location.t * string option = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.constant =
          let s, strloc, d = _1 in
          Pconst_string (s, strloc, d)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string * char option = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.constant =
          let f, m = _1 in
          Pconst_float (f, m)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.label = "[]" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.label = "()" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = "false" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = "true" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Asttypes.label = let _1 = "::" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = let _3 = "::" in

                               Ldot (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = let _1 = "::" in

                               Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.core_type = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.core_type * Parsetree.core_type = (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.constructor_arguments =
          let tys = let xs = let xs = [ x ] in

                             List.rev xs in

                    xs in

          Pcstr_tuple tys
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.constructor_arguments =
          let tys = let xs = let xs = x :: xs in

                             List.rev xs in

                    xs in

          Pcstr_tuple tys
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.label_declaration list = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.constructor_arguments = Pcstr_record _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.constructor_declaration list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let xs : Parsetree.constructor_declaration list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.constructor_declaration list =
          let cs = List.rev xs in

          cs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type = let _1 = _1 in

                                       _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.attribute = Obj.magic _2 in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type = Typ.attr _1 _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.direction_flag = Upto in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.direction_flag = Downto in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined3;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp = _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.expression = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : Parsetree.module_expr = Obj.magic _5 in
        let _1_inlined3 : string option = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _3 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_letmodule (_4, _5, _7), _3)
          in

          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined4;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined3;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined2;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined2_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _2;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__2_;
                                      MenhirLib.EngineTypes.endp = _endpos__2_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : Parsetree.expression = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let _2_inlined1 :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          Obj.magic _2_inlined1
        in
        let _1_inlined3 : Asttypes.label = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 =
              let ( _endpos__1_inlined1_,
                    _endpos__1_,
                    _startpos__1_,
                    _1_inlined1,
                    _2,
                    _1 ) =
                ( _endpos__1_inlined4_,
                  _endpos__1_inlined3_,
                  _startpos__1_inlined3_,
                  _1_inlined4,
                  _2_inlined1,
                  _1_inlined3 )
              in
              let _3 =
                let _1 = _1_inlined1 in
                _1
              in

              let _endpos__3_ = _endpos__1_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let vars, args, res = _2 in
              Te.decl _1 ~vars ~args ?res ~attrs:_3 ~loc:(make_loc _sloc)
            in

            let _3 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_letexception (_4, _6), _3)
          in

          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.expression = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : Parsetree.module_expr = Obj.magic _5 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let _3 = Fresh in

            let open_loc = make_loc (_startpos__2_, _endpos__5_) in
            let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
            (Pexp_open (od, _7), _4)
          in

          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined3;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp = _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.expression = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : Parsetree.module_expr = Obj.magic _5 in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let _1_inlined2 : string Asttypes.loc option = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 =
              let _1_inlined1, _1 = (_1_inlined3, _1_inlined2) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let _3 = Override in

            let open_loc = make_loc (_startpos__2_, _endpos__5_) in
            let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
            (Pexp_open (od, _7), _4)
          in

          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.case list = Obj.magic xs in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.expression =
          let _1 =
            let _3 = let xs = let xs = List.rev xs in

                              xs in

                     xs in

            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_function _3, _2)
          in

          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _3 :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          Obj.magic _3
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let l, o, p = _3 in
            (Pexp_fun (l, o, p, _4), _2)
          in

          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined2;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined2_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.expression = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs : string Asttypes.loc list = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.expression =
          let _1 =
            let _5 = xs in

            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let _endpos = _endpos__7_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            ((mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2)
          in

          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.case list = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.expression =
          let _1 =
            let _5 = let xs = let xs = List.rev xs in

                              xs in

                     xs in

            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_match (_3, _5), _2)
          in

          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.case list = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.expression =
          let _1 =
            let _5 = let xs = let xs = List.rev xs in

                              xs in

                     xs in

            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_try (_3, _5), _2)
          in

          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            syntax_error ()
          in

          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined2;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined2_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.expression = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_ifthenelse (_3, _5, Some _7), _2)
          in

          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_ifthenelse (_3, _5, None), _2)
          in

          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_while (_3, _5), _2)
          in

          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _8;
                  MenhirLib.EngineTypes.startp = _startpos__8_;
                  MenhirLib.EngineTypes.endp = _endpos__8_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _7;
                      MenhirLib.EngineTypes.startp = _startpos__7_;
                      MenhirLib.EngineTypes.endp = _endpos__7_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _6;
                          MenhirLib.EngineTypes.startp = _startpos__6_;
                          MenhirLib.EngineTypes.endp = _endpos__6_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _5;
                              MenhirLib.EngineTypes.startp = _startpos__5_;
                              MenhirLib.EngineTypes.endp = _endpos__5_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _4;
                                  MenhirLib.EngineTypes.startp = _startpos__4_;
                                  MenhirLib.EngineTypes.endp = _endpos__4_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _3;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__3_;
                                      MenhirLib.EngineTypes.endp = _endpos__3_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv =
                                            _1_inlined2;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_inlined2_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_inlined2_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state = _;
                                              MenhirLib.EngineTypes.semv =
                                                _1_inlined1;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__1_inlined1_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__1_inlined1_;
                                              MenhirLib.EngineTypes.next =
                                                {
                                                  MenhirLib.EngineTypes.state =
                                                    _menhir_s;
                                                  MenhirLib.EngineTypes.semv =
                                                    _1;
                                                  MenhirLib.EngineTypes.startp =
                                                    _startpos__1_;
                                                  MenhirLib.EngineTypes.endp =
                                                    _endpos__1_;
                                                  MenhirLib.EngineTypes.next =
                                                    _menhir_stack;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _10 : unit = Obj.magic _10 in
        let _9 : Parsetree.expression = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : Parsetree.expression = Obj.magic _7 in
        let _6 : Asttypes.direction_flag = Obj.magic _6 in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_for (_3, _5, _7, _6, _9), _2)
          in

          let _endpos__1_ = _endpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_assert _3, _2)
          in

          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_lazy _3, _2)
          in

          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : (Asttypes.arg_label * Parsetree.expression) list =
          Obj.magic xs
        in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _2 = let xs = List.rev xs in

                       xs in

              Pexp_apply (_1, _2)
            in

            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let xs : Parsetree.expression list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _1 = let es = let xs = List.rev xs in

                                xs in

                       es in

              Pexp_tuple _1
            in

            let _endpos__1_, _startpos__1_ = (_endpos_xs_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Pexp_construct (_1, Some _2)
            in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = Pexp_variant (_1, Some _2) in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = op;
              MenhirLib.EngineTypes.startp = _startpos_op_;
              MenhirLib.EngineTypes.endp = _endpos_op_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let op : string = Obj.magic op in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = op in

                let _endpos__1_, _startpos__1_ = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = op;
              MenhirLib.EngineTypes.startp = _startpos_op_;
              MenhirLib.EngineTypes.endp = _endpos_op_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let op : string = Obj.magic op in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = op in

                let _endpos__1_, _startpos__1_ = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = op;
              MenhirLib.EngineTypes.startp = _startpos_op_;
              MenhirLib.EngineTypes.endp = _endpos_op_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let op : string = Obj.magic op in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = op in

                let _endpos__1_, _startpos__1_ = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = op;
              MenhirLib.EngineTypes.startp = _startpos_op_;
              MenhirLib.EngineTypes.endp = _endpos_op_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let op : string = Obj.magic op in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = op in

                let _endpos__1_, _startpos__1_ = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = op;
              MenhirLib.EngineTypes.startp = _startpos_op_;
              MenhirLib.EngineTypes.endp = _endpos_op_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let op : string = Obj.magic op in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = op in

                let _endpos__1_, _startpos__1_ = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "+" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "+." in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "+=" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "-" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "-." in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "*" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "%" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "=" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "<" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = ">" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "or" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "||" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "&" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = "&&" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let e2 : Parsetree.expression = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : Parsetree.expression = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let op =
                let _1 = ":=" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix e1 op e2
            in

            let _endpos__1_, _startpos__1_ = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              mkuminus ~oploc:_loc__1_ _1 _2
            in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              mkuplus ~oploc:_loc__1_ _1 _2
            in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : let_bindings = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          expr_of_let_bindings ~loc:_sloc _1 _3
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = bindings;
                  MenhirLib.EngineTypes.startp = _startpos_bindings_;
                  MenhirLib.EngineTypes.endp = _endpos_bindings_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let body : Parsetree.expression = Obj.magic body in
        let _3 : unit = Obj.magic _3 in
        let bindings :
            Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list
            =
          Obj.magic bindings
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_body_ in
        let _v : Parsetree.expression =
          let pbop_op =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos_pbop_op_ = _startpos__1_ in
          let _endpos = _endpos_body_ in
          let _symbolstartpos = _startpos_pbop_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let pbop_pat, pbop_exp, rev_ands = bindings in
          let ands = List.rev rev_ands in
          let pbop_loc = make_loc _sloc in
          let let_ = { pbop_op; pbop_pat; pbop_exp; pbop_loc } in
          mkexp ~loc:_sloc (Pexp_letop { let_; ands; body })
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          mkexp_cons ~loc:_sloc _loc__2_
            (ghexp ~loc:_sloc (Pexp_tuple [ _1; _3 ]))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkexp ~loc:_sloc (Pexp_setinstvar (_1, _3))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _3 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkexp ~loc:_sloc (Pexp_setfield (_1, _3, _5))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = d;
                              MenhirLib.EngineTypes.startp = _startpos_d_;
                              MenhirLib.EngineTypes.endp = _endpos_d_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _5 : unit = Obj.magic _5 in
        let i : Parsetree.expression = Obj.magic i in
        let _3 : unit = Obj.magic _3 in
        let d : unit = Obj.magic d in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 = let r = Some v in

                   (array, d, Paren, i, r) in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr builtin_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = d;
                              MenhirLib.EngineTypes.startp = _startpos_d_;
                              MenhirLib.EngineTypes.endp = _endpos_d_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _5 : unit = Obj.magic _5 in
        let i : Parsetree.expression = Obj.magic i in
        let _3 : unit = Obj.magic _3 in
        let d : unit = Obj.magic d in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 = let r = Some v in

                   (array, d, Brace, i, r) in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr builtin_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = d;
                              MenhirLib.EngineTypes.startp = _startpos_d_;
                              MenhirLib.EngineTypes.endp = _endpos_d_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _5 : unit = Obj.magic _5 in
        let i : Parsetree.expression = Obj.magic i in
        let _3 : unit = Obj.magic _3 in
        let d : unit = Obj.magic d in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 = let r = Some v in

                   (array, d, Bracket, i, r) in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr builtin_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = es;
                      MenhirLib.EngineTypes.startp = _startpos_es_;
                      MenhirLib.EngineTypes.endp = _endpos_es_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = Some v in

            let i = es in

            let d = let _1 = None in

                    (_1, _2) in

            (array, d, Paren, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = es;
                      MenhirLib.EngineTypes.startp = _startpos_es_;
                      MenhirLib.EngineTypes.endp = _endpos_es_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__2_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__2_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = array;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_array_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_array_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = Some v in

            let i = es in

            let d =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            (array, d, Paren, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = es;
                      MenhirLib.EngineTypes.startp = _startpos_es_;
                      MenhirLib.EngineTypes.endp = _endpos_es_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = Some v in

            let i = es in

            let d = let _1 = None in

                    (_1, _2) in

            (array, d, Brace, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = es;
                      MenhirLib.EngineTypes.startp = _startpos_es_;
                      MenhirLib.EngineTypes.endp = _endpos_es_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__2_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__2_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = array;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_array_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_array_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = Some v in

            let i = es in

            let d =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            (array, d, Brace, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = es;
                      MenhirLib.EngineTypes.startp = _startpos_es_;
                      MenhirLib.EngineTypes.endp = _endpos_es_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1 : unit = Obj.magic _1 in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = Some v in

            let i = es in

            let d = let _1 = None in

                    (_1, _2) in

            (array, d, Bracket, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = es;
                      MenhirLib.EngineTypes.startp = _startpos_es_;
                      MenhirLib.EngineTypes.endp = _endpos_es_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__2_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__2_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = array;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_array_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_array_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let v : Parsetree.expression = Obj.magic v in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos_v_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = Some v in

            let i = es in

            let d =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            (array, d, Bracket, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos_v_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.attribute = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression = Exp.attr _1 _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression =
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          not_expecting _loc__1_ "wildcard \"_\""
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : string Asttypes.loc option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : string Asttypes.loc = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : string Asttypes.loc option = Some _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.payload = Obj.magic _3 in
        let _2 : string Asttypes.loc = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.extension = (_2, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string * Location.t * string * Location.t * string option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.extension =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_quotedext ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.extension_constructor =
          let attrs =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs_ = _endpos__1_inlined3_ in
          let lid =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let cid =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let info = symbol_info _endpos in
          Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.extension_constructor =
          let attrs =
            let _1 = _1_inlined2 in
            _1
          in

          let _endpos_attrs_ = _endpos__1_inlined2_ in
          let lid =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let cid =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos_cid_ = _startpos__1_ in
          let _1 = () in

          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos_cid_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let info = symbol_info _endpos in
          Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.payload = Obj.magic _3 in
        let _2 : string Asttypes.loc = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.attribute =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mark_symbol_docs _sloc;
          Attr.mk ~loc:(make_loc _sloc) _2 _3
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          let params = [] in

          params
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let xs :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic xs
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          let params = let params = let xs = List.rev xs in

                                    xs in

                       params in

          params
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.core_type option * Parsetree.core_type option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkexp_constraint ~loc:_sloc _3 _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = Pexp_constraint (_4, _2) in

            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let l, o, p = _1 in
          ghexp ~loc:_sloc (Pexp_fun (l, o, p, _2))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : string Asttypes.loc list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _3 = xs in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_newtypes ~loc:_sloc _3 _5
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : Parsetree.core_type = ty in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let codomain : Parsetree.core_type = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let label : string = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let domain = extra_rhs_core_type _1 ~pos:_endpos__1_ in

              let label = Optional label in

              Ptyp_arrow (label, domain, codomain)
            in

            let _endpos__1_, _startpos__1_ =
              (_endpos_codomain_, _startpos_label_)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let codomain : Parsetree.core_type = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : string = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let domain = extra_rhs_core_type _1 ~pos:_endpos__1_ in

              let label = Labelled label in

              Ptyp_arrow (label, domain, codomain)
            in

            let _endpos__1_, _startpos__1_ =
              (_endpos_codomain_, _startpos_label_)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let codomain : Parsetree.core_type = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let domain = extra_rhs_core_type _1 ~pos:_endpos__1_ in

              let label = Nolabel in

              Ptyp_arrow (label, domain, codomain)
            in

            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Lexing.position * Parsetree.functor_parameter =
          let _startpos = _startpos__1_ in
          (_startpos, Unit)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let mty : Parsetree.module_type = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : string option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Lexing.position * Parsetree.functor_parameter =
          let x =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos = _startpos__1_ in
          (_startpos, Named (x, mty))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          ([], Pcstr_tuple [], None)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.constructor_arguments = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          ([], _2, None)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Parsetree.core_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.constructor_arguments = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          ([], _2, Some _4)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = xs;
                          MenhirLib.EngineTypes.startp = _startpos_xs_;
                          MenhirLib.EngineTypes.endp = _endpos_xs_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : Parsetree.core_type = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.constructor_arguments = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : Asttypes.label Asttypes.loc list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          let _2 = let _1 = let xs = List.rev xs in

                            xs in

                   _1 in

          (_2, _4, Some _6)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          ([], Pcstr_tuple [], Some _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Parsetree.core_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : Asttypes.label Asttypes.loc list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          let _2 = let _1 = let xs = List.rev xs in

                            xs in

                   _1 in

          (_2, Pcstr_tuple [], Some _4)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vars_args_res;
              MenhirLib.EngineTypes.startp = _startpos_vars_args_res_;
              MenhirLib.EngineTypes.endp = _endpos_vars_args_res_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let vars_args_res :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          Obj.magic vars_args_res
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          let attrs =
            let _1 = _1_inlined2 in
            _1
          in

          let _endpos_attrs_ = _endpos__1_inlined2_ in
          let cid =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let vars, args, res = vars_args_res in
          let info = symbol_info _endpos in
          let loc = make_loc _sloc in
          (cid, vars, args, res, attrs, loc, info)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = vars_args_res;
              MenhirLib.EngineTypes.startp = _startpos_vars_args_res_;
              MenhirLib.EngineTypes.endp = _endpos_vars_args_res_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let vars_args_res :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          Obj.magic vars_args_res
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos_attrs_ = _endpos__1_inlined1_ in
          let cid =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos_cid_ = _startpos__1_ in
          let _1 = () in

          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos_cid_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let vars, args, res = vars_args_res in
          let info = symbol_info _endpos in
          let loc = make_loc _sloc in
          (cid, vars, args, res, attrs, loc, info)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined3;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = ext;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos_ext_;
                                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let xs :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          Obj.magic xs
        in
        let _2 :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          Obj.magic _2
        in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v :
            (Asttypes.rec_flag * string Asttypes.loc option)
            * Parsetree.type_declaration =
          let attrs2 =
            let _1 = _1_inlined4 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let cstrs = let _1 = let xs = List.rev xs in

                               xs in

                      _1 in

          let kind_priv_manifest = _2 in

          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let flag = Recursive in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let kind, priv, manifest = kind_priv_manifest in
          let docs = symbol_docs _sloc in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          ( (flag, ext),
            Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined4;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined3;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined2;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined2_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = ext;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_ext_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_ext_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv = _1;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__1_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__1_;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined5 : Parsetree.attributes = Obj.magic _1_inlined5 in
        let xs :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          Obj.magic xs
        in
        let _2 :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          Obj.magic _2
        in
        let _1_inlined4 : unit = Obj.magic _1_inlined4 in
        let _1_inlined3 : string = Obj.magic _1_inlined3 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v :
            (Asttypes.rec_flag * string Asttypes.loc option)
            * Parsetree.type_declaration =
          let attrs2 =
            let _1 = _1_inlined5 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined5_ in
          let cstrs = let _1 = let xs = List.rev xs in

                               xs in

                      _1 in

          let kind_priv_manifest = _2 in

          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let flag =
            let _endpos__1_, _startpos__1_ =
              (_endpos__1_inlined2_, _startpos__1_inlined2_)
            in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            not_expecting _loc "nonrec flag"
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let kind, priv, manifest = kind_priv_manifest in
          let docs = symbol_docs _sloc in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          ( (flag, ext),
            Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = kind_priv_manifest;
                  MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
                  MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = params;
                          MenhirLib.EngineTypes.startp = _startpos_params_;
                          MenhirLib.EngineTypes.endp = _endpos_params_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = ext;
                                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let xs :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          Obj.magic xs
        in
        let kind_priv_manifest :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          Obj.magic kind_priv_manifest
        in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v :
            (Asttypes.rec_flag * string Asttypes.loc option)
            * Parsetree.type_declaration =
          let attrs2 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let cstrs = let _1 = let xs = List.rev xs in

                               xs in

                      _1 in

          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let flag = Recursive in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let kind, priv, manifest = kind_priv_manifest in
          let docs = symbol_docs _sloc in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          ( (flag, ext),
            Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = kind_priv_manifest;
                  MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
                  MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined3;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = params;
                          MenhirLib.EngineTypes.startp = _startpos_params_;
                          MenhirLib.EngineTypes.endp = _endpos_params_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined2;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined2_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = ext;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos_ext_;
                                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let xs :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          Obj.magic xs
        in
        let kind_priv_manifest :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          Obj.magic kind_priv_manifest
        in
        let _1_inlined3 : string = Obj.magic _1_inlined3 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v :
            (Asttypes.rec_flag * string Asttypes.loc option)
            * Parsetree.type_declaration =
          let attrs2 =
            let _1 = _1_inlined4 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let cstrs = let _1 = let xs = List.rev xs in

                               xs in

                      _1 in

          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let flag = Nonrecursive in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let kind, priv, manifest = kind_priv_manifest in
          let docs = symbol_docs _sloc in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          ( (flag, ext),
            Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.structure = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.structure = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : string = "" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : string = ";.." in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.signature = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.signature = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.payload = Obj.magic _3 in
        let _2 : string Asttypes.loc = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.extension = (_2, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string * Location.t * string * Location.t * string option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.extension =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_quotedext ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.core_type = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _1 : Asttypes.mutable_flag = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.label_declaration =
          let _5 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            _1
          in

          let _2 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos__2_ = _startpos__1_inlined1_ in
          let _endpos = _endpos__5_ in
          let _symbolstartpos =
            if _startpos__1_ != _endpos__1_ then _startpos__1_
            else _startpos__2_
          in
          let _sloc = (_symbolstartpos, _endpos) in
          let info = symbol_info _endpos in
          Type.field _2 _4 ~mut:_1 ~attrs:_5 ~loc:(make_loc _sloc) ~info
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.core_type = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _1 : Asttypes.mutable_flag = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : Parsetree.label_declaration =
          let _7 =
            let _1 = _1_inlined4 in
            _1
          in

          let _endpos__7_ = _endpos__1_inlined4_ in
          let _5 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            _1
          in

          let _2 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos__2_ = _startpos__1_inlined1_ in
          let _endpos = _endpos__7_ in
          let _symbolstartpos =
            if _startpos__1_ != _endpos__1_ then _startpos__1_
            else _startpos__2_
          in
          let _sloc = (_symbolstartpos, _endpos) in
          let info =
            match rhs_info _endpos__5_ with
            | Some _ as info_before_semi -> info_before_semi
            | None -> symbol_info _endpos
          in
          Type.field _2 _4 ~mut:_1 ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.label_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.label_declaration list = [ _1 ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.label_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.label_declaration list = [ _1 ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.label_declaration list = Obj.magic _2 in
        let _1 : Parsetree.label_declaration = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.label_declaration list = _1 :: _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string * Parsetree.pattern =
          let x =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1))
          in

          x
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cty;
          MenhirLib.EngineTypes.startp = _startpos_cty_;
          MenhirLib.EngineTypes.endp = _endpos_cty_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let cty : Parsetree.core_type = Obj.magic cty in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cty_ in
        let _v : string * Parsetree.pattern =
          let x =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1))
          in

          let _startpos_x_ = _startpos__1_ in
          let _endpos = _endpos_cty_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let lab, pat = x in
          (lab, mkpat ~loc:_sloc (Ppat_constraint (pat, cty)))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.arg_label * Parsetree.expression = (Nolabel, _1) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.arg_label * Parsetree.expression =
          (Labelled _1, _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let label : string = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : Asttypes.arg_label * Parsetree.expression =
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          let loc = _loc_label_ in
          (Labelled label, mkexpvar ~loc label)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let ty : Parsetree.core_type option * Parsetree.core_type option =
          Obj.magic ty
        in
        let label : string = Obj.magic label in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Asttypes.arg_label * Parsetree.expression =
          let _endpos = _endpos__5_ in
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          ( Labelled label,
            mkexp_constraint ~loc:(_startpos__2_, _endpos)
              (mkexpvar ~loc:_loc_label_ label)
              ty )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let label : string = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v : Asttypes.arg_label * Parsetree.expression =
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          let loc = _loc_label_ in
          (Optional label, mkexpvar ~loc label)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.arg_label * Parsetree.expression =
          (Optional _1, _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : Parsetree.expression option = Obj.magic _1_inlined1 in
        let _3 : string * Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          let _4 =
            let _1 = _1_inlined1 in
            _1
          in

          (Optional (fst _3), _4, snd _3)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          let _2 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1))
          in

          (Optional (fst _2), None, snd _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : Parsetree.expression option = Obj.magic _1_inlined1 in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          let _4 =
            let _1 = _1_inlined1 in
            _1
          in

          (Optional _1, _4, _3)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          (Optional _1, None, _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : string * Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          (Labelled (fst _3), None, snd _3)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          let _2 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1))
          in

          (Labelled (fst _2), None, snd _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          (Labelled _1, None, _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          (Nolabel, None, _1)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern * Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern * Parsetree.expression * bool =
          let p, e = _1 in
          (p, e, false)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern * Parsetree.expression * bool =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mkpatvar ~loc:_loc _1, mkexpvar ~loc:_loc _1, true)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.pattern * Parsetree.expression =
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpatvar ~loc:_sloc _1
          in

          (_1, _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.core_type option * Parsetree.core_type option =
          Obj.magic _2
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.pattern * Parsetree.expression =
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpatvar ~loc:_sloc _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let v = _1 in
          (* PR#7344 *)
          let t =
            match _2 with
            | Some t, None -> t
            | _, Some t -> t
            | _ -> assert false
          in
          let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
          let typ = ghtyp ~loc (Ptyp_poly ([], t)) in
          let patloc = (_startpos__1_, _endpos__2_) in
          ( ghpat ~loc:patloc (Ppat_constraint (v, typ)),
            mkexp_constraint ~loc:_sloc _4 _2 )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = xs;
                          MenhirLib.EngineTypes.startp = _startpos_xs_;
                          MenhirLib.EngineTypes.endp = _endpos_xs_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.core_type = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let xs : Asttypes.label Asttypes.loc list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.pattern * Parsetree.expression =
          let _3 =
            let _1 = let _1 = let xs = List.rev xs in

                              xs in

                     _1 in

            Ptyp_poly (_1, _3)
          in

          let _startpos__3_ = _startpos_xs_ in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpatvar ~loc:_sloc _1
          in

          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let patloc = (_startpos__1_, _endpos__3_) in
          (ghpat ~loc:patloc (Ppat_constraint (_1, ghtyp ~loc:_loc__3_ _3)), _5)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = xs;
                          MenhirLib.EngineTypes.startp = _startpos_xs_;
                          MenhirLib.EngineTypes.endp = _endpos_xs_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _3;
                              MenhirLib.EngineTypes.startp = _startpos__3_;
                              MenhirLib.EngineTypes.endp = _endpos__3_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp = _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _8 : Parsetree.expression = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : Parsetree.core_type = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : string Asttypes.loc list = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : Parsetree.pattern * Parsetree.expression =
          let _4 = xs in

          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpatvar ~loc:_sloc _1
          in

          let _endpos = _endpos__8_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let exp, poly = wrap_type_annotation ~loc:_sloc _4 _6 _8 in
          let loc = (_startpos__1_, _endpos__6_) in
          (ghpat ~loc (Ppat_constraint (_1, poly)), exp)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern * Parsetree.expression = (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.core_type = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.pattern * Parsetree.expression =
          let loc = (_startpos__1_, _endpos__3_) in
          (ghpat ~loc (Ppat_constraint (_1, _3)), _5)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = rec_flag;
                  MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
                  MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let body : Parsetree.pattern * Parsetree.expression * bool =
          Obj.magic body
        in
        let rec_flag : Asttypes.rec_flag = Obj.magic rec_flag in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : let_bindings =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined2 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined2_ in
            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let attrs = attrs1 @ attrs2 in
            mklbs ext rec_flag (mklb ~loc:_sloc true body attrs)
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : let_binding = Obj.magic _2 in
        let _1 : let_bindings = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : let_bindings = addlb _1 _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = rec_flag;
                  MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
                  MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let body : Parsetree.pattern * Parsetree.expression * bool =
          Obj.magic body
        in
        let rec_flag : Asttypes.rec_flag = Obj.magic rec_flag in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : let_bindings =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined2 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined2_ in
            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let ext = None in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let attrs = attrs1 @ attrs2 in
            mklbs ext rec_flag (mklb ~loc:_sloc true body attrs)
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = rec_flag;
                  MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
                  MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let body : Parsetree.pattern * Parsetree.expression * bool =
          Obj.magic body
        in
        let rec_flag : Asttypes.rec_flag = Obj.magic rec_flag in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _2 : string Asttypes.loc = Obj.magic _2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : let_bindings =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let attrs1 =
              let _1 = _1_inlined2 in
              _1
            in

            let ext =
              let _startpos__1_ = _startpos__1_inlined1_ in
              let _endpos = _endpos__2_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              not_expecting _loc "extension"
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let attrs = attrs1 @ attrs2 in
            mklbs ext rec_flag (mklb ~loc:_sloc true body attrs)
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : let_binding = Obj.magic _2 in
        let _1 : let_bindings = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : let_bindings = addlb _1 _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.core_type = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_constraint (_1, _3) in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let exp : Parsetree.expression = Obj.magic exp in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_exp_ in
        let _v : Parsetree.pattern * Parsetree.expression =
          let pat =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpatvar ~loc:_sloc _1
          in

          (pat, exp)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern * Parsetree.expression =
          let _endpos = _endpos__1_ in
          let _startpos = _startpos__1_ in
          let _loc = (_startpos, _endpos) in
          (mkpatvar ~loc:_loc _1, mkexpvar ~loc:_loc _1)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = typ;
                  MenhirLib.EngineTypes.startp = _startpos_typ_;
                  MenhirLib.EngineTypes.endp = _endpos_typ_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = pat;
                          MenhirLib.EngineTypes.startp = _startpos_pat_;
                          MenhirLib.EngineTypes.endp = _endpos_pat_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let exp : Parsetree.expression = Obj.magic exp in
        let _4 : unit = Obj.magic _4 in
        let typ : Parsetree.core_type = Obj.magic typ in
        let _2 : unit = Obj.magic _2 in
        let pat : Parsetree.pattern = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : Parsetree.pattern * Parsetree.expression =
          let loc = (_startpos_pat_, _endpos_typ_) in
          (ghpat ~loc (Ppat_constraint (pat, typ)), exp)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pat;
                  MenhirLib.EngineTypes.startp = _startpos_pat_;
                  MenhirLib.EngineTypes.endp = _endpos_pat_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let exp : Parsetree.expression = Obj.magic exp in
        let _2 : unit = Obj.magic _2 in
        let pat : Parsetree.pattern = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : Parsetree.pattern * Parsetree.expression = (pat, exp) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let body : Parsetree.pattern * Parsetree.expression = Obj.magic body in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_body_ in
        let _endpos = _endpos_body_ in
        let _v :
            Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list
            =
          let let_pat, let_exp = body in
          (let_pat, let_exp, [])
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = bindings;
                  MenhirLib.EngineTypes.startp = _startpos_bindings_;
                  MenhirLib.EngineTypes.endp = _endpos_bindings_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let body : Parsetree.pattern * Parsetree.expression = Obj.magic body in
        let _1 : string = Obj.magic _1 in
        let bindings :
            Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list
            =
          Obj.magic bindings
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_bindings_ in
        let _endpos = _endpos_body_ in
        let _v :
            Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list
            =
          let pbop_op =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_body_ in
          let _symbolstartpos = _startpos_bindings_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let let_pat, let_exp, rev_ands = bindings in
          let pbop_pat, pbop_exp = body in
          let pbop_loc = make_loc _sloc in
          let and_ = { pbop_op; pbop_pat; pbop_exp; pbop_loc } in
          (let_pat, let_exp, and_ :: rev_ands)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.class_declaration list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = body;
                  MenhirLib.EngineTypes.startp = _startpos_body_;
                  MenhirLib.EngineTypes.endp = _endpos_body_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = params;
                          MenhirLib.EngineTypes.startp = _startpos_params_;
                          MenhirLib.EngineTypes.endp = _endpos_params_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = virt;
                              MenhirLib.EngineTypes.startp = _startpos_virt_;
                              MenhirLib.EngineTypes.endp = _endpos_virt_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.class_declaration list = Obj.magic xs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let body : Parsetree.class_expr = Obj.magic body in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let virt : Asttypes.virtual_flag = Obj.magic virt in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.class_declaration list =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let attrs = attrs1 @ attrs2 in
            let loc = make_loc _sloc in
            let docs = symbol_docs _sloc in
            let text = symbol_text _symbolstartpos in
            Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.class_description list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = cty;
                  MenhirLib.EngineTypes.startp = _startpos_cty_;
                  MenhirLib.EngineTypes.endp = _endpos_cty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _6;
                      MenhirLib.EngineTypes.startp = _startpos__6_;
                      MenhirLib.EngineTypes.endp = _endpos__6_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = virt;
                                  MenhirLib.EngineTypes.startp = _startpos_virt_;
                                  MenhirLib.EngineTypes.endp = _endpos_virt_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.class_description list = Obj.magic xs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let cty : Parsetree.class_type = Obj.magic cty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let virt : Asttypes.virtual_flag = Obj.magic virt in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.class_description list =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let attrs = attrs1 @ attrs2 in
            let loc = make_loc _sloc in
            let docs = symbol_docs _sloc in
            let text = symbol_text _symbolstartpos in
            Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.class_type_declaration list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = csig;
                  MenhirLib.EngineTypes.startp = _startpos_csig_;
                  MenhirLib.EngineTypes.endp = _endpos_csig_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _6;
                      MenhirLib.EngineTypes.startp = _startpos__6_;
                      MenhirLib.EngineTypes.endp = _endpos__6_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = virt;
                                  MenhirLib.EngineTypes.startp = _startpos_virt_;
                                  MenhirLib.EngineTypes.endp = _endpos_virt_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.class_type_declaration list = Obj.magic xs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let csig : Parsetree.class_type = Obj.magic csig in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let virt : Asttypes.virtual_flag = Obj.magic virt in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.class_type_declaration list =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let attrs = attrs1 @ attrs2 in
            let loc = make_loc _sloc in
            let docs = symbol_docs _sloc in
            let text = symbol_text _symbolstartpos in
            Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.module_binding list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = body;
                  MenhirLib.EngineTypes.startp = _startpos_body_;
                  MenhirLib.EngineTypes.endp = _endpos_body_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.module_binding list = Obj.magic xs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let body : Parsetree.module_expr = Obj.magic body in
        let _1_inlined2 : string option = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.module_binding list =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let name =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let loc = make_loc _sloc in
            let attrs = attrs1 @ attrs2 in
            let docs = symbol_docs _sloc in
            let text = symbol_text _symbolstartpos in
            Mb.mk name body ~attrs ~loc ~text ~docs
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.module_declaration list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = mty;
                  MenhirLib.EngineTypes.startp = _startpos_mty_;
                  MenhirLib.EngineTypes.endp = _endpos_mty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.module_declaration list = Obj.magic xs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let mty : Parsetree.module_type = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : string option = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.module_declaration list =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let name =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let attrs = attrs1 @ attrs2 in
            let docs = symbol_docs _sloc in
            let loc = make_loc _sloc in
            let text = symbol_text _symbolstartpos in
            Md.mk name mty ~attrs ~loc ~text ~docs
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.attributes = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.attributes = Obj.magic xs in
        let x : Parsetree.attribute = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.attributes = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.type_declaration list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = kind_priv_manifest;
                      MenhirLib.EngineTypes.startp =
                        _startpos_kind_priv_manifest_;
                      MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.type_declaration list = Obj.magic xs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let xs_inlined1 :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          Obj.magic xs_inlined1
        in
        let kind_priv_manifest :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          Obj.magic kind_priv_manifest
        in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.type_declaration list =
          let x =
            let xs = xs_inlined1 in
            let attrs2 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let cstrs = let _1 = let xs = List.rev xs in

                                 xs in

                        _1 in

            let id =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let kind, priv, manifest = kind_priv_manifest in
            let docs = symbol_docs _sloc in
            let attrs = attrs1 @ attrs2 in
            let loc = make_loc _sloc in
            let text = symbol_text _symbolstartpos in
            Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
              ~text
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.type_declaration list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined4;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined3;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined2;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined2_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = params;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_params_;
                                  MenhirLib.EngineTypes.endp = _endpos_params_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.type_declaration list = Obj.magic xs in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let xs_inlined1 :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          Obj.magic xs_inlined1
        in
        let _2 :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          Obj.magic _2
        in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.type_declaration list =
          let x =
            let xs = xs_inlined1 in
            let attrs2 =
              let _1 = _1_inlined4 in
              _1
            in

            let _endpos_attrs2_ = _endpos__1_inlined4_ in
            let cstrs = let _1 = let xs = List.rev xs in

                                 xs in

                        _1 in

            let kind_priv_manifest = _2 in

            let id =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let attrs1 =
              let _1 = _1_inlined1 in
              _1
            in

            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let kind, priv, manifest = kind_priv_manifest in
            let docs = symbol_docs _sloc in
            let attrs = attrs1 @ attrs2 in
            let loc = make_loc _sloc in
            let text = symbol_text _symbolstartpos in
            Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
              ~text
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.attributes = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.attributes = Obj.magic xs in
        let x : Parsetree.attribute = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.attributes = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.signature_item list list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.signature_item list list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.signature_item list list =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              text_sig _startpos
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.signature_item list list = Obj.magic xs in
        let _1 : Parsetree.signature_item = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.signature_item list list =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              text_sig _startpos @ [ _1 ]
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.structure_item list list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.structure_item list list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.structure_item list list =
          let x =
            let _1 =
              let ys = let items = [] in

                       items in

              let xs =
                let _startpos = _startpos__1_ in
                text_str _startpos
              in

              xs @ ys
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = e;
                  MenhirLib.EngineTypes.startp = _startpos_e_;
                  MenhirLib.EngineTypes.endp = _endpos_e_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.structure_item list list = Obj.magic xs in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let e : Parsetree.expression = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.structure_item list list =
          let x =
            let _1 =
              let ys =
                let _endpos__1_, _1 = (_endpos__1_inlined1_, _1_inlined1) in
                let items =
                  let x =
                    let _1 =
                      let _1 = let attrs = _1 in

                               mkstrexp e attrs in

                      let _startpos__1_ = _startpos_e_ in
                      let _startpos = _startpos__1_ in
                      text_str _startpos @ [ _1 ]
                    in

                    let _startpos__1_ = _startpos_e_ in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    mark_rhs_docs _startpos _endpos;
                    _1
                  in

                  x
                in

                items
              in

              let xs =
                let _startpos = _startpos__1_ in
                text_str _startpos
              in

              xs @ ys
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.structure_item list list = Obj.magic xs in
        let _1 : Parsetree.structure_item = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.structure_item list list =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              text_str _startpos @ [ _1 ]
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.class_type_field list list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.class_type_field list list = Obj.magic xs in
        let _1 : Parsetree.class_type_field = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.class_type_field list list =
          let x =
            let _startpos = _startpos__1_ in
            text_csig _startpos @ [ _1 ]
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.class_field list list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.class_field list list = Obj.magic xs in
        let _1 : Parsetree.class_field = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.class_field list list =
          let x =
            let _startpos = _startpos__1_ in
            text_cstr _startpos @ [ _1 ]
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.structure_item list list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.structure_item list list = Obj.magic xs in
        let _1 : Parsetree.structure_item = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.structure_item list list =
          let x =
            let _startpos = _startpos__1_ in
            text_str _startpos @ [ _1 ]
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.toplevel_phrase list list = [] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.toplevel_phrase list list = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.toplevel_phrase list list =
          let x = let _1 = let x = let _1 = [] in

                                   _1 in

                           x in

                  _1 in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = e;
                  MenhirLib.EngineTypes.startp = _startpos_e_;
                  MenhirLib.EngineTypes.endp = _endpos_e_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.toplevel_phrase list list = Obj.magic xs in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let e : Parsetree.expression = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.toplevel_phrase list list =
          let x =
            let _1 =
              let x =
                let _1 = _1_inlined1 in
                let _1 =
                  let x =
                    let _1 =
                      let _1 = let attrs = _1 in

                               mkstrexp e attrs in

                      Ptop_def [ _1 ]
                    in

                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    text_def _startpos @ [ _1 ]
                  in

                  x
                in

                _1
              in

              x
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.toplevel_phrase list list = Obj.magic xs in
        let _1 : Parsetree.structure_item = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.toplevel_phrase list list =
          let x =
            let _1 =
              let _1 = Ptop_def [ _1 ] in

              let _startpos = _startpos__1_ in
              text_def _startpos @ [ _1 ]
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.toplevel_phrase list list = Obj.magic xs in
        let _1 : Parsetree.toplevel_phrase = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.toplevel_phrase list list =
          let x =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                mark_rhs_docs _startpos _endpos;
                _1
              in

              let _startpos = _startpos__1_ in
              text_def _startpos @ [ _1 ]
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = opat;
          MenhirLib.EngineTypes.startp = _startpos_opat_;
          MenhirLib.EngineTypes.endp = _endpos_opat_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = octy;
              MenhirLib.EngineTypes.startp = _startpos_octy_;
              MenhirLib.EngineTypes.endp = _endpos_octy_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let opat : Parsetree.pattern option = Obj.magic opat in
        let octy : Parsetree.core_type option = Obj.magic octy in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_opat_ in
        let _v :
            (Longident.t Asttypes.loc * Parsetree.pattern) list * unit option =
          let _2 = None in

          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let constraint_loc, label, pat =
              match opat with
              | None ->
                  (* No pattern; this is a pun. Desugar it.
                     But that the pattern was there and the label reconstructed (which
                     piece of AST is marked as ghost is important for warning
                     emission). *)
                  (_sloc, make_ghost label, pat_of_label label)
              | Some pat -> ((_startpos_octy_, _endpos), label, pat)
            in
            (label, mkpat_opt_constraint ~loc:constraint_loc pat octy)
          in

          ([ x ], None)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = opat;
              MenhirLib.EngineTypes.startp = _startpos_opat_;
              MenhirLib.EngineTypes.endp = _endpos_opat_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = octy;
                  MenhirLib.EngineTypes.startp = _startpos_octy_;
                  MenhirLib.EngineTypes.endp = _endpos_octy_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let x : unit = Obj.magic x in
        let opat : Parsetree.pattern option = Obj.magic opat in
        let octy : Parsetree.core_type option = Obj.magic octy in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v :
            (Longident.t Asttypes.loc * Parsetree.pattern) list * unit option =
          let _2 = Some x in

          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let constraint_loc, label, pat =
              match opat with
              | None ->
                  (* No pattern; this is a pun. Desugar it.
                     But that the pattern was there and the label reconstructed (which
                     piece of AST is marked as ghost is important for warning
                     emission). *)
                  (_sloc, make_ghost label, pat_of_label label)
              | Some pat -> ((_startpos_octy_, _endpos), label, pat)
            in
            (label, mkpat_opt_constraint ~loc:constraint_loc pat octy)
          in

          ([ x ], None)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = y;
              MenhirLib.EngineTypes.startp = _startpos_y_;
              MenhirLib.EngineTypes.endp = _endpos_y_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = opat;
                      MenhirLib.EngineTypes.startp = _startpos_opat_;
                      MenhirLib.EngineTypes.endp = _endpos_opat_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = octy;
                          MenhirLib.EngineTypes.startp = _startpos_octy_;
                          MenhirLib.EngineTypes.endp = _endpos_octy_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit option = Obj.magic _4 in
        let y : unit = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let opat : Parsetree.pattern option = Obj.magic opat in
        let octy : Parsetree.core_type option = Obj.magic octy in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v :
            (Longident.t Asttypes.loc * Parsetree.pattern) list * unit option =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let constraint_loc, label, pat =
              match opat with
              | None ->
                  (* No pattern; this is a pun. Desugar it.
                     But that the pattern was there and the label reconstructed (which
                     piece of AST is marked as ghost is important for warning
                     emission). *)
                  (_sloc, make_ghost label, pat_of_label label)
              | Some pat -> ((_startpos_octy_, _endpos), label, pat)
            in
            (label, mkpat_opt_constraint ~loc:constraint_loc pat octy)
          in

          ([ x ], Some y)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = opat;
                  MenhirLib.EngineTypes.startp = _startpos_opat_;
                  MenhirLib.EngineTypes.endp = _endpos_opat_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = octy;
                      MenhirLib.EngineTypes.startp = _startpos_octy_;
                      MenhirLib.EngineTypes.endp = _endpos_octy_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let tail :
            (Longident.t Asttypes.loc * Parsetree.pattern) list * unit option =
          Obj.magic tail
        in
        let _2 : unit = Obj.magic _2 in
        let opat : Parsetree.pattern option = Obj.magic opat in
        let octy : Parsetree.core_type option = Obj.magic octy in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v :
            (Longident.t Asttypes.loc * Parsetree.pattern) list * unit option =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let constraint_loc, label, pat =
              match opat with
              | None ->
                  (* No pattern; this is a pun. Desugar it.
                     But that the pattern was there and the label reconstructed (which
                     piece of AST is marked as ghost is important for warning
                     emission). *)
                  (_sloc, make_ghost label, pat_of_label label)
              | Some pat -> ((_startpos_octy_, _endpos), label, pat)
            in
            (label, mkpat_opt_constraint ~loc:constraint_loc pat octy)
          in

          let xs, y = tail in
          (x :: xs, y)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.case = Exp.case _1 _3 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.case = Exp.case _1 ~guard:_3 _5 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.case =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          Exp.case _1 (Exp.unreachable ~loc:(make_loc _loc__3_) ())
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let tail : Parsetree.object_field list * Asttypes.closed_flag =
          Obj.magic tail
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.core_type = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v : Parsetree.object_field list * Asttypes.closed_flag =
          let head =
            let _6 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos__6_ = _endpos__1_inlined3_ in
            let _4 =
              let _1 = _1_inlined2 in
              _1
            in

            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              _1
            in

            let _1 =
              let _1 = _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _endpos = _endpos__6_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let info =
              match rhs_info _endpos__4_ with
              | Some _ as info_before_semi -> info_before_semi
              | None -> symbol_info _endpos
            in
            let attrs = add_info_attrs info (_4 @ _6) in
            Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3
          in

          let f, c = tail in
          (head :: f, c)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = ty;
                  MenhirLib.EngineTypes.startp = _startpos_ty_;
                  MenhirLib.EngineTypes.endp = _endpos_ty_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let tail : Parsetree.object_field list * Asttypes.closed_flag =
          Obj.magic tail
        in
        let _2 : unit = Obj.magic _2 in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tail_ in
        let _v : Parsetree.object_field list * Asttypes.closed_flag =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            Of.inherit_ ~loc:(make_loc _sloc) ty
          in

          let f, c = tail in
          (head :: f, c)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.core_type = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.object_field list * Asttypes.closed_flag =
          let head =
            let _6 =
              let _1 = _1_inlined3 in
              _1
            in

            let _endpos__6_ = _endpos__1_inlined3_ in
            let _4 =
              let _1 = _1_inlined2 in
              _1
            in

            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              _1
            in

            let _1 =
              let _1 = _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _endpos = _endpos__6_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let info =
              match rhs_info _endpos__4_ with
              | Some _ as info_before_semi -> info_before_semi
              | None -> symbol_info _endpos
            in
            let attrs = add_info_attrs info (_4 @ _6) in
            Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3
          in

          ([ head ], Closed)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.object_field list * Asttypes.closed_flag =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            Of.inherit_ ~loc:(make_loc _sloc) ty
          in

          ([ head ], Closed)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.core_type = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.object_field list * Asttypes.closed_flag =
          let head =
            let _4 =
              let _1 = _1_inlined2 in
              _1
            in

            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              _1
            in

            let _1 =
              let _1 = _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _endpos = _endpos__4_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let info = symbol_info _endpos in
            let attrs = add_info_attrs info _4 in
            Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3
          in

          ([ head ], Closed)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : Parsetree.object_field list * Asttypes.closed_flag =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            Of.inherit_ ~loc:(make_loc _sloc) ty
          in

          ([ head ], Closed)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.object_field list * Asttypes.closed_flag =
          ([], Open)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = private_;
                      MenhirLib.EngineTypes.startp = _startpos_private__;
                      MenhirLib.EngineTypes.endp = _endpos_private__;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.core_type = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let private_ : Asttypes.private_flag = Obj.magic private_ in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.private_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let ty =
            let _1 = _1_inlined2 in
            _1
          in

          let label =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs = _1 in

          let _1 = Fresh in

          ((label, private_, Cfk_virtual ty), attrs)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _3 : Asttypes.private_flag = Obj.magic _3 in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.private_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 = _1 in

          let _1 = Fresh in

          let e = _5 in
          let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
          ((_4, _3, Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let _3 : Asttypes.private_flag = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.private_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _1 = Override in

          let e = _5 in
          let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
          ((_4, _3, Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _3;
                              MenhirLib.EngineTypes.startp = _startpos__3_;
                              MenhirLib.EngineTypes.endp = _endpos__3_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _8 : Parsetree.expression = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : Parsetree.core_type = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _3 : Asttypes.private_flag = Obj.magic _3 in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.private_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _6 =
            let _1 = _1_inlined2 in
            _1
          in

          let _startpos__6_ = _startpos__1_inlined2_ in
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 = _1 in

          let _1 = Fresh in

          let poly_exp =
            let loc = (_startpos__6_, _endpos__8_) in
            ghexp ~loc (Pexp_poly (_8, Some _6))
          in
          ((_4, _3, Cfk_concrete (_1, poly_exp)), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _3;
                              MenhirLib.EngineTypes.startp = _startpos__3_;
                              MenhirLib.EngineTypes.endp = _endpos__3_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _8 : Parsetree.expression = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : Parsetree.core_type = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let _3 : Asttypes.private_flag = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.private_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _6 =
            let _1 = _1_inlined3 in
            _1
          in

          let _startpos__6_ = _startpos__1_inlined3_ in
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _1 = Override in

          let poly_exp =
            let loc = (_startpos__6_, _endpos__8_) in
            ghexp ~loc (Pexp_poly (_8, Some _6))
          in
          ((_4, _3, Cfk_concrete (_1, poly_exp)), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _9;
                  MenhirLib.EngineTypes.startp = _startpos__9_;
                  MenhirLib.EngineTypes.endp = _endpos__9_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _8;
                      MenhirLib.EngineTypes.startp = _startpos__8_;
                      MenhirLib.EngineTypes.endp = _endpos__8_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = xs;
                          MenhirLib.EngineTypes.startp = _startpos_xs_;
                          MenhirLib.EngineTypes.endp = _endpos_xs_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _6;
                              MenhirLib.EngineTypes.startp = _startpos__6_;
                              MenhirLib.EngineTypes.endp = _endpos__6_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _5;
                                  MenhirLib.EngineTypes.startp = _startpos__5_;
                                  MenhirLib.EngineTypes.endp = _endpos__5_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = _3;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__3_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__3_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv = _1;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__1_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__1_;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _11 : Parsetree.expression = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : Parsetree.core_type = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : string Asttypes.loc list = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _3 : Asttypes.private_flag = Obj.magic _3 in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.private_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _7 = xs in

          let _startpos__7_ = _startpos_xs_ in
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos__4_ = _startpos__1_inlined1_ in
          let _2 = _1 in

          let _endpos__2_, _startpos__2_ = (_endpos__1_, _startpos__1_) in
          let _1 = Fresh in

          let _endpos__1_, _startpos__1_ = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__11_ in
          let _symbolstartpos =
            if _startpos__1_ != _endpos__1_ then _startpos__1_
            else if _startpos__2_ != _endpos__2_ then _startpos__2_
            else if _startpos__3_ != _endpos__3_ then _startpos__3_
            else _startpos__4_
          in
          let _sloc = (_symbolstartpos, _endpos) in
          let poly_exp_loc = (_startpos__7_, _endpos__11_) in
          let poly_exp =
            let exp, poly =
              (* it seems odd to use the global ~loc here while poly_exp_loc
                 is tighter, but this is what ocamlyacc does;
                 TODO improve parser.mly *)
              wrap_type_annotation ~loc:_sloc _7 _9 _11
            in
            ghexp ~loc:poly_exp_loc (Pexp_poly (exp, Some poly))
          in
          ((_4, _3, Cfk_concrete (_1, poly_exp)), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _10;
              MenhirLib.EngineTypes.startp = _startpos__10_;
              MenhirLib.EngineTypes.endp = _endpos__10_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _9;
                  MenhirLib.EngineTypes.startp = _startpos__9_;
                  MenhirLib.EngineTypes.endp = _endpos__9_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _8;
                      MenhirLib.EngineTypes.startp = _startpos__8_;
                      MenhirLib.EngineTypes.endp = _endpos__8_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = xs;
                          MenhirLib.EngineTypes.startp = _startpos_xs_;
                          MenhirLib.EngineTypes.endp = _endpos_xs_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _6;
                              MenhirLib.EngineTypes.startp = _startpos__6_;
                              MenhirLib.EngineTypes.endp = _endpos__6_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _5;
                                  MenhirLib.EngineTypes.startp = _startpos__5_;
                                  MenhirLib.EngineTypes.endp = _endpos__5_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined2;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined2_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined2_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = _3;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__3_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__3_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state = _;
                                              MenhirLib.EngineTypes.semv =
                                                _1_inlined1;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__1_inlined1_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__1_inlined1_;
                                              MenhirLib.EngineTypes.next =
                                                {
                                                  MenhirLib.EngineTypes.state =
                                                    _menhir_s;
                                                  MenhirLib.EngineTypes.semv =
                                                    _1;
                                                  MenhirLib.EngineTypes.startp =
                                                    _startpos__1_;
                                                  MenhirLib.EngineTypes.endp =
                                                    _endpos__1_;
                                                  MenhirLib.EngineTypes.next =
                                                    _menhir_stack;
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _11 : Parsetree.expression = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : Parsetree.core_type = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : string Asttypes.loc list = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let _3 : Asttypes.private_flag = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.private_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _7 = xs in

          let _startpos__7_ = _startpos_xs_ in
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos__4_ = _startpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos__2_, _startpos__2_ =
            (_endpos__1_inlined1_, _startpos__1_inlined1_)
          in
          let _1 = Override in

          let _endpos = _endpos__11_ in
          let _symbolstartpos =
            if _startpos__1_ != _endpos__1_ then _startpos__1_
            else if _startpos__2_ != _endpos__2_ then _startpos__2_
            else if _startpos__3_ != _endpos__3_ then _startpos__3_
            else _startpos__4_
          in
          let _sloc = (_symbolstartpos, _endpos) in
          let poly_exp_loc = (_startpos__7_, _endpos__11_) in
          let poly_exp =
            let exp, poly =
              (* it seems odd to use the global ~loc here while poly_exp_loc
                 is tighter, but this is what ocamlyacc does;
                 TODO improve parser.mly *)
              wrap_type_annotation ~loc:_sloc _7 _9 _11
            in
            ghexp ~loc:poly_exp_loc (Pexp_poly (exp, Some poly))
          in
          ((_4, _3, Cfk_concrete (_1, poly_exp)), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = Ldot (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = Ldot (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = let _1 = _1 in

                               Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = let _1 = let _1 = "::" in

                                        _1 in

                               Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = let _1 = _1 in

                               Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Longident.t =
          let _3 =
            let _1 = _1_inlined1 in
            _1
          in

          Ldot (_1, _3)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = let _3 = let _1 = "::" in

                                        _1 in

                               Ldot (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Longident.t =
          let _3 =
            let _1 = _1_inlined1 in
            _1
          in

          Ldot (_1, _3)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Asttypes.label = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = Ldot (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = Ldot (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = Ldot (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = Lident _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Asttypes.label = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t = Ldot (_1, _3) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Longident.t = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Longident.t =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          lapply ~loc:_sloc _1 _3
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Longident.t =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          expecting _loc__3_ "module path"
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let me : Parsetree.module_expr = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : Parsetree.module_expr = me in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = mty;
                  MenhirLib.EngineTypes.startp = _startpos_mty_;
                  MenhirLib.EngineTypes.endp = _endpos_mty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let me : Parsetree.module_expr = Obj.magic me in
        let _3 : unit = Obj.magic _3 in
        let mty : Parsetree.module_type = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : Parsetree.module_expr =
          let _1 =
            let _1 = Pmod_constraint (me, mty) in

            let _endpos__1_ = _endpos_me_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmod ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = arg_and_pos;
              MenhirLib.EngineTypes.startp = _startpos_arg_and_pos_;
              MenhirLib.EngineTypes.endp = _endpos_arg_and_pos_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let body : Parsetree.module_expr = Obj.magic body in
        let arg_and_pos : Lexing.position * Parsetree.functor_parameter =
          Obj.magic arg_and_pos
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_and_pos_ in
        let _endpos = _endpos_body_ in
        let _v : Parsetree.module_expr =
          let _1 =
            let _1 =
              let _, arg = arg_and_pos in
              Pmod_functor (arg, body)
            in

            let _endpos__1_, _startpos__1_ =
              (_endpos_body_, _startpos_arg_and_pos_)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmod ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let mty : Parsetree.module_type = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : Parsetree.module_type = mty in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = arg_and_pos;
              MenhirLib.EngineTypes.startp = _startpos_arg_and_pos_;
              MenhirLib.EngineTypes.endp = _endpos_arg_and_pos_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let body : Parsetree.module_type = Obj.magic body in
        let arg_and_pos : Lexing.position * Parsetree.functor_parameter =
          Obj.magic arg_and_pos
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_and_pos_ in
        let _endpos = _endpos_body_ in
        let _v : Parsetree.module_type =
          let _1 =
            let _1 =
              let _, arg = arg_and_pos in
              Pmty_functor (arg, body)
            in

            let _endpos__1_, _startpos__1_ =
              (_endpos_body_, _startpos_arg_and_pos_)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let s : Parsetree.structure = Obj.magic s in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.module_expr =
          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkmod ~loc:_sloc ~attrs (Pmod_structure s)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.structure = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.module_expr =
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "struct" _loc__1_ "end" _loc__4_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let me : Parsetree.module_expr = Obj.magic me in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (Lexing.position * Parsetree.functor_parameter) list =
          Obj.magic _1_inlined2
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : Parsetree.module_expr =
          let args =
            let _1 = _1_inlined2 in
            _1
          in

          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_me_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          wrap_mod_attrs ~loc:_sloc attrs
            (List.fold_left
               (fun acc (startpos, arg) ->
                 mkmod ~loc:(startpos, _endpos) (Pmod_functor (arg, acc)))
               me args)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let me : Parsetree.module_expr = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_me_ in
        let _v : Parsetree.module_expr = me in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = attr;
          MenhirLib.EngineTypes.startp = _startpos_attr_;
          MenhirLib.EngineTypes.endp = _endpos_attr_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = me;
              MenhirLib.EngineTypes.startp = _startpos_me_;
              MenhirLib.EngineTypes.endp = _endpos_me_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let attr : Parsetree.attribute = Obj.magic attr in
        let me : Parsetree.module_expr = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_attr_ in
        let _v : Parsetree.module_expr = Mod.attr me attr in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.module_expr =
          let _1 =
            let _1 =
              let x =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Pmod_ident x
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmod ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me2;
          MenhirLib.EngineTypes.startp = _startpos_me2_;
          MenhirLib.EngineTypes.endp = _endpos_me2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = me1;
              MenhirLib.EngineTypes.startp = _startpos_me1_;
              MenhirLib.EngineTypes.endp = _endpos_me1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let me2 : Parsetree.module_expr = Obj.magic me2 in
        let me1 : Parsetree.module_expr = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos_me2_ in
        let _v : Parsetree.module_expr =
          let _1 =
            let _1 = Pmod_apply (me1, me2) in

            let _endpos__1_, _startpos__1_ = (_endpos_me2_, _startpos_me1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmod ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = me1;
                  MenhirLib.EngineTypes.startp = _startpos_me1_;
                  MenhirLib.EngineTypes.endp = _endpos_me1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let me1 : Parsetree.module_expr = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.module_expr =
          let _1 =
            let _1 =
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos_me1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              (* TODO review mkmod location *)
              Pmod_apply (me1, mkmod ~loc:_sloc (Pmod_structure []))
            in

            let _endpos__1_, _startpos__1_ = (_endpos__3_, _startpos_me1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmod ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ex;
          MenhirLib.EngineTypes.startp = _startpos_ex_;
          MenhirLib.EngineTypes.endp = _endpos_ex_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let ex : Parsetree.extension = Obj.magic ex in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ex_ in
        let _endpos = _endpos_ex_ in
        let _v : Parsetree.module_expr =
          let _1 =
            let _1 = Pmod_extension ex in

            let _endpos__1_, _startpos__1_ = (_endpos_ex_, _startpos_ex_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmod ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : string = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : string option = Some x in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = ext;
                              MenhirLib.EngineTypes.startp = _startpos_ext_;
                              MenhirLib.EngineTypes.endp = _endpos_ext_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : Parsetree.module_substitution * string Asttypes.loc option =
          let attrs2 =
            let _1 = _1_inlined4 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let body =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let uid =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Ms.mk uid body ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : string Asttypes.loc option = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Parsetree.module_substitution * string Asttypes.loc option =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _3 =
            let _1 = _1_inlined1 in
            _1
          in

          let _loc__6_ = (_startpos__6_, _endpos__6_) in
          expecting _loc__6_ "module path"
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let s : Parsetree.signature = Obj.magic s in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.module_type =
          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkmty ~loc:_sloc ~attrs (Pmty_signature s)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.signature = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.module_type =
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "sig" _loc__1_ "end" _loc__4_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let mty : Parsetree.module_type = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (Lexing.position * Parsetree.functor_parameter) list =
          Obj.magic _1_inlined2
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : Parsetree.module_type =
          let args =
            let _1 = _1_inlined2 in
            _1
          in

          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_mty_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          wrap_mty_attrs ~loc:_sloc attrs
            (List.fold_left
               (fun acc (startpos, arg) ->
                 mkmty ~loc:(startpos, _endpos) (Pmty_functor (arg, acc)))
               mty args)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.module_expr = Obj.magic _5 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.module_type =
          let _4 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.module_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.module_type = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.module_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.module_type =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__3_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.attribute = Obj.magic _2 in
        let _1 : Parsetree.module_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.module_type = Mty.attr _1 _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.module_type =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Pmty_ident _1
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.module_type = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.module_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.module_type =
          let _1 =
            let _1 = Pmty_functor (Named (mknoloc None, _1), _3) in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.with_constraint list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.module_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.module_type =
          let _1 =
            let _1 =
              let _3 = let xs = List.rev xs in

                       xs in

              Pmty_with (_1, _3)
            in

            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.module_type =
          let _1 =
            let _1 = Pmty_extension _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkmty ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = typ;
              MenhirLib.EngineTypes.startp = _startpos_typ_;
              MenhirLib.EngineTypes.endp = _endpos_typ_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let typ : Parsetree.module_type option = Obj.magic typ in
        let _1_inlined2 : Asttypes.label = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.module_type_declaration * string Asttypes.loc option
            =
          let attrs2 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Mtd.mk id ?typ ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = typ;
              MenhirLib.EngineTypes.startp = _startpos_typ_;
              MenhirLib.EngineTypes.endp = _endpos_typ_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = ext;
                              MenhirLib.EngineTypes.startp = _startpos_ext_;
                              MenhirLib.EngineTypes.endp = _endpos_ext_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp = _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let typ : Parsetree.module_type = Obj.magic typ in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : Asttypes.label = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.module_type_declaration * string Asttypes.loc option
            =
          let attrs2 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Mtd.mk id ~typ ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Asttypes.mutable_flag = Immutable in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.mutable_flag = Mutable in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Asttypes.mutable_flag * Asttypes.virtual_flag =
          (Immutable, Concrete)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.mutable_flag * Asttypes.virtual_flag =
          (Mutable, Concrete)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.mutable_flag * Asttypes.virtual_flag =
          (Immutable, Virtual)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.mutable_flag * Asttypes.virtual_flag =
          (Mutable, Virtual)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.mutable_flag * Asttypes.virtual_flag =
          (Mutable, Virtual)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Asttypes.label = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.label = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string Asttypes.loc list =
          let x =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : string Asttypes.loc list = Obj.magic xs in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : string Asttypes.loc list =
          let x =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let s : string * Location.t * string option = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : string list =
          let x =
            let body, _, _ = s in
            body
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = s;
              MenhirLib.EngineTypes.startp = _startpos_s_;
              MenhirLib.EngineTypes.endp = _endpos_s_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let xs : string list = Obj.magic xs in
        let s : string * Location.t * string option = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_xs_ in
        let _v : string list =
          let x =
            let body, _, _ = s in
            body
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Public in

          (Ptype_abstract, priv, Some ty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Private in

          (Ptype_abstract, priv, Some ty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let cs : Parsetree.constructor_declaration list = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_cs_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Public in

          let oty = let _1 = None in

                    _1 in

          (Ptype_variant cs, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let cs : Parsetree.constructor_declaration list = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cs_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Private in

          let oty = let _1 = None in

                    _1 in

          (Ptype_variant cs, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let cs : Parsetree.constructor_declaration list = Obj.magic cs in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Public in

          let oty = let _1 = let x = x in

                             Some x in

                    _1 in

          (Ptype_variant cs, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x;
                      MenhirLib.EngineTypes.startp = _startpos_x_;
                      MenhirLib.EngineTypes.endp = _endpos_x_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let cs : Parsetree.constructor_declaration list = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Private in

          let oty = let _1 = let x = x in

                             Some x in

                    _1 in

          (Ptype_variant cs, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__3_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Public in

          let oty = let _1 = None in

                    _1 in

          (Ptype_open, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Private in

          let oty = let _1 = None in

                    _1 in

          (Ptype_open, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Public in

          let oty = let _1 = let x = x in

                             Some x in

                    _1 in

          (Ptype_open, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = x;
                      MenhirLib.EngineTypes.startp = _startpos_x_;
                      MenhirLib.EngineTypes.endp = _endpos_x_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Private in

          let oty = let _1 = let x = x in

                             Some x in

                    _1 in

          (Ptype_open, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ls;
              MenhirLib.EngineTypes.startp = _startpos_ls_;
              MenhirLib.EngineTypes.endp = _endpos_ls_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let ls : Parsetree.label_declaration list = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__5_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Public in

          let oty = let _1 = None in

                    _1 in

          (Ptype_record ls, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ls;
              MenhirLib.EngineTypes.startp = _startpos_ls_;
              MenhirLib.EngineTypes.endp = _endpos_ls_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let ls : Parsetree.label_declaration list = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Private in

          let oty = let _1 = None in

                    _1 in

          (Ptype_record ls, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ls;
              MenhirLib.EngineTypes.startp = _startpos_ls_;
              MenhirLib.EngineTypes.endp = _endpos_ls_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = x;
                          MenhirLib.EngineTypes.startp = _startpos_x_;
                          MenhirLib.EngineTypes.endp = _endpos_x_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let ls : Parsetree.label_declaration list = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Public in

          let oty = let _1 = let x = x in

                             Some x in

                    _1 in

          (Ptype_record ls, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ls;
              MenhirLib.EngineTypes.startp = _startpos_ls_;
              MenhirLib.EngineTypes.endp = _endpos_ls_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = x;
                              MenhirLib.EngineTypes.startp = _startpos_x_;
                              MenhirLib.EngineTypes.endp = _endpos_x_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let ls : Parsetree.label_declaration list = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          let priv = Private in

          let oty = let _1 = let x = x in

                             Some x in

                    _1 in

          (Ptype_record ls, priv, oty)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = me;
              MenhirLib.EngineTypes.startp = _startpos_me_;
              MenhirLib.EngineTypes.endp = _endpos_me_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let me : Parsetree.module_expr = Obj.magic me in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.open_declaration * string Asttypes.loc option =
          let attrs2 =
            let _1 = _1_inlined2 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let override = Fresh in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Opn.mk me ~override ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = me;
              MenhirLib.EngineTypes.startp = _startpos_me_;
              MenhirLib.EngineTypes.endp = _endpos_me_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let me : Parsetree.module_expr = Obj.magic me in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.open_declaration * string Asttypes.loc option =
          let attrs2 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let attrs1 =
            let _1 = _1_inlined2 in
            _1
          in

          let override = Override in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Opn.mk me ~override ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.open_description * string Asttypes.loc option =
          let attrs2 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let override = Fresh in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Opn.mk id ~override ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : Parsetree.open_description * string Asttypes.loc option =
          let attrs2 =
            let _1 = _1_inlined4 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined2 in
            _1
          in

          let override = Override in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Opn.mk id ~override ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Asttypes.label = "." ^ _1 ^ "(" ^ _3 ^ ")" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Asttypes.label = "." ^ _1 ^ "(" ^ _3 ^ ")<-" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Asttypes.label = "." ^ _1 ^ "[" ^ _3 ^ "]" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Asttypes.label = "." ^ _1 ^ "[" ^ _3 ^ "]<-" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Asttypes.label = "." ^ _1 ^ "{" ^ _3 ^ "}" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : string = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Asttypes.label = "." ^ _1 ^ "{" ^ _3 ^ "}<-" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = "!" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let op : string = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : Asttypes.label = let _1 = op in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let op : string = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : Asttypes.label = let _1 = op in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let op : string = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : Asttypes.label = let _1 = op in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let op : string = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : Asttypes.label = let _1 = op in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let op : string = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v : Asttypes.label = let _1 = op in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "+" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "+." in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "+=" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "-" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "-." in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "*" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "%" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "=" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "<" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = ">" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "or" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "||" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "&" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = "&&" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = let _1 = ":=" in

                                  _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : bool = true in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : bool = false in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : unit option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : unit option = Some x in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : unit option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : unit option = Some x in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : string Asttypes.loc option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : string Asttypes.loc option =
          let x =
            let x =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            x
          in

          Some x
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.core_type option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.core_type option = let x = x in

                                              Some x in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.expression option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.expression = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.expression option = let x = x in

                                               Some x in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.module_type option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.module_type = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.module_type option = let x = x in

                                                Some x in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.pattern option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.pattern = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.pattern option = let x = x in

                                            Some x in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Parsetree.expression option = None in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.expression = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.expression option = let x = x in

                                               Some x in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v :
            (Parsetree.core_type option * Parsetree.core_type option) option =
          None
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type option * Parsetree.core_type option =
          Obj.magic x
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v :
            (Parsetree.core_type option * Parsetree.core_type option) option =
          Some x
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : string = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = me;
                      MenhirLib.EngineTypes.startp = _startpos_me_;
                      MenhirLib.EngineTypes.endp = _endpos_me_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let mty : Parsetree.module_type = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let me : Parsetree.module_expr = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.module_expr =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkmod ~loc:_sloc (Pmod_constraint (me, mty))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.module_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.module_expr = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.module_expr =
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__5_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = me;
              MenhirLib.EngineTypes.startp = _startpos_me_;
              MenhirLib.EngineTypes.endp = _endpos_me_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let me : Parsetree.module_expr = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.module_expr = me (* TODO consider reloc *) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.module_expr = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.module_expr =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__3_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let e : Parsetree.expression = Obj.magic e in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.module_expr =
          let e = e in

          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkmod ~loc:_sloc ~attrs (Pmod_unpack e)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = e;
                      MenhirLib.EngineTypes.startp = _startpos_e_;
                      MenhirLib.EngineTypes.endp = _endpos_e_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : Parsetree.module_type = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : Parsetree.expression = Obj.magic e in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.module_expr =
          let e =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let ty =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let lid, cstrs, attrs = package_type_of_module_type _1 in
              let descr = Ptyp_package (lid, cstrs) in
              mktyp ~loc:_sloc ~attrs descr
            in

            let _endpos_ty_ = _endpos__1_ in
            let _endpos = _endpos_ty_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            ghexp ~loc:_loc (Pexp_constraint (e, ty))
          in

          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkmod ~loc:_sloc ~attrs (Pmod_unpack e)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = e;
                              MenhirLib.EngineTypes.startp = _startpos_e_;
                              MenhirLib.EngineTypes.endp = _endpos_e_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _2;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__2_;
                                      MenhirLib.EngineTypes.endp = _endpos__2_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : Parsetree.module_type = Obj.magic _1_inlined3 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : Parsetree.module_type = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : Parsetree.expression = Obj.magic e in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.module_expr =
          let e =
            let ( _endpos__1_inlined1_,
                  _startpos__1_inlined1_,
                  _endpos__1_,
                  _startpos__1_,
                  _1_inlined1,
                  _1 ) =
              ( _endpos__1_inlined3_,
                _startpos__1_inlined3_,
                _endpos__1_inlined2_,
                _startpos__1_inlined2_,
                _1_inlined3,
                _1_inlined2 )
            in
            let ty2 =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let lid, cstrs, attrs = package_type_of_module_type _1 in
              let descr = Ptyp_package (lid, cstrs) in
              mktyp ~loc:_sloc ~attrs descr
            in

            let _endpos_ty2_ = _endpos__1_inlined1_ in
            let ty1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let lid, cstrs, attrs = package_type_of_module_type _1 in
              let descr = Ptyp_package (lid, cstrs) in
              mktyp ~loc:_sloc ~attrs descr
            in

            let _endpos = _endpos_ty2_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            ghexp ~loc:_loc (Pexp_coerce (e, Some ty1, ty2))
          in

          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkmod ~loc:_sloc ~attrs (Pmod_unpack e)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = e;
                      MenhirLib.EngineTypes.startp = _startpos_e_;
                      MenhirLib.EngineTypes.endp = _endpos_e_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : Parsetree.module_type = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : Parsetree.expression = Obj.magic e in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.module_expr =
          let e =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let ty2 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let lid, cstrs, attrs = package_type_of_module_type _1 in
              let descr = Ptyp_package (lid, cstrs) in
              mktyp ~loc:_sloc ~attrs descr
            in

            let _endpos_ty2_ = _endpos__1_ in
            let _endpos = _endpos_ty2_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            ghexp ~loc:_loc (Pexp_coerce (e, None, ty2))
          in

          let attrs =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkmod ~loc:_sloc ~attrs (Pmod_unpack e)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Parsetree.module_expr =
          let _3 =
            let _1 = _1_inlined1 in
            _1
          in

          let _loc__6_ = (_startpos__6_, _endpos__6_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__6_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Parsetree.module_expr =
          let _3 =
            let _1 = _1_inlined1 in
            _1
          in

          let _loc__6_ = (_startpos__6_, _endpos__6_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__6_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.module_expr =
          let _3 =
            let _1 = _1_inlined1 in
            _1
          in

          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__5_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.pattern = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _loc__2_ = (_startpos__2_, _endpos__2_) in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat_cons ~loc:_sloc _loc__2_
              (ghpat ~loc:_sloc (Ppat_tuple [ _1; _3 ]))
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.attribute = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.pattern = let _1 = Pat.attr _1 _2 in

                                     _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern = let _1 = _1 in

                                     _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _3 =
                  let _endpos__1_, _startpos__1_, _1 =
                    (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                  in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                Ppat_alias (_1, _3)
              in

              let _endpos__1_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                expecting _loc__3_ "identifier"
              in

              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 = Ppat_tuple (List.rev _1) in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                expecting _loc__3_ "pattern"
              in

              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 = Ppat_or (_1, _3) in

              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                expecting _loc__3_ "pattern"
              in

              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _2 =
            let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              _1
            in

            (_1, _2)
          in

          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern list = _3 :: _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern list = [ _3; _1 ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern list =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          expecting _loc__3_ "pattern"
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern list = _3 :: _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern list = [ _3; _1 ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern list =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          expecting _loc__3_ "pattern"
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Ppat_construct (_1, Some ([], _2))
            in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = pat;
          MenhirLib.EngineTypes.startp = _startpos_pat_;
          MenhirLib.EngineTypes.endp = _endpos_pat_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let pat : Parsetree.pattern = Obj.magic pat in
        let _5 : unit = Obj.magic _5 in
        let xs : string Asttypes.loc list = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_pat_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let newtypes = xs in

              let constr =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Ppat_construct (constr, Some (newtypes, pat))
            in

            let _endpos__1_ = _endpos_pat_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_variant (_1, Some _2) in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _2 =
            let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              _1
            in

            (_1, _2)
          in

          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _loc__2_ = (_startpos__2_, _endpos__2_) in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat_cons ~loc:_sloc _loc__2_
              (ghpat ~loc:_sloc (Ppat_tuple [ _1; _3 ]))
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.attribute = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.pattern = let _1 = Pat.attr _1 _2 in

                                     _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern = let _1 = _1 in

                                     _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _3 =
                  let _endpos__1_, _startpos__1_, _1 =
                    (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                  in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                Ppat_alias (_1, _3)
              in

              let _endpos__1_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                expecting _loc__3_ "identifier"
              in

              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern list = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 = Ppat_tuple (List.rev _1) in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                expecting _loc__3_ "pattern"
              in

              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 = Ppat_or (_1, _3) in

              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                expecting _loc__3_ "pattern"
              in

              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkpat ~loc:_sloc _1
            in

            _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Ppat_var _1
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_any in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.structure = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.payload = PStr _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.signature = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.payload = PSig _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.payload = PTyp _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.payload = PPat (_2, None) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.payload = PPat (_2, Some _4) in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.core_type = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let xs : Asttypes.label Asttypes.loc list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let _1 = let _1 = let xs = List.rev xs in

                                xs in

                       _1 in

              Ptyp_poly (_1, _3)
            in

            let _endpos__1_, _startpos__1_ = (_endpos__3_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type = let _1 = _1 in

                                       _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : Asttypes.label Asttypes.loc list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 =
              let _3 = _1 in

              let _1 = let _1 = let xs = List.rev xs in

                                xs in

                       _1 in

              Ptyp_poly (_1, _3)
            in

            let _startpos__1_ = _startpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.payload = Obj.magic _3 in
        let _2 : string Asttypes.loc = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.attribute =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          Attr.mk ~loc:(make_loc _sloc) _2 _3
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = prim;
              MenhirLib.EngineTypes.startp = _startpos_prim_;
              MenhirLib.EngineTypes.endp = _endpos_prim_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _7;
                  MenhirLib.EngineTypes.startp = _startpos__7_;
                  MenhirLib.EngineTypes.endp = _endpos__7_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ty;
                      MenhirLib.EngineTypes.startp = _startpos_ty_;
                      MenhirLib.EngineTypes.endp = _endpos_ty_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _5;
                          MenhirLib.EngineTypes.startp = _startpos__5_;
                          MenhirLib.EngineTypes.endp = _endpos__5_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined2;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined2_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = ext;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos_ext_;
                                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let prim : string list = Obj.magic prim in
        let _7 : unit = Obj.magic _7 in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : Asttypes.label = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.value_description * string Asttypes.loc option =
          let attrs2 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Val.mk id ty ~prim ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Asttypes.private_flag = let _1 = Public in

                                         _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.private_flag = let _1 = Private in

                                         _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Asttypes.private_flag * Asttypes.virtual_flag =
          (Public, Concrete)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.private_flag * Asttypes.virtual_flag =
          (Private, Concrete)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.private_flag * Asttypes.virtual_flag =
          (Public, Virtual)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.private_flag * Asttypes.virtual_flag =
          (Private, Virtual)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.private_flag * Asttypes.virtual_flag =
          (Private, Virtual)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Asttypes.rec_flag = Nonrecursive in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.rec_flag = Recursive in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let fields : (Longident.t Asttypes.loc * Parsetree.expression) list =
          Obj.magic fields
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fields_ in
        let _endpos = _endpos_fields_ in
        let _v :
            Parsetree.expression option
            * (Longident.t Asttypes.loc * Parsetree.expression) list =
          let eo = None in

          (eo, fields)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let fields : (Longident.t Asttypes.loc * Parsetree.expression) list =
          Obj.magic fields
        in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_fields_ in
        let _v :
            Parsetree.expression option
            * (Longident.t Asttypes.loc * Parsetree.expression) list =
          let eo = let x = x in

                   Some x in

          (eo, fields)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.constructor_declaration list =
          let x =
            let cid, vars, args, res, attrs, loc, info = d in
            Type.constructor cid ~vars ~args ?res ~attrs ~loc ~info
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.constructor_declaration list =
          let x =
            let cid, vars, args, res, attrs, loc, info = d in
            Type.constructor cid ~vars ~args ?res ~attrs ~loc ~info
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let xs : Parsetree.constructor_declaration list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.constructor_declaration list =
          let x =
            let cid, vars, args, res, attrs, loc, info = d in
            Type.constructor cid ~vars ~args ?res ~attrs ~loc ~info
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.extension_constructor list =
          let x =
            let _1 =
              let cid, vars, args, res, attrs, loc, info = d in
              Te.decl cid ~vars ~args ?res ~attrs ~loc ~info
            in

            _1
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension_constructor = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.extension_constructor list = let x = _1 in

                                                        [ x ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.extension_constructor list =
          let x =
            let _1 =
              let cid, vars, args, res, attrs, loc, info = d in
              Te.decl cid ~vars ~args ?res ~attrs ~loc ~info
            in

            _1
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension_constructor = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.extension_constructor list = let x = _1 in

                                                        [ x ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let xs : Parsetree.extension_constructor list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.extension_constructor list =
          let x =
            let _1 =
              let cid, vars, args, res, attrs, loc, info = d in
              Te.decl cid ~vars ~args ?res ~attrs ~loc ~info
            in

            _1
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension_constructor = Obj.magic _1 in
        let xs : Parsetree.extension_constructor list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.extension_constructor list = let x = _1 in

                                                        x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.extension_constructor list =
          let x =
            let cid, vars, args, res, attrs, loc, info = d in
            Te.decl cid ~vars ~args ?res ~attrs ~loc ~info
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.extension_constructor list =
          let x =
            let cid, vars, args, res, attrs, loc, info = d in
            Te.decl cid ~vars ~args ?res ~attrs ~loc ~info
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let d :
            Ast_helper.str
            * Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option
            * Parsetree.attributes
            * Location.t
            * Docstrings.info =
          Obj.magic d
        in
        let xs : Parsetree.extension_constructor list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v : Parsetree.extension_constructor list =
          let x =
            let cid, vars, args, res, attrs, loc, info = d in
            Te.decl cid ~vars ~args ?res ~attrs ~loc ~info
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          []
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = xs;
                          MenhirLib.EngineTypes.startp = _startpos_xs_;
                          MenhirLib.EngineTypes.endp = _endpos_xs_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.core_type = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined1 : Parsetree.core_type = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          Obj.magic xs
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          let x =
            let x =
              let _startpos__1_, _1 = (_startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              (_1, _3, make_loc _sloc)
            in

            x
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Lexing.position * Parsetree.functor_parameter = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Lexing.position * Parsetree.functor_parameter) list = [ x ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Lexing.position * Parsetree.functor_parameter = Obj.magic x in
        let xs : (Lexing.position * Parsetree.functor_parameter) list =
          Obj.magic xs
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Lexing.position * Parsetree.functor_parameter) list =
          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Asttypes.arg_label * Parsetree.expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) list = [ x ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Asttypes.arg_label * Parsetree.expression = Obj.magic x in
        let xs : (Asttypes.arg_label * Parsetree.expression) list =
          Obj.magic xs
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) list = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Asttypes.label = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Asttypes.label list = [ x ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Asttypes.label = Obj.magic x in
        let xs : Asttypes.label list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Asttypes.label list = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Asttypes.label Asttypes.loc list =
          let x =
            let _2 =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            _2
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : Asttypes.label Asttypes.loc list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Asttypes.label Asttypes.loc list =
          let x =
            let _2 =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            _2
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.case = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.case list = let _1 = None in

                                       [ x ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.case = Obj.magic x in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_inlined1_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.case list =
          let _1 =
            let x = x_inlined1 in
            Some x
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.case = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.case list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.case list = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type list =
          let xs = let x = _1 in

                   [ x ] in

          xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type list =
          let xs = let x = _1 in

                   x :: xs in

          xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.with_constraint = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.with_constraint list = let xs = [ x ] in

                                                  xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.with_constraint = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.with_constraint list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.with_constraint list = let xs = x :: xs in

                                                  xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.row_field = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.row_field list = let xs = [ x ] in

                                            xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.row_field = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.row_field list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.row_field list = let xs = x :: xs in

                                            xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.core_type list = let xs = [ x ] in

                                            xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.core_type list = let xs = x :: xs in

                                            xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)
            =
          Obj.magic x
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          let xs = [ x ] in

          xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)
            =
          Obj.magic x
        in
        let _2 : unit = Obj.magic _2 in
        let xs :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic xs
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          let xs = x :: xs in

          xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.core_type list = let xs = [ x ] in

                                            xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.core_type list = let xs = x :: xs in

                                            xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.core_type list = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x1;
                  MenhirLib.EngineTypes.startp = _startpos_x1_;
                  MenhirLib.EngineTypes.endp = _endpos_x1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x2 : Parsetree.core_type = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : Parsetree.core_type = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : Parsetree.core_type list = [ x2; x1 ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.expression = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.expression list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.expression list = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x1;
                  MenhirLib.EngineTypes.startp = _startpos_x1_;
                  MenhirLib.EngineTypes.endp = _endpos_x1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x2 : Parsetree.expression = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : Parsetree.expression = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : Parsetree.expression list = [ x2; x1 ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : Parsetree.core_type = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.core_type list = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x1;
                  MenhirLib.EngineTypes.startp = _startpos_x1_;
                  MenhirLib.EngineTypes.endp = _endpos_x1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x2 : Parsetree.core_type = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : Parsetree.core_type = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : Parsetree.core_type list = [ x2; x1 ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.row_field = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.row_field = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.core_type = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.row_field =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          Rf.inherit_ ~loc:(make_loc _sloc) _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.expression list = let _2 = None in

                                             [ x ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : Parsetree.expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v : Parsetree.expression list =
          let _2 =
            let x = x_inlined1 in
            Some x
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.expression list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.expression = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.expression list = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = oe;
          MenhirLib.EngineTypes.startp = _startpos_oe_;
          MenhirLib.EngineTypes.endp = _endpos_oe_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let oe : Parsetree.expression option = Obj.magic oe in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_oe_ in
        let _v : (Asttypes.label Asttypes.loc * Parsetree.expression) list =
          let _2 = None in

          let x =
            let label =
              let _1 = _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let label, e =
              match oe with
              | None ->
                  (* No expression; this is a pun. Desugar it. *)
                  (make_ghost label, exp_of_label label)
              | Some e -> (label, e)
            in
            (label, e)
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = oe;
              MenhirLib.EngineTypes.startp = _startpos_oe_;
              MenhirLib.EngineTypes.endp = _endpos_oe_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let x : unit = Obj.magic x in
        let oe : Parsetree.expression option = Obj.magic oe in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Asttypes.label Asttypes.loc * Parsetree.expression) list =
          let _2 = Some x in

          let x =
            let label =
              let _1 = _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let label, e =
              match oe with
              | None ->
                  (* No expression; this is a pun. Desugar it. *)
                  (make_ghost label, exp_of_label label)
              | Some e -> (label, e)
            in
            (label, e)
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = oe;
                  MenhirLib.EngineTypes.startp = _startpos_oe_;
                  MenhirLib.EngineTypes.endp = _endpos_oe_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : (Asttypes.label Asttypes.loc * Parsetree.expression) list =
          Obj.magic xs
        in
        let _2 : unit = Obj.magic _2 in
        let oe : Parsetree.expression option = Obj.magic oe in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Asttypes.label Asttypes.loc * Parsetree.expression) list =
          let x =
            let label =
              let _1 = _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let label, e =
              match oe with
              | None ->
                  (* No expression; this is a pun. Desugar it. *)
                  (make_ghost label, exp_of_label label)
              | Some e -> (label, e)
            in
            (label, e)
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let x : Parsetree.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : Parsetree.pattern list = let _2 = None in

                                          [ x ] in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : Parsetree.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v : Parsetree.pattern list =
          let _2 =
            let x = x_inlined1 in
            Some x
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xs : Parsetree.pattern list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : Parsetree.pattern = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.pattern list = x :: xs in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = eo;
          MenhirLib.EngineTypes.startp = _startpos_eo_;
          MenhirLib.EngineTypes.endp = _endpos_eo_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = c;
              MenhirLib.EngineTypes.startp = _startpos_c_;
              MenhirLib.EngineTypes.endp = _endpos_c_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let eo : Parsetree.expression option = Obj.magic eo in
        let c : (Parsetree.core_type option * Parsetree.core_type option) option
            =
          Obj.magic c
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_eo_ in
        let _v : (Longident.t Asttypes.loc * Parsetree.expression) list =
          let _2 = None in

          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let constraint_loc, label, e =
              match eo with
              | None ->
                  (* No pattern; this is a pun. Desugar it. *)
                  (_sloc, make_ghost label, exp_of_longident label)
              | Some e -> ((_startpos_c_, _endpos), label, e)
            in
            (label, mkexp_opt_constraint ~loc:constraint_loc e c)
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = eo;
              MenhirLib.EngineTypes.startp = _startpos_eo_;
              MenhirLib.EngineTypes.endp = _endpos_eo_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = c;
                  MenhirLib.EngineTypes.startp = _startpos_c_;
                  MenhirLib.EngineTypes.endp = _endpos_c_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let x : unit = Obj.magic x in
        let eo : Parsetree.expression option = Obj.magic eo in
        let c : (Parsetree.core_type option * Parsetree.core_type option) option
            =
          Obj.magic c
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v : (Longident.t Asttypes.loc * Parsetree.expression) list =
          let _2 = Some x in

          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let constraint_loc, label, e =
              match eo with
              | None ->
                  (* No pattern; this is a pun. Desugar it. *)
                  (_sloc, make_ghost label, exp_of_longident label)
              | Some e -> ((_startpos_c_, _endpos), label, e)
            in
            (label, mkexp_opt_constraint ~loc:constraint_loc e c)
          in

          [ x ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = eo;
                  MenhirLib.EngineTypes.startp = _startpos_eo_;
                  MenhirLib.EngineTypes.endp = _endpos_eo_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = c;
                      MenhirLib.EngineTypes.startp = _startpos_c_;
                      MenhirLib.EngineTypes.endp = _endpos_c_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs : (Longident.t Asttypes.loc * Parsetree.expression) list =
          Obj.magic xs
        in
        let _2 : unit = Obj.magic _2 in
        let eo : Parsetree.expression option = Obj.magic eo in
        let c : (Parsetree.core_type option * Parsetree.core_type option) option
            =
          Obj.magic c
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : (Longident.t Asttypes.loc * Parsetree.expression) list =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let constraint_loc, label, e =
              match eo with
              | None ->
                  (* No pattern; this is a pun. Desugar it. *)
                  (_sloc, make_ghost label, exp_of_longident label)
              | Some e -> ((_startpos_c_, _endpos), label, e)
            in
            (label, mkexp_opt_constraint ~loc:constraint_loc e c)
          in

          x :: xs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = Pexp_sequence (_1, _3) in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : string Asttypes.loc = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
          let payload = PStr [ mkstrexp seq [] ] in
          mkexp ~loc:_sloc (Pexp_extension (_4, payload))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = vars_args_res;
                  MenhirLib.EngineTypes.startp = _startpos_vars_args_res_;
                  MenhirLib.EngineTypes.endp = _endpos_vars_args_res_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = ext;
                              MenhirLib.EngineTypes.startp = _startpos_ext_;
                              MenhirLib.EngineTypes.endp = _endpos_ext_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let vars_args_res :
            Ast_helper.str list
            * Parsetree.constructor_arguments
            * Parsetree.core_type option =
          Obj.magic vars_args_res
        in
        let _1_inlined2 : Asttypes.label = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : Parsetree.type_exception * string Asttypes.loc option =
          let attrs =
            let _1 = _1_inlined4 in
            _1
          in

          let _endpos_attrs_ = _endpos__1_inlined4_ in
          let attrs2 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs_ in
          let _startpos = _startpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let vars, args, res = vars_args_res in
          let loc = make_loc (_startpos, _endpos_attrs2_) in
          let docs = symbol_docs _sloc in
          ( Te.mk_exception ~attrs
              (Te.decl id ~vars ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs),
            ext )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let xss : Parsetree.signature_item list list = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v : Parsetree.signature =
          let _1 =
            let _1 = List.flatten xss in

            let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            extra_sig _startpos _endpos _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.signature_item =
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let docs = symbol_docs _sloc in
          mksig ~loc:_sloc (Psig_extension (_1, add_docs_attrs docs _2))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.attribute = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 = Psig_attribute _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mksig ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.value_description * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 = psig_value _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.value_description * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 = psig_value _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = a;
              MenhirLib.EngineTypes.startp = _startpos_a_;
              MenhirLib.EngineTypes.endp = _endpos_a_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let bs : Parsetree.type_declaration list = Obj.magic bs in
        let a :
            (Asttypes.rec_flag * string Asttypes.loc option)
            * Parsetree.type_declaration =
          Obj.magic a
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 =
                    let x, b = a in
                    (x, b :: bs)
                  in

                  _1
                in

                _1
              in

              psig_type _1
            in

            let _endpos__1_, _startpos__1_ = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = a;
              MenhirLib.EngineTypes.startp = _startpos_a_;
              MenhirLib.EngineTypes.endp = _endpos_a_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let bs : Parsetree.type_declaration list = Obj.magic bs in
        let a :
            (Asttypes.rec_flag * string Asttypes.loc option)
            * Parsetree.type_declaration =
          Obj.magic a
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 =
                    let x, b = a in
                    (x, b :: bs)
                  in

                  _1
                in

                _1
              in

              psig_typesubst _1
            in

            let _endpos__1_, _startpos__1_ = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = priv;
                  MenhirLib.EngineTypes.startp = _startpos_priv_;
                  MenhirLib.EngineTypes.endp = _endpos_priv_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _7;
                      MenhirLib.EngineTypes.startp = _startpos__7_;
                      MenhirLib.EngineTypes.endp = _endpos__7_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = ext;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos_ext_;
                                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let xs : Parsetree.extension_constructor list = Obj.magic xs in
        let priv : Asttypes.private_flag = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    _1
                  in

                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let cs = List.rev xs in

                  let tid =
                    let _endpos__1_, _startpos__1_, _1 =
                      (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
                    in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    mkrhs _1 _sloc
                  in

                  let _4 = Recursive in

                  let attrs1 =
                    let _1 = _1_inlined1 in
                    _1
                  in

                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  let docs = symbol_docs _sloc in
                  let attrs = attrs1 @ attrs2 in
                  (Te.mk tid cs ~params ~priv ~attrs ~docs, ext)
                in

                _1
              in

              psig_typext _1
            in

            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = priv;
                  MenhirLib.EngineTypes.startp = _startpos_priv_;
                  MenhirLib.EngineTypes.endp = _endpos_priv_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _7;
                      MenhirLib.EngineTypes.startp = _startpos__7_;
                      MenhirLib.EngineTypes.endp = _endpos__7_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined3;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined2;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined2_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = ext;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_ext_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_ext_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv = _1;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__1_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__1_;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let xs : Parsetree.extension_constructor list = Obj.magic xs in
        let priv : Asttypes.private_flag = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined4 in
                    _1
                  in

                  let _endpos_attrs2_ = _endpos__1_inlined4_ in
                  let cs = List.rev xs in

                  let tid =
                    let _endpos__1_, _startpos__1_, _1 =
                      (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
                    in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    mkrhs _1 _sloc
                  in

                  let _4 =
                    let _endpos__1_, _startpos__1_ =
                      (_endpos__1_inlined2_, _startpos__1_inlined2_)
                    in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    let _loc = (_startpos, _endpos) in
                    not_expecting _loc "nonrec flag"
                  in

                  let attrs1 =
                    let _1 = _1_inlined1 in
                    _1
                  in

                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  let docs = symbol_docs _sloc in
                  let attrs = attrs1 @ attrs2 in
                  (Te.mk tid cs ~params ~priv ~attrs ~docs, ext)
                in

                _1
              in

              psig_typext _1
            in

            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.type_exception * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 = psig_exception _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let body : Parsetree.module_type = Obj.magic body in
        let _1_inlined2 : string option = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  _1
                in

                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let name =
                  let _endpos__1_, _startpos__1_, _1 =
                    (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
                  in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let attrs1 =
                  let _1 = _1_inlined1 in
                  _1
                in

                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                let attrs = attrs1 @ attrs2 in
                let loc = make_loc _sloc in
                let docs = symbol_docs _sloc in
                (Md.mk name body ~attrs ~loc ~docs, ext)
              in

              let body, ext = _1 in
              (Psig_module body, ext)
            in

            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = ext;
                              MenhirLib.EngineTypes.startp = _startpos_ext_;
                              MenhirLib.EngineTypes.endp = _endpos_ext_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : string option = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined4 in
                  _1
                in

                let _endpos_attrs2_ = _endpos__1_inlined4_ in
                let body =
                  let _endpos__1_, _startpos__1_, _1 =
                    (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
                  in
                  let id =
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    mkrhs _1 _sloc
                  in

                  let _endpos_id_, _startpos_id_ =
                    (_endpos__1_, _startpos__1_)
                  in
                  let _endpos = _endpos_id_ in
                  let _symbolstartpos = _startpos_id_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  Mty.alias ~loc:(make_loc _sloc) id
                in

                let name =
                  let _endpos__1_, _startpos__1_, _1 =
                    (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
                  in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let attrs1 =
                  let _1 = _1_inlined1 in
                  _1
                in

                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                let attrs = attrs1 @ attrs2 in
                let loc = make_loc _sloc in
                let docs = symbol_docs _sloc in
                (Md.mk name body ~attrs ~loc ~docs, ext)
              in

              let body, ext = _1 in
              (Psig_module body, ext)
            in

            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.module_substitution * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let body, ext = _1 in
              (Psig_modsubst body, ext)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = mty;
                  MenhirLib.EngineTypes.startp = _startpos_mty_;
                  MenhirLib.EngineTypes.endp = _endpos_mty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _6;
                      MenhirLib.EngineTypes.startp = _startpos__6_;
                      MenhirLib.EngineTypes.endp = _endpos__6_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _4;
                              MenhirLib.EngineTypes.startp = _startpos__4_;
                              MenhirLib.EngineTypes.endp = _endpos__4_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = ext;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos_ext_;
                                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let bs : Parsetree.module_declaration list = Obj.magic bs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let mty : Parsetree.module_type = Obj.magic mty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : string option = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      _1
                    in

                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let name =
                      let _endpos__1_, _startpos__1_, _1 =
                        ( _endpos__1_inlined2_,
                          _startpos__1_inlined2_,
                          _1_inlined2 )
                      in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      mkrhs _1 _sloc
                    in

                    let attrs1 =
                      let _1 = _1_inlined1 in
                      _1
                    in

                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    let attrs = attrs1 @ attrs2 in
                    let loc = make_loc _sloc in
                    let docs = symbol_docs _sloc in
                    (ext, Md.mk name mty ~attrs ~loc ~docs)
                  in

                  let x, b = a in
                  (x, b :: bs)
                in

                _1
              in

              let ext, l = _1 in
              (Psig_recmodule l, ext)
            in

            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.module_type_declaration * string Asttypes.loc option
            =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let body, ext = _1 in
              (Psig_modtype body, ext)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.module_type_declaration * string Asttypes.loc option
            =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let body, ext = _1 in
              (Psig_modtypesubst body, ext)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.open_description * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let body, ext = _1 in
              (Psig_open body, ext)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = thing;
              MenhirLib.EngineTypes.startp = _startpos_thing_;
              MenhirLib.EngineTypes.endp = _endpos_thing_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let thing : Parsetree.module_type = Obj.magic thing in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined2 in
                  _1
                in

                let _endpos_attrs2_ = _endpos__1_inlined2_ in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  _1
                in

                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                let attrs = attrs1 @ attrs2 in
                let loc = make_loc _sloc in
                let docs = symbol_docs _sloc in
                (Incl.mk thing ~attrs ~loc ~docs, ext)
              in

              psig_include _1
            in

            let _endpos__1_ = _endpos__1_inlined2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = cty;
                  MenhirLib.EngineTypes.startp = _startpos_cty_;
                  MenhirLib.EngineTypes.endp = _endpos_cty_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _7;
                      MenhirLib.EngineTypes.startp = _startpos__7_;
                      MenhirLib.EngineTypes.endp = _endpos__7_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = virt;
                                  MenhirLib.EngineTypes.startp = _startpos_virt_;
                                  MenhirLib.EngineTypes.endp = _endpos_virt_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = ext;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_ext_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_ext_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv = _1;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__1_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__1_;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let bs : Parsetree.class_description list = Obj.magic bs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let cty : Parsetree.class_type = Obj.magic cty in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let virt : Asttypes.virtual_flag = Obj.magic virt in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      _1
                    in

                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let id =
                      let _endpos__1_, _startpos__1_, _1 =
                        ( _endpos__1_inlined2_,
                          _startpos__1_inlined2_,
                          _1_inlined2 )
                      in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      mkrhs _1 _sloc
                    in

                    let attrs1 =
                      let _1 = _1_inlined1 in
                      _1
                    in

                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    let attrs = attrs1 @ attrs2 in
                    let loc = make_loc _sloc in
                    let docs = symbol_docs _sloc in
                    (ext, Ci.mk id cty ~virt ~params ~attrs ~loc ~docs)
                  in

                  let x, b = a in
                  (x, b :: bs)
                in

                _1
              in

              let ext, l = _1 in
              (Psig_class l, ext)
            in

            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 :
            string Asttypes.loc option * Parsetree.class_type_declaration list =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.signature_item =
          let _1 =
            let _1 =
              let ext, l = _1 in
              (Psig_class_type l, ext)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mksig_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.constant = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.constant = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : string * char option = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.constant =
          let n, m = _2 in
          Pconst_integer ("-" ^ n, m)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : string * char option = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.constant =
          let f, m = _2 in
          Pconst_float ("-" ^ f, m)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : string * char option = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.constant =
          let n, m = _2 in
          Pconst_integer (n, m)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : string * char option = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.constant =
          let f, m = _2 in
          Pconst_float (f, m)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 :
            (Longident.t Asttypes.loc * Parsetree.pattern) list * unit option =
          Obj.magic _1_inlined1
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _2 =
                let _1 = _1_inlined1 in
                let fields, closed = _1 in
                let closed =
                  match closed with Some () -> Open | None -> Closed
                in
                (fields, closed)
              in

              let fields, closed = _2 in
              Ppat_record (fields, closed)
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 :
            (Longident.t Asttypes.loc * Parsetree.pattern) list * unit option =
          Obj.magic _1_inlined1
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _2 =
                let _1 = _1_inlined1 in
                let fields, closed = _1 in
                let closed =
                  match closed with Some () -> Open | None -> Closed
                in
                (fields, closed)
              in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "{" _loc__1_ "}" _loc__3_
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ps;
              MenhirLib.EngineTypes.startp = _startpos_ps_;
              MenhirLib.EngineTypes.endp = _endpos_ps_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let ps : Parsetree.pattern list = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _2 = ps in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              fst (mktailpat _loc__3_ _2)
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ps;
              MenhirLib.EngineTypes.startp = _startpos_ps_;
              MenhirLib.EngineTypes.endp = _endpos_ps_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let ps : Parsetree.pattern list = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _2 = ps in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "[" _loc__1_ "]" _loc__3_
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ps;
              MenhirLib.EngineTypes.startp = _startpos_ps_;
              MenhirLib.EngineTypes.endp = _endpos_ps_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let ps : Parsetree.pattern list = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = let _2 = ps in

                     Ppat_array _2 in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_array [] in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ps;
              MenhirLib.EngineTypes.startp = _startpos_ps_;
              MenhirLib.EngineTypes.endp = _endpos_ps_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let ps : Parsetree.pattern list = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _2 = ps in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "[|" _loc__1_ "|]" _loc__3_
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          reloc_exp ~loc:_sloc _2
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__3_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.core_type option * Parsetree.core_type option =
          Obj.magic _3
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.expression =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkexp_constraint ~loc:_sloc _2 _3
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = d;
                      MenhirLib.EngineTypes.startp = _startpos_d_;
                      MenhirLib.EngineTypes.endp = _endpos_d_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = array;
                          MenhirLib.EngineTypes.startp = _startpos_array_;
                          MenhirLib.EngineTypes.endp = _endpos_array_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let i : Parsetree.expression = Obj.magic i in
        let _3 : unit = Obj.magic _3 in
        let d : unit = Obj.magic d in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 = let r = None in

                   (array, d, Paren, i, r) in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr builtin_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = d;
                      MenhirLib.EngineTypes.startp = _startpos_d_;
                      MenhirLib.EngineTypes.endp = _endpos_d_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = array;
                          MenhirLib.EngineTypes.startp = _startpos_array_;
                          MenhirLib.EngineTypes.endp = _endpos_array_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let i : Parsetree.expression = Obj.magic i in
        let _3 : unit = Obj.magic _3 in
        let d : unit = Obj.magic d in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 = let r = None in

                   (array, d, Brace, i, r) in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr builtin_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = i;
              MenhirLib.EngineTypes.startp = _startpos_i_;
              MenhirLib.EngineTypes.endp = _endpos_i_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = d;
                      MenhirLib.EngineTypes.startp = _startpos_d_;
                      MenhirLib.EngineTypes.endp = _endpos_d_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = array;
                          MenhirLib.EngineTypes.startp = _startpos_array_;
                          MenhirLib.EngineTypes.endp = _endpos_array_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let i : Parsetree.expression = Obj.magic i in
        let _3 : unit = Obj.magic _3 in
        let d : unit = Obj.magic d in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 = let r = None in

                   (array, d, Bracket, i, r) in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr builtin_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = array;
                          MenhirLib.EngineTypes.startp = _startpos_array_;
                          MenhirLib.EngineTypes.endp = _endpos_array_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = None in

            let i = es in

            let d = let _1 = None in

                    (_1, _2) in

            (array, d, Paren, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = None in

            let i = es in

            let d =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            (array, d, Paren, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = array;
                          MenhirLib.EngineTypes.startp = _startpos_array_;
                          MenhirLib.EngineTypes.endp = _endpos_array_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = None in

            let i = es in

            let d = let _1 = None in

                    (_1, _2) in

            (array, d, Brace, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = None in

            let i = es in

            let d =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            (array, d, Brace, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = array;
                          MenhirLib.EngineTypes.startp = _startpos_array_;
                          MenhirLib.EngineTypes.endp = _endpos_array_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = None in

            let i = es in

            let d = let _1 = None in

                    (_1, _2) in

            (array, d, Bracket, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = array;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos_array_;
                                  MenhirLib.EngineTypes.endp = _endpos_array_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let array : Parsetree.expression = Obj.magic array in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_array_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let r = None in

            let i = es in

            let d =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            (array, d, Bracket, i, r)
          in

          let _endpos__1_, _startpos__1_ = (_endpos__5_, _startpos_array_) in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_indexop_expr user_indexing_operators ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _p : unit = Obj.magic _p in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Paren _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _p : unit = Obj.magic _p in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Brace _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _p : unit = Obj.magic _p in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Bracket _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let es : Parsetree.expression list = Obj.magic es in
        let _p : unit = Obj.magic _p in
        let _2 : string = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 = es in

            let _2 = let _1 = None in

                     (_1, _2) in

            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Paren _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let es : Parsetree.expression list = Obj.magic es in
        let _p : unit = Obj.magic _p in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 = es in

            let _2 =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Paren _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let es : Parsetree.expression list = Obj.magic es in
        let _p : unit = Obj.magic _p in
        let _2 : string = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 = es in

            let _2 = let _1 = None in

                     (_1, _2) in

            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Brace _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let es : Parsetree.expression list = Obj.magic es in
        let _p : unit = Obj.magic _p in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 = es in

            let _2 =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Brace _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let es : Parsetree.expression list = Obj.magic es in
        let _p : unit = Obj.magic _p in
        let _2 : string = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 = es in

            let _2 = let _1 = None in

                     (_1, _2) in

            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Bracket _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _e;
          MenhirLib.EngineTypes.startp = _startpos__e_;
          MenhirLib.EngineTypes.endp = _endpos__e_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _p;
                  MenhirLib.EngineTypes.startp = _startpos__p_;
                  MenhirLib.EngineTypes.endp = _endpos__p_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _e : unit = Obj.magic _e in
        let es : Parsetree.expression list = Obj.magic es in
        let _p : unit = Obj.magic _p in
        let _2 : string = Obj.magic _2 in
        let _2_inlined1 : Longident.t = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__e_ in
        let _v : Parsetree.expression =
          let _1 =
            let _4 = es in

            let _2 =
              let _1 =
                let _2 = _2_inlined1 in
                let x = _2 in

                Some x
              in

              (_1, _2)
            in

            let _loc__p_ = (_startpos__p_, _endpos__p_) in
            let _loc__e_ = (_startpos__e_, _endpos__e_) in
            indexop_unclosed_error _loc__p_ Bracket _loc__e_
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let e : Parsetree.expression = Obj.magic e in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let attrs =
              let _1 = _1_inlined1 in
              _1
            in

            (e.pexp_desc, (ext, attrs @ e.pexp_attributes))
          in

          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            (Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2)
          in

          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.expression =
          let _1 =
            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            unclosed "begin" _loc__1_ "end" _loc__4_
          in

          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _3 =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mkrhs _1 _sloc
            in

            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_new _3, _2)
          in

          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.module_expr = Obj.magic _4 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _3 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_pack _4, _3)
          in

          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp = _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : Parsetree.module_type = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.module_expr = Obj.magic _4 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.expression =
          let _1 =
            let _6 =
              let _endpos__1_, _startpos__1_, _1 =
                (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
              in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let lid, cstrs, attrs = package_type_of_module_type _1 in
              let descr = Ptyp_package (lid, cstrs) in
              mktyp ~loc:_sloc ~attrs descr
            in

            let _3 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let _endpos = _endpos__7_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3)
          in

          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _2;
                              MenhirLib.EngineTypes.startp = _startpos__2_;
                              MenhirLib.EngineTypes.endp = _endpos__2_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.module_expr = Obj.magic _4 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v : Parsetree.expression =
          let _1 =
            let _3 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let _loc__6_ = (_startpos__6_, _endpos__6_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            unclosed "(" _loc__1_ ")" _loc__6_
          in

          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xss : Parsetree.class_field list list = Obj.magic xss in
        let _1_inlined3 : Parsetree.pattern = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.expression =
          let _1 =
            let _3 =
              let _1 = _1_inlined3 in
              let _2 =
                let _1 = let _1 = List.flatten xss in

                         _1 in

                let _endpos__1_, _startpos__1_ =
                  (_endpos_xss_, _startpos_xss_)
                in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                extra_cstr _startpos _endpos _1
              in

              Cstr.mk _1 _2
            in

            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            (Pexp_object _3, _2)
          in

          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let xss : Parsetree.class_field list list = Obj.magic xss in
        let _1_inlined3 : Parsetree.pattern = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.expression =
          let _1 =
            let _3 =
              let _1 = _1_inlined3 in
              let _2 =
                let _1 = let _1 = List.flatten xss in

                         _1 in

                let _endpos__1_, _startpos__1_ =
                  (_endpos_xss_, _startpos_xss_)
                in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                extra_cstr _startpos _endpos _1
              in

              Cstr.mk _1 _2
            in

            let _2 =
              let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              (_1, _2)
            in

            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            unclosed "object" _loc__1_ "end" _loc__4_
          in

          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let desc, attrs = _1 in
          mkexp_attrs ~loc:_sloc desc attrs
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Pexp_ident _1
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.constant = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = Pexp_constant _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Pexp_construct (_1, None)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = Pexp_variant (_1, None) in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              Pexp_apply (_1, [ (Nolabel, _2) ])
            in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _1 =
                let _1 = "!" in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              Pexp_apply (_1, [ (Nolabel, _2) ])
            in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let xs : (Asttypes.label Asttypes.loc * Parsetree.expression) list =
          Obj.magic xs
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = let _2 = xs in

                     Pexp_override _2 in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let xs : (Asttypes.label Asttypes.loc * Parsetree.expression) list =
          Obj.magic xs
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _2 = xs in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "{<" _loc__1_ ">}" _loc__3_
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = Pexp_override [] in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _3 =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Pexp_field (_1, _3)
            in

            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              Pexp_open (od, _4)
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let xs : (Asttypes.label Asttypes.loc * Parsetree.expression) list =
          Obj.magic xs
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _4 = xs in

              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              let _startpos_od_ = _startpos__1_ in
              let _endpos = _endpos__5_ in
              let _symbolstartpos = _startpos_od_ in
              let _sloc = (_symbolstartpos, _endpos) in
              (* TODO: review the location of Pexp_override *)
              Pexp_open (od, mkexp ~loc:_sloc (Pexp_override _4))
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let xs : (Asttypes.label Asttypes.loc * Parsetree.expression) list =
          Obj.magic xs
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _4 = xs in

              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              unclosed "{<" _loc__3_ ">}" _loc__5_
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _3 =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                in
                let _1 = _1 in

                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Pexp_send (_1, _3)
            in

            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.expression = Obj.magic _3 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _1 : Parsetree.expression = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _2 =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkoperator ~loc:_sloc _1
              in

              mkinfix _1 _2 _3
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = Pexp_extension _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _3 =
                let _endpos__2_, _startpos__1_ =
                  (_endpos__2_inlined1_, _startpos__1_inlined1_)
                in
                let _1 = Lident "()" in

                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let _endpos__3_, _startpos__3_ =
                (_endpos__2_inlined1_, _startpos__1_inlined1_)
              in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              Pexp_open (od, mkexp ~loc:_loc__3_ (Pexp_construct (_3, None)))
            in

            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.expression = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              unclosed "(" _loc__3_ ")" _loc__5_
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 :
            Parsetree.expression option
            * (Longident.t Asttypes.loc * Parsetree.expression) list =
          Obj.magic _2
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let exten, fields = _2 in
              Pexp_record (fields, exten)
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 :
            Parsetree.expression option
            * (Longident.t Asttypes.loc * Parsetree.expression) list =
          Obj.magic _2
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "{" _loc__1_ "}" _loc__3_
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 :
            Parsetree.expression option
            * (Longident.t Asttypes.loc * Parsetree.expression) list =
          Obj.magic _4
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              let _endpos = _endpos__5_ in
              let exten, fields = _4 in
              Pexp_open
                ( od,
                  mkexp ~loc:(_startpos__3_, _endpos)
                    (Pexp_record (fields, exten)) )
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 :
            Parsetree.expression option
            * (Longident.t Asttypes.loc * Parsetree.expression) list =
          Obj.magic _4
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              unclosed "{" _loc__3_ "}" _loc__5_
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let es : Parsetree.expression list = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = let _2 = es in

                     Pexp_array _2 in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let es : Parsetree.expression list = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _2 = es in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "[|" _loc__1_ "|]" _loc__3_
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 = Pexp_array [] in

            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _4 = es in

              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              let _endpos = _endpos__5_ in
              Pexp_open (od, mkexp ~loc:(_startpos__3_, _endpos) (Pexp_array _4))
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              let _endpos = _endpos__4_ in
              (* TODO: review the location of Pexp_array *)
              Pexp_open (od, mkexp ~loc:(_startpos__3_, _endpos) (Pexp_array []))
            in

            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _4 = es in

              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              unclosed "[|" _loc__3_ "|]" _loc__5_
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let es : Parsetree.expression list = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _2 = es in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              fst (mktailexp _loc__3_ _2)
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let es : Parsetree.expression list = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _2 = es in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "[" _loc__1_ "]" _loc__3_
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _4 = es in

              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              let _endpos = _endpos__5_ in
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let list_exp =
                (* TODO: review the location of list_exp *)
                let tail_exp, _tail_loc = mktailexp _loc__5_ _4 in
                mkexp ~loc:(_startpos__3_, _endpos) tail_exp
              in
              Pexp_open (od, list_exp)
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _3 =
                let _endpos__2_, _startpos__1_ =
                  (_endpos__2_inlined1_, _startpos__1_inlined1_)
                in
                let _1 = Lident "[]" in

                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let _endpos__3_, _startpos__3_ =
                (_endpos__2_inlined1_, _startpos__1_inlined1_)
              in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              Pexp_open (od, mkexp ~loc:_loc__3_ (Pexp_construct (_3, None)))
            in

            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = es;
              MenhirLib.EngineTypes.startp = _startpos_es_;
              MenhirLib.EngineTypes.endp = _endpos_es_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let es : Parsetree.expression list = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _4 = es in

              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              unclosed "[" _loc__3_ "]" _loc__5_
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _7;
                  MenhirLib.EngineTypes.startp = _startpos__7_;
                  MenhirLib.EngineTypes.endp = _endpos__7_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _6;
                      MenhirLib.EngineTypes.startp = _startpos__6_;
                      MenhirLib.EngineTypes.endp = _endpos__6_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _4;
                                  MenhirLib.EngineTypes.startp = _startpos__4_;
                                  MenhirLib.EngineTypes.endp = _endpos__4_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _3;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__3_;
                                      MenhirLib.EngineTypes.endp = _endpos__3_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = _2;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__2_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__2_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv = _1;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__1_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__1_;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _9 : unit = Obj.magic _9 in
        let _1_inlined3 : Parsetree.module_type = Obj.magic _1_inlined3 in
        let _7 : unit = Obj.magic _7 in
        let _6 : Parsetree.module_expr = Obj.magic _6 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _8 =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                let lid, cstrs, attrs = package_type_of_module_type _1 in
                let descr = Ptyp_package (lid, cstrs) in
                mktyp ~loc:_sloc ~attrs descr
              in

              let _5 =
                let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
                let _2 =
                  let _1 = _1_inlined1 in
                  _1
                in

                (_1, _2)
              in

              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                let loc = make_loc _loc__1_ in
                let me = Mod.ident ~loc _1 in
                Opn.mk ~loc me
              in

              let _startpos_od_ = _startpos__1_ in
              let _endpos = _endpos__9_ in
              let _symbolstartpos = _startpos_od_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let modexp =
                mkexp_attrs ~loc:(_startpos__3_, _endpos)
                  (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8))
                  _5
              in
              Pexp_open (od, modexp)
            in

            let _endpos__1_ = _endpos__9_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _4;
                              MenhirLib.EngineTypes.startp = _startpos__4_;
                              MenhirLib.EngineTypes.endp = _endpos__4_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _3;
                                  MenhirLib.EngineTypes.startp = _startpos__3_;
                                  MenhirLib.EngineTypes.endp = _endpos__3_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _2;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__2_;
                                      MenhirLib.EngineTypes.endp = _endpos__2_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : Parsetree.module_expr = Obj.magic _6 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v : Parsetree.expression =
          let _1 =
            let _1 =
              let _5 =
                let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
                let _2 =
                  let _1 = _1_inlined1 in
                  _1
                in

                (_1, _2)
              in

              let _loc__8_ = (_startpos__8_, _endpos__8_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              unclosed "(" _loc__3_ ")" _loc__8_
            in

            let _endpos__1_ = _endpos__8_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkexp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Ppat_var _1
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          reloc_pat ~loc:_sloc _2
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.pattern = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : string option = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.pattern =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _3 =
            let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              _1
            in

            (_1, _2)
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined4;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined3;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp = _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined4 : Parsetree.module_type = Obj.magic _1_inlined4 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : string option = Obj.magic _1_inlined3 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.pattern =
          let _6 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined4_, _startpos__1_inlined4_, _1_inlined4)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            let lid, cstrs, attrs = package_type_of_module_type _1 in
            let descr = Ptyp_package (lid, cstrs) in
            mktyp ~loc:_sloc ~attrs descr
          in

          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos__4_, _startpos__4_ =
            (_endpos__1_inlined3_, _startpos__1_inlined3_)
          in
          let _3 =
            let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              _1
            in

            (_1, _2)
          in

          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _sloc = (_symbolstartpos, _endpos) in
          mkpat_attrs ~loc:_sloc
            (Ppat_constraint (mkpat ~loc:_loc__4_ (Ppat_unpack _4), _6))
            _3
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_any in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.constant = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_constant _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.constant = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.constant = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_interval (_1, _3) in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Ppat_construct (_1, None)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_variant (_1, None) in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _2 =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Ppat_type _2
            in

            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : Parsetree.pattern = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Ppat_open (_1, _3)
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _3 =
                let _endpos__2_, _startpos__1_ =
                  (_endpos__2_inlined1_, _startpos__1_inlined1_)
                in
                let _1 = Lident "[]" in

                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let _endpos__3_ = _endpos__2_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              Ppat_open (_1, mkpat ~loc:_sloc (Ppat_construct (_3, None)))
            in

            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _3 =
                let _endpos__2_, _startpos__1_ =
                  (_endpos__2_inlined1_, _startpos__1_inlined1_)
                in
                let _1 = Lident "()" in

                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let _endpos__3_ = _endpos__2_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              Ppat_open (_1, mkpat ~loc:_sloc (Ppat_construct (_3, None)))
            in

            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.pattern = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                mkrhs _1 _sloc
              in

              Ppat_open (_1, _4)
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.pattern = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              unclosed "(" _loc__3_ ")" _loc__5_
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _loc__4_ = (_startpos__4_, _endpos__4_) in
              expecting _loc__4_ "pattern"
            in

            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "(" _loc__1_ ")" _loc__3_
            in

            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.core_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_constraint (_2, _4) in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : unit = Obj.magic _5 in
        let _4 : Parsetree.core_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "(" _loc__1_ ")" _loc__5_
            in

            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.pattern = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _loc__4_ = (_startpos__4_, _endpos__4_) in
              expecting _loc__4_ "type"
            in

            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _2;
                                  MenhirLib.EngineTypes.startp = _startpos__2_;
                                  MenhirLib.EngineTypes.endp = _endpos__2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : Parsetree.module_type = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _4 : string option = Obj.magic _4 in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let _1_inlined1 : string Asttypes.loc option = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 =
              let _6 =
                let _endpos__1_, _startpos__1_, _1 =
                  (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
                in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                let lid, cstrs, attrs = package_type_of_module_type _1 in
                let descr = Ptyp_package (lid, cstrs) in
                mktyp ~loc:_sloc ~attrs descr
              in

              let _3 =
                let _1_inlined1, _1 = (_1_inlined2, _1_inlined1) in
                let _2 =
                  let _1 = _1_inlined1 in
                  _1
                in

                (_1, _2)
              in

              let _loc__7_ = (_startpos__7_, _endpos__7_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              unclosed "(" _loc__1_ ")" _loc__7_
            in

            let _endpos__1_ = _endpos__7_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.pattern =
          let _1 =
            let _1 = Ppat_extension _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkpat ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "and" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "as" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "assert" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "begin" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "class" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "constraint" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "do" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "done" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "downto" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "else" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "end" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "exception" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "external" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "false" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "for" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "fun" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "function" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "functor" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "if" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "in" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "include" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "inherit" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "initializer" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "lazy" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "let" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "match" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "method" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "module" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "mutable" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "new" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "nonrec" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "object" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "of" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "open" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "or" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "private" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "rec" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "sig" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "struct" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "then" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "to" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "true" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "try" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "type" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "val" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "virtual" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "when" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "while" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "with" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.type_exception * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.type_exception * string Asttypes.loc option = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined4;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = ext;
                                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined5 : Parsetree.attributes = Obj.magic _1_inlined5 in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : Asttypes.label = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v : Parsetree.type_exception * string Asttypes.loc option =
          let attrs =
            let _1 = _1_inlined5 in
            _1
          in

          let _endpos_attrs_ = _endpos__1_inlined5_ in
          let attrs2 =
            let _1 = _1_inlined4 in
            _1
          in

          let lid =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          ( Te.mk_exception ~attrs
              (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs),
            ext )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.expression = Obj.magic _2 in
        let _1 :
            Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern
            =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.expression =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let l, o, p = _1 in
          ghexp ~loc:_sloc (Pexp_fun (l, o, p, _2))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _5 : Parsetree.expression = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : string Asttypes.loc list = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : Parsetree.expression =
          let _3 = xs in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_newtypes ~loc:_sloc _3 _5
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let xss : Parsetree.structure_item list list = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v : Parsetree.structure =
          let _1 =
            let _1 =
              let ys = List.flatten xss in

              let xs = let items = [] in

                       items in

              xs @ ys
            in

            let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            extra_str _startpos _endpos _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e;
                  MenhirLib.EngineTypes.startp = _startpos_e_;
                  MenhirLib.EngineTypes.endp = _endpos_e_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let xss : Parsetree.structure_item list list = Obj.magic xss in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let e : Parsetree.expression = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_xss_ in
        let _v : Parsetree.structure =
          let _1 =
            let _1 =
              let ys = List.flatten xss in

              let xs =
                let items =
                  let x =
                    let _1 =
                      let _1 = let attrs = _1 in

                               mkstrexp e attrs in

                      let _startpos__1_ = _startpos_e_ in
                      let _startpos = _startpos__1_ in
                      text_str _startpos @ [ _1 ]
                    in

                    let _startpos__1_ = _startpos_e_ in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    mark_rhs_docs _startpos _endpos;
                    _1
                  in

                  x
                in

                items
              in

              xs @ ys
            in

            let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_e_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            extra_str _startpos _endpos _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : let_bindings = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.structure_item =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          val_of_let_bindings ~loc:_sloc _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : Parsetree.extension = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let _2 =
                let _1 = _1_inlined1 in
                _1
              in

              let _endpos__2_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              let docs = symbol_docs _sloc in
              Pstr_extension (_1, add_docs_attrs docs _2)
            in

            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkstr ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.attribute = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 = Pstr_attribute _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkstr ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.value_description * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 = pstr_primitive _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.value_description * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 = pstr_primitive _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = a;
              MenhirLib.EngineTypes.startp = _startpos_a_;
              MenhirLib.EngineTypes.endp = _endpos_a_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let bs : Parsetree.type_declaration list = Obj.magic bs in
        let a :
            (Asttypes.rec_flag * string Asttypes.loc option)
            * Parsetree.type_declaration =
          Obj.magic a
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 =
                    let x, b = a in
                    (x, b :: bs)
                  in

                  _1
                in

                _1
              in

              pstr_type _1
            in

            let _endpos__1_, _startpos__1_ = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = priv;
                  MenhirLib.EngineTypes.startp = _startpos_priv_;
                  MenhirLib.EngineTypes.endp = _endpos_priv_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _7;
                      MenhirLib.EngineTypes.startp = _startpos__7_;
                      MenhirLib.EngineTypes.endp = _endpos__7_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = ext;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos_ext_;
                                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let xs : Parsetree.extension_constructor list = Obj.magic xs in
        let priv : Asttypes.private_flag = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    _1
                  in

                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let cs = List.rev xs in

                  let tid =
                    let _endpos__1_, _startpos__1_, _1 =
                      (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
                    in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    mkrhs _1 _sloc
                  in

                  let _4 = Recursive in

                  let attrs1 =
                    let _1 = _1_inlined1 in
                    _1
                  in

                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  let docs = symbol_docs _sloc in
                  let attrs = attrs1 @ attrs2 in
                  (Te.mk tid cs ~params ~priv ~attrs ~docs, ext)
                in

                _1
              in

              pstr_typext _1
            in

            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = priv;
                  MenhirLib.EngineTypes.startp = _startpos_priv_;
                  MenhirLib.EngineTypes.endp = _endpos_priv_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _7;
                      MenhirLib.EngineTypes.startp = _startpos__7_;
                      MenhirLib.EngineTypes.endp = _endpos__7_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined3;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = params;
                              MenhirLib.EngineTypes.startp = _startpos_params_;
                              MenhirLib.EngineTypes.endp = _endpos_params_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined2;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined2_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined2_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = _1_inlined1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_inlined1_;
                                      MenhirLib.EngineTypes.endp =
                                        _endpos__1_inlined1_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state = _;
                                          MenhirLib.EngineTypes.semv = ext;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos_ext_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos_ext_;
                                          MenhirLib.EngineTypes.next =
                                            {
                                              MenhirLib.EngineTypes.state =
                                                _menhir_s;
                                              MenhirLib.EngineTypes.semv = _1;
                                              MenhirLib.EngineTypes.startp =
                                                _startpos__1_;
                                              MenhirLib.EngineTypes.endp =
                                                _endpos__1_;
                                              MenhirLib.EngineTypes.next =
                                                _menhir_stack;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined4 : Parsetree.attributes = Obj.magic _1_inlined4 in
        let xs : Parsetree.extension_constructor list = Obj.magic xs in
        let priv : Asttypes.private_flag = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : Longident.t = Obj.magic _1_inlined3 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined4 in
                    _1
                  in

                  let _endpos_attrs2_ = _endpos__1_inlined4_ in
                  let cs = List.rev xs in

                  let tid =
                    let _endpos__1_, _startpos__1_, _1 =
                      (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3)
                    in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    mkrhs _1 _sloc
                  in

                  let _4 =
                    let _endpos__1_, _startpos__1_ =
                      (_endpos__1_inlined2_, _startpos__1_inlined2_)
                    in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    let _loc = (_startpos, _endpos) in
                    not_expecting _loc "nonrec flag"
                  in

                  let attrs1 =
                    let _1 = _1_inlined1 in
                    _1
                  in

                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  let docs = symbol_docs _sloc in
                  let attrs = attrs1 @ attrs2 in
                  (Te.mk tid cs ~params ~priv ~attrs ~docs, ext)
                in

                _1
              in

              pstr_typext _1
            in

            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.type_exception * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 = pstr_exception _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let body : Parsetree.module_expr = Obj.magic body in
        let _1_inlined2 : string option = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  _1
                in

                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let name =
                  let _endpos__1_, _startpos__1_, _1 =
                    (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
                  in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  mkrhs _1 _sloc
                in

                let attrs1 =
                  let _1 = _1_inlined1 in
                  _1
                in

                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                let docs = symbol_docs _sloc in
                let loc = make_loc _sloc in
                let attrs = attrs1 @ attrs2 in
                let body = Mb.mk name body ~attrs ~loc ~docs in
                (Pstr_module body, ext)
              in

              _1
            in

            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = body;
                  MenhirLib.EngineTypes.startp = _startpos_body_;
                  MenhirLib.EngineTypes.endp = _endpos_body_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _4;
                          MenhirLib.EngineTypes.startp = _startpos__4_;
                          MenhirLib.EngineTypes.endp = _endpos__4_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = ext;
                                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _menhir_s;
                                      MenhirLib.EngineTypes.semv = _1;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos__1_;
                                      MenhirLib.EngineTypes.endp = _endpos__1_;
                                      MenhirLib.EngineTypes.next = _menhir_stack;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let bs : Parsetree.module_binding list = Obj.magic bs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let body : Parsetree.module_expr = Obj.magic body in
        let _1_inlined2 : string option = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      _1
                    in

                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let name =
                      let _endpos__1_, _startpos__1_, _1 =
                        ( _endpos__1_inlined2_,
                          _startpos__1_inlined2_,
                          _1_inlined2 )
                      in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      mkrhs _1 _sloc
                    in

                    let attrs1 =
                      let _1 = _1_inlined1 in
                      _1
                    in

                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    let loc = make_loc _sloc in
                    let attrs = attrs1 @ attrs2 in
                    let docs = symbol_docs _sloc in
                    (ext, Mb.mk name body ~attrs ~loc ~docs)
                  in

                  let x, b = a in
                  (x, b :: bs)
                in

                _1
              in

              pstr_recmodule _1
            in

            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.module_type_declaration * string Asttypes.loc option
            =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let body, ext = _1 in
              (Pstr_modtype body, ext)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Parsetree.open_declaration * string Asttypes.loc option =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let body, ext = _1 in
              (Pstr_open body, ext)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = body;
                  MenhirLib.EngineTypes.startp = _startpos_body_;
                  MenhirLib.EngineTypes.endp = _endpos_body_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = params;
                          MenhirLib.EngineTypes.startp = _startpos_params_;
                          MenhirLib.EngineTypes.endp = _endpos_params_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = virt;
                              MenhirLib.EngineTypes.startp = _startpos_virt_;
                              MenhirLib.EngineTypes.endp = _endpos_virt_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _;
                                  MenhirLib.EngineTypes.semv = _1_inlined1;
                                  MenhirLib.EngineTypes.startp =
                                    _startpos__1_inlined1_;
                                  MenhirLib.EngineTypes.endp =
                                    _endpos__1_inlined1_;
                                  MenhirLib.EngineTypes.next =
                                    {
                                      MenhirLib.EngineTypes.state = _;
                                      MenhirLib.EngineTypes.semv = ext;
                                      MenhirLib.EngineTypes.startp =
                                        _startpos_ext_;
                                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                                      MenhirLib.EngineTypes.next =
                                        {
                                          MenhirLib.EngineTypes.state =
                                            _menhir_s;
                                          MenhirLib.EngineTypes.semv = _1;
                                          MenhirLib.EngineTypes.startp =
                                            _startpos__1_;
                                          MenhirLib.EngineTypes.endp =
                                            _endpos__1_;
                                          MenhirLib.EngineTypes.next =
                                            _menhir_stack;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let bs : Parsetree.class_declaration list = Obj.magic bs in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let body : Parsetree.class_expr = Obj.magic body in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let params :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic params
        in
        let virt : Asttypes.virtual_flag = Obj.magic virt in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      _1
                    in

                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let id =
                      let _endpos__1_, _startpos__1_, _1 =
                        ( _endpos__1_inlined2_,
                          _startpos__1_inlined2_,
                          _1_inlined2 )
                      in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      mkrhs _1 _sloc
                    in

                    let attrs1 =
                      let _1 = _1_inlined1 in
                      _1
                    in

                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    let attrs = attrs1 @ attrs2 in
                    let loc = make_loc _sloc in
                    let docs = symbol_docs _sloc in
                    (ext, Ci.mk id body ~virt ~params ~attrs ~loc ~docs)
                  in

                  let x, b = a in
                  (x, b :: bs)
                in

                _1
              in

              let ext, l = _1 in
              (Pstr_class l, ext)
            in

            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 :
            string Asttypes.loc option * Parsetree.class_type_declaration list =
          Obj.magic _1
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let ext, l = _1 in
              (Pstr_class_type l, ext)
            in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = thing;
              MenhirLib.EngineTypes.startp = _startpos_thing_;
              MenhirLib.EngineTypes.endp = _endpos_thing_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.attributes = Obj.magic _1_inlined2 in
        let thing : Parsetree.module_expr = Obj.magic thing in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.structure_item =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined2 in
                  _1
                in

                let _endpos_attrs2_ = _endpos__1_inlined2_ in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  _1
                in

                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                let attrs = attrs1 @ attrs2 in
                let loc = make_loc _sloc in
                let docs = symbol_docs _sloc in
                (Incl.mk thing ~attrs ~loc ~docs, ext)
              in

              pstr_include _1
            in

            let _endpos__1_ = _endpos__1_inlined2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            wrap_mkstr_ext ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "-" in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : string = "-." in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _3 : bool = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.row_field =
          let _5 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos__5_ = _endpos__1_inlined1_ in
          let _4 = let _1 = let xs = List.rev xs in

                            xs in

                   _1 in

          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let info = symbol_info _endpos in
          let attrs = add_info_attrs info _5 in
          Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 _4
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.row_field =
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos__2_ = _endpos__1_inlined1_ in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let info = symbol_info _endpos in
          let attrs = add_info_attrs info _2 in
          Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true []
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v : Parsetree.toplevel_phrase =
          let arg = None in

          let _endpos_arg_ = _endpos__1_inlined1_ in
          let dir =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_directive ~loc:_sloc dir arg
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : string * Location.t * string option =
          Obj.magic _1_inlined2
        in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.toplevel_phrase =
          let arg =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let x =
              let _1 =
                let s, _, _ = _1 in
                Pdir_string s
              in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mk_directive_arg ~loc:_sloc _1
            in

            Some x
          in

          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_directive ~loc:_sloc dir arg
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : string * char option = Obj.magic _1_inlined2 in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.toplevel_phrase =
          let arg =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let x =
              let _1 =
                let n, m = _1 in
                Pdir_int (n, m)
              in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mk_directive_arg ~loc:_sloc _1
            in

            Some x
          in

          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_directive ~loc:_sloc dir arg
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.toplevel_phrase =
          let arg =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let x =
              let _1 = Pdir_ident _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mk_directive_arg ~loc:_sloc _1
            in

            Some x
          in

          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_directive ~loc:_sloc dir arg
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.toplevel_phrase =
          let arg =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let x =
              let _1 = Pdir_ident _1 in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mk_directive_arg ~loc:_sloc _1
            in

            Some x
          in

          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_directive ~loc:_sloc dir arg
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.toplevel_phrase =
          let arg =
            let _endpos__1_, _startpos__1_ =
              (_endpos__1_inlined2_, _startpos__1_inlined2_)
            in
            let x =
              let _1 = Pdir_bool false in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mk_directive_arg ~loc:_sloc _1
            in

            Some x
          in

          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_directive ~loc:_sloc dir arg
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : Asttypes.label = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.toplevel_phrase =
          let arg =
            let _endpos__1_, _startpos__1_ =
              (_endpos__1_inlined2_, _startpos__1_inlined2_)
            in
            let x =
              let _1 = Pdir_bool true in

              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              mk_directive_arg ~loc:_sloc _1
            in

            Some x
          in

          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          mk_directive ~loc:_sloc dir arg
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = e;
                  MenhirLib.EngineTypes.startp = _startpos_e_;
                  MenhirLib.EngineTypes.endp = _endpos_e_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let e : Parsetree.expression = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.toplevel_phrase =
          let _1 =
            let _1 =
              let _1 = let attrs = _1 in

                       mkstrexp e attrs in

              let _startpos__1_ = _startpos_e_ in
              let _startpos = _startpos__1_ in
              text_str _startpos @ [ _1 ]
            in

            let _startpos__1_ = _startpos_e_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            extra_str _startpos _endpos _1
          in

          Ptop_def _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let xss : Parsetree.structure_item list list = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.toplevel_phrase =
          let _1 =
            let _1 = List.flatten xss in

            let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            extra_str _startpos _endpos _1
          in

          Ptop_def _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : Parsetree.toplevel_phrase = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.toplevel_phrase = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.toplevel_phrase = raise End_of_file in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : Parsetree.core_type = ty in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let xs : Parsetree.core_type list = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = let tys = let xs = List.rev xs in

                               xs in

                     Ptyp_tuple tys in

            let _endpos__1_, _startpos__1_ = (_endpos_xs_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type option * Parsetree.core_type option =
          (Some _2, None)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _4 : Parsetree.core_type = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : Parsetree.core_type option * Parsetree.core_type option =
          (Some _2, Some _4)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type option * Parsetree.core_type option =
          (None, Some _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type option * Parsetree.core_type option =
          syntax_error ()
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.core_type option * Parsetree.core_type option =
          syntax_error ()
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          (Ptype_abstract, Public, None)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          Obj.magic _2
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v :
            Parsetree.type_kind
            * Asttypes.private_flag
            * Parsetree.core_type option =
          _2
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : Parsetree.core_type = Obj.magic _2 in
        let _1 : Asttypes.variance * Asttypes.injectivity = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v :
            Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity) =
          (_2, _1)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          []
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let p : Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)
            =
          Obj.magic p
        in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          [ p ]
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let xs :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic xs
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          let ps = let xs = List.rev xs in

                   xs in

          ps
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let tyvar : Asttypes.label = Obj.magic tyvar in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tyvar_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_var tyvar in

            let _endpos__1_ = _endpos_tyvar_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Parsetree.core_type =
          let _1 =
            let _1 = Ptyp_any in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mktyp ~loc:_sloc _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Asttypes.variance * Asttypes.injectivity =
          (NoVariance, NoInjectivity)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          (Covariant, NoInjectivity)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          (Contravariant, NoInjectivity)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          (NoVariance, Injective)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          (Covariant, Injective)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          (Covariant, Injective)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          (Contravariant, Injective)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          (Contravariant, Injective)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          if _1 = "+!" then (Covariant, Injective)
          else if _1 = "-!" then (Contravariant, Injective)
          else expecting _loc__1_ "type_variance"
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.variance * Asttypes.injectivity =
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          if _1 = "!+" then (Covariant, Injective)
          else if _1 = "!-" then (Contravariant, Injective)
          else expecting _loc__1_ "type_variance"
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let xss : Parsetree.toplevel_phrase list list = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.toplevel_phrase list =
          let _1 =
            let _1 =
              let ys = List.flatten xss in

              let xs = let _1 = [] in

                       _1 in

              xs @ ys
            in

            let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            extra_def _startpos _endpos _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xss;
              MenhirLib.EngineTypes.startp = _startpos_xss_;
              MenhirLib.EngineTypes.endp = _endpos_xss_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = e;
                      MenhirLib.EngineTypes.startp = _startpos_e_;
                      MenhirLib.EngineTypes.endp = _endpos_e_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let xss : Parsetree.toplevel_phrase list list = Obj.magic xss in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let e : Parsetree.expression = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : Parsetree.toplevel_phrase list =
          let _1 =
            let _1 =
              let ys = List.flatten xss in

              let xs =
                let _1 =
                  let x =
                    let _1 =
                      let _1 = let attrs = _1 in

                               mkstrexp e attrs in

                      Ptop_def [ _1 ]
                    in

                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    text_def _startpos @ [ _1 ]
                  in

                  x
                in

                _1
              in

              xs @ ys
            in

            let _endpos__1_, _startpos__1_ = (_endpos_xss_, _startpos_e_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            extra_def _startpos _endpos _1
          in

          _1
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Asttypes.label = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Asttypes.label = _2 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : Asttypes.label = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Asttypes.label =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          unclosed "(" _loc__1_ ")" _loc__3_
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.label =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          expecting _loc__2_ "operator"
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
            };
        } =
          _menhir_stack
        in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : Asttypes.label =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          expecting _loc__3_ "module-expr"
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : string = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Asttypes.label = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.label = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : Longident.t = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Longident.t = _1 in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = mutable_;
                      MenhirLib.EngineTypes.startp = _startpos_mutable__;
                      MenhirLib.EngineTypes.endp = _endpos_mutable__;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let mutable_ : Asttypes.mutable_flag = Obj.magic mutable_ in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.mutable_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let label =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs = _1 in

          let _1 = Fresh in

          ((label, mutable_, Cfk_virtual ty), attrs)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : Parsetree.expression = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _3 : Asttypes.mutable_flag = Obj.magic _3 in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.mutable_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 = _1 in

          let _1 = Fresh in

          ((_4, _3, Cfk_concrete (_1, _6)), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _6 : Parsetree.expression = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let _3 : Asttypes.mutable_flag = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.mutable_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _1 = Override in

          ((_4, _3, Cfk_concrete (_1, _6)), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.expression = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : Parsetree.core_type option * Parsetree.core_type option =
          Obj.magic _5
        in
        let _1_inlined1 : string = Obj.magic _1_inlined1 in
        let _3 : Asttypes.mutable_flag = Obj.magic _3 in
        let _1 : Parsetree.attributes = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.mutable_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos__4_ = _startpos__1_inlined1_ in
          let _2 = _1 in

          let _endpos__2_, _startpos__2_ = (_endpos__1_, _startpos__1_) in
          let _1 = Fresh in

          let _endpos__1_, _startpos__1_ = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__7_ in
          let _symbolstartpos =
            if _startpos__1_ != _endpos__1_ then _startpos__1_
            else if _startpos__2_ != _endpos__2_ then _startpos__2_
            else if _startpos__3_ != _endpos__3_ then _startpos__3_
            else _startpos__4_
          in
          let _sloc = (_symbolstartpos, _endpos) in
          let e = mkexp_constraint ~loc:_sloc _7 _5 in
          ((_4, _3, Cfk_concrete (_1, e)), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = _1_inlined1;
                              MenhirLib.EngineTypes.startp =
                                _startpos__1_inlined1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _7 : Parsetree.expression = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : Parsetree.core_type option * Parsetree.core_type option =
          Obj.magic _5
        in
        let _1_inlined2 : string = Obj.magic _1_inlined2 in
        let _3 : Asttypes.mutable_flag = Obj.magic _3 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v :
            (Asttypes.label Asttypes.loc
            * Asttypes.mutable_flag
            * Parsetree.class_field_kind)
            * Parsetree.attributes =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _1 = _1 in

            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _startpos__4_ = _startpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos__2_, _startpos__2_ =
            (_endpos__1_inlined1_, _startpos__1_inlined1_)
          in
          let _1 = Override in

          let _endpos = _endpos__7_ in
          let _symbolstartpos =
            if _startpos__1_ != _endpos__1_ then _startpos__1_
            else if _startpos__2_ != _endpos__2_ then _startpos__2_
            else if _startpos__3_ != _endpos__3_ then _startpos__3_
            else _startpos__4_
          in
          let _sloc = (_symbolstartpos, _endpos) in
          let e = mkexp_constraint ~loc:_sloc _7 _5 in
          ((_4, _3, Cfk_concrete (_1, e)), _2)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined1;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _;
                              MenhirLib.EngineTypes.semv = ext;
                              MenhirLib.EngineTypes.startp = _startpos_ext_;
                              MenhirLib.EngineTypes.endp = _endpos_ext_;
                              MenhirLib.EngineTypes.next =
                                {
                                  MenhirLib.EngineTypes.state = _menhir_s;
                                  MenhirLib.EngineTypes.semv = _1;
                                  MenhirLib.EngineTypes.startp = _startpos__1_;
                                  MenhirLib.EngineTypes.endp = _endpos__1_;
                                  MenhirLib.EngineTypes.next = _menhir_stack;
                                };
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined3 : Parsetree.attributes = Obj.magic _1_inlined3 in
        let ty : Parsetree.core_type = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : Asttypes.label = Obj.magic _1_inlined2 in
        let _1_inlined1 : Parsetree.attributes = Obj.magic _1_inlined1 in
        let ext : string Asttypes.loc option = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v : Parsetree.value_description * string Asttypes.loc option =
          let attrs2 =
            let _1 = _1_inlined3 in
            _1
          in

          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let attrs1 =
            let _1 = _1_inlined1 in
            _1
          in

          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let attrs = attrs1 @ attrs2 in
          let loc = make_loc _sloc in
          let docs = symbol_docs _sloc in
          (Val.mk id ty ~attrs ~loc ~docs, ext)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : Asttypes.virtual_flag = Concrete in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.virtual_flag = Virtual in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.mutable_flag = Immutable in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.mutable_flag = Mutable in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.mutable_flag = Mutable in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.private_flag = Public in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.private_flag = Private in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.private_flag = Private in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next =
                            {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let xs :
            (Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list =
          Obj.magic xs
        in
        let _1_inlined2 : Parsetree.core_type = Obj.magic _1_inlined2 in
        let _4 : Asttypes.private_flag = Obj.magic _4 in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _2 :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic _2
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v : Parsetree.with_constraint =
          let _6 = let _1 = let xs = List.rev xs in

                            xs in

                   _1 in

          let _endpos__6_ = _endpos_xs_ in
          let _5 =
            let _1 = _1_inlined2 in
            _1
          in

          let _3 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let lident = loc_last _3 in
          Pwith_type
            ( _3,
              Type.mk lident ~params:_2 ~cstrs:_6 ~manifest:_5 ~priv:_4
                ~loc:(make_loc _sloc) )
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Parsetree.core_type = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _2 :
            (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity))
            list =
          Obj.magic _2
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.with_constraint =
          let _5 =
            let _1 = _1_inlined2 in
            _1
          in

          let _endpos__5_ = _endpos__1_inlined2_ in
          let _3 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          let lident = loc_last _3 in
          Pwith_typesubst
            (_3, Type.mk lident ~params:_2 ~manifest:_5 ~loc:(make_loc _sloc))
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.with_constraint =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          Pwith_module (_2, _4)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                };
            };
        } =
          _menhir_stack
        in
        let _1_inlined2 : Longident.t = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v : Parsetree.with_constraint =
          let _4 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          let _2 =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          Pwith_modsubst (_2, _4)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let rhs : Parsetree.module_type = Obj.magic rhs in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_rhs_ in
        let _v : Parsetree.with_constraint =
          let l =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          Pwith_modtype (l, rhs)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = rhs;
          MenhirLib.EngineTypes.startp = _startpos_rhs_;
          MenhirLib.EngineTypes.endp = _endpos_rhs_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next =
                {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next =
                    {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next =
                        {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                    };
                };
            };
        } =
          _menhir_stack
        in
        let rhs : Parsetree.module_type = Obj.magic rhs in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : Longident.t = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_rhs_ in
        let _v : Parsetree.with_constraint =
          let l =
            let _endpos__1_, _startpos__1_, _1 =
              (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1)
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            mkrhs _1 _sloc
          in

          Pwith_modtypesubst (l, rhs)
        in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } =
          _menhir_stack
        in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : Asttypes.private_flag = Public in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next =
            {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
        } =
          _menhir_stack
        in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : Asttypes.private_flag = Private in

        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]

  and trace = None
end

module MenhirInterpreter = struct
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  module TI = MenhirLib.Engine.Make (ET)
  include TI
end

let use_file lexer lexbuf : Parsetree.toplevel_phrase list =
  Obj.magic (MenhirInterpreter.entry `Simplified 1838 lexer lexbuf)

and toplevel_phrase lexer lexbuf : Parsetree.toplevel_phrase =
  Obj.magic (MenhirInterpreter.entry `Simplified 1818 lexer lexbuf)

and parse_val_longident lexer lexbuf : Longident.t =
  Obj.magic (MenhirInterpreter.entry `Simplified 1812 lexer lexbuf)

and parse_pattern lexer lexbuf : Parsetree.pattern =
  Obj.magic (MenhirInterpreter.entry `Simplified 1808 lexer lexbuf)

and parse_mty_longident lexer lexbuf : Longident.t =
  Obj.magic (MenhirInterpreter.entry `Simplified 1804 lexer lexbuf)

and parse_mod_longident lexer lexbuf : Longident.t =
  Obj.magic (MenhirInterpreter.entry `Simplified 1800 lexer lexbuf)

and parse_mod_ext_longident lexer lexbuf : Longident.t =
  Obj.magic (MenhirInterpreter.entry `Simplified 1796 lexer lexbuf)

and parse_expression lexer lexbuf : Parsetree.expression =
  Obj.magic (MenhirInterpreter.entry `Simplified 1792 lexer lexbuf)

and parse_core_type lexer lexbuf : Parsetree.core_type =
  Obj.magic (MenhirInterpreter.entry `Simplified 1788 lexer lexbuf)

and parse_constr_longident lexer lexbuf : Longident.t =
  Obj.magic (MenhirInterpreter.entry `Simplified 1784 lexer lexbuf)

and parse_any_longident lexer lexbuf : Longident.t =
  Obj.magic (MenhirInterpreter.entry `Simplified 1766 lexer lexbuf)

and interface lexer lexbuf : Parsetree.signature =
  Obj.magic (MenhirInterpreter.entry `Simplified 1762 lexer lexbuf)

and implementation lexer lexbuf : Parsetree.structure =
  Obj.magic (MenhirInterpreter.entry `Simplified 0 lexer lexbuf)

module Incremental = struct
  let use_file initial_position :
      Parsetree.toplevel_phrase list MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1838 initial_position)

  and toplevel_phrase initial_position :
      Parsetree.toplevel_phrase MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1818 initial_position)

  and parse_val_longident initial_position :
      Longident.t MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1812 initial_position)

  and parse_pattern initial_position :
      Parsetree.pattern MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1808 initial_position)

  and parse_mty_longident initial_position :
      Longident.t MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1804 initial_position)

  and parse_mod_longident initial_position :
      Longident.t MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1800 initial_position)

  and parse_mod_ext_longident initial_position :
      Longident.t MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1796 initial_position)

  and parse_expression initial_position :
      Parsetree.expression MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1792 initial_position)

  and parse_core_type initial_position :
      Parsetree.core_type MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1788 initial_position)

  and parse_constr_longident initial_position :
      Longident.t MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1784 initial_position)

  and parse_any_longident initial_position :
      Longident.t MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1766 initial_position)

  and interface initial_position :
      Parsetree.signature MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 1762 initial_position)

  and implementation initial_position :
      Parsetree.structure MenhirInterpreter.checkpoint =
    Obj.magic (MenhirInterpreter.start 0 initial_position)
end
